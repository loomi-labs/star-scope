// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: queryevent/queryevent.proto

package queryevent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProposalType int32

const (
	ProposalType_PROPOSAL_TYPE_UNSPECIFIED             ProposalType = 0
	ProposalType_PROPOSAL_TYPE_TEXT                    ProposalType = 1
	ProposalType_PROPOSAL_TYPE_PARAM_CHANGE            ProposalType = 2
	ProposalType_PROPOSAL_TYPE_UPGRADE                 ProposalType = 3
	ProposalType_PROPOSAL_TYPE_CANCEL_SOFTWARE_UPGRADE ProposalType = 4
	ProposalType_PROPOSAL_TYPE_COMMUNITY_POOL_SPEND    ProposalType = 5
)

// Enum value maps for ProposalType.
var (
	ProposalType_name = map[int32]string{
		0: "PROPOSAL_TYPE_UNSPECIFIED",
		1: "PROPOSAL_TYPE_TEXT",
		2: "PROPOSAL_TYPE_PARAM_CHANGE",
		3: "PROPOSAL_TYPE_UPGRADE",
		4: "PROPOSAL_TYPE_CANCEL_SOFTWARE_UPGRADE",
		5: "PROPOSAL_TYPE_COMMUNITY_POOL_SPEND",
	}
	ProposalType_value = map[string]int32{
		"PROPOSAL_TYPE_UNSPECIFIED":             0,
		"PROPOSAL_TYPE_TEXT":                    1,
		"PROPOSAL_TYPE_PARAM_CHANGE":            2,
		"PROPOSAL_TYPE_UPGRADE":                 3,
		"PROPOSAL_TYPE_CANCEL_SOFTWARE_UPGRADE": 4,
		"PROPOSAL_TYPE_COMMUNITY_POOL_SPEND":    5,
	}
)

func (x ProposalType) Enum() *ProposalType {
	p := new(ProposalType)
	*p = x
	return p
}

func (x ProposalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProposalType) Descriptor() protoreflect.EnumDescriptor {
	return file_queryevent_queryevent_proto_enumTypes[0].Descriptor()
}

func (ProposalType) Type() protoreflect.EnumType {
	return &file_queryevent_queryevent_proto_enumTypes[0]
}

func (x ProposalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProposalType.Descriptor instead.
func (ProposalType) EnumDescriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{0}
}

type ProposalStatus int32

const (
	ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED    ProposalStatus = 0
	ProposalStatus_PROPOSAL_STATUS_DEPOSIT_PERIOD ProposalStatus = 1
	ProposalStatus_PROPOSAL_STATUS_VOTING_PERIOD  ProposalStatus = 2
	ProposalStatus_PROPOSAL_STATUS_PASSED         ProposalStatus = 3
	ProposalStatus_PROPOSAL_STATUS_REJECTED       ProposalStatus = 4
	ProposalStatus_PROPOSAL_STATUS_FAILED         ProposalStatus = 5
)

// Enum value maps for ProposalStatus.
var (
	ProposalStatus_name = map[int32]string{
		0: "PROPOSAL_STATUS_UNSPECIFIED",
		1: "PROPOSAL_STATUS_DEPOSIT_PERIOD",
		2: "PROPOSAL_STATUS_VOTING_PERIOD",
		3: "PROPOSAL_STATUS_PASSED",
		4: "PROPOSAL_STATUS_REJECTED",
		5: "PROPOSAL_STATUS_FAILED",
	}
	ProposalStatus_value = map[string]int32{
		"PROPOSAL_STATUS_UNSPECIFIED":    0,
		"PROPOSAL_STATUS_DEPOSIT_PERIOD": 1,
		"PROPOSAL_STATUS_VOTING_PERIOD":  2,
		"PROPOSAL_STATUS_PASSED":         3,
		"PROPOSAL_STATUS_REJECTED":       4,
		"PROPOSAL_STATUS_FAILED":         5,
	}
)

func (x ProposalStatus) Enum() *ProposalStatus {
	p := new(ProposalStatus)
	*p = x
	return p
}

func (x ProposalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProposalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_queryevent_queryevent_proto_enumTypes[1].Descriptor()
}

func (ProposalStatus) Type() protoreflect.EnumType {
	return &file_queryevent_queryevent_proto_enumTypes[1]
}

func (x ProposalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProposalStatus.Descriptor instead.
func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{1}
}

type ContractProposalStatus int32

const (
	ContractProposalStatus_OPEN             ContractProposalStatus = 0
	ContractProposalStatus_REJECTED         ContractProposalStatus = 1
	ContractProposalStatus_PASSED           ContractProposalStatus = 2
	ContractProposalStatus_EXECUTED         ContractProposalStatus = 3
	ContractProposalStatus_CLOSED           ContractProposalStatus = 4
	ContractProposalStatus_EXECUTION_FAILED ContractProposalStatus = 5
)

// Enum value maps for ContractProposalStatus.
var (
	ContractProposalStatus_name = map[int32]string{
		0: "OPEN",
		1: "REJECTED",
		2: "PASSED",
		3: "EXECUTED",
		4: "CLOSED",
		5: "EXECUTION_FAILED",
	}
	ContractProposalStatus_value = map[string]int32{
		"OPEN":             0,
		"REJECTED":         1,
		"PASSED":           2,
		"EXECUTED":         3,
		"CLOSED":           4,
		"EXECUTION_FAILED": 5,
	}
)

func (x ContractProposalStatus) Enum() *ContractProposalStatus {
	p := new(ContractProposalStatus)
	*p = x
	return p
}

func (x ContractProposalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractProposalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_queryevent_queryevent_proto_enumTypes[2].Descriptor()
}

func (ContractProposalStatus) Type() protoreflect.EnumType {
	return &file_queryevent_queryevent_proto_enumTypes[2]
}

func (x ContractProposalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractProposalStatus.Descriptor instead.
func (ContractProposalStatus) EnumDescriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{2}
}

type GovernanceProposalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId      uint64                 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProposalType    ProposalType           `protobuf:"varint,4,opt,name=proposal_type,json=proposalType,proto3,enum=starscope.queryevent.ProposalType" json:"proposal_type,omitempty"`
	ProposalStatus  ProposalStatus         `protobuf:"varint,5,opt,name=proposal_status,json=proposalStatus,proto3,enum=starscope.queryevent.ProposalStatus" json:"proposal_status,omitempty"`
	VotingStartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=voting_start_time,json=votingStartTime,proto3" json:"voting_start_time,omitempty"`
	VotingEndTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=voting_end_time,json=votingEndTime,proto3" json:"voting_end_time,omitempty"`
}

func (x *GovernanceProposalEvent) Reset() {
	*x = GovernanceProposalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryevent_queryevent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceProposalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceProposalEvent) ProtoMessage() {}

func (x *GovernanceProposalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_queryevent_queryevent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceProposalEvent.ProtoReflect.Descriptor instead.
func (*GovernanceProposalEvent) Descriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{0}
}

func (x *GovernanceProposalEvent) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *GovernanceProposalEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GovernanceProposalEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GovernanceProposalEvent) GetProposalType() ProposalType {
	if x != nil {
		return x.ProposalType
	}
	return ProposalType_PROPOSAL_TYPE_UNSPECIFIED
}

func (x *GovernanceProposalEvent) GetProposalStatus() ProposalStatus {
	if x != nil {
		return x.ProposalStatus
	}
	return ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED
}

func (x *GovernanceProposalEvent) GetVotingStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingStartTime
	}
	return nil
}

func (x *GovernanceProposalEvent) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

type ContractGovernanceProposalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId      uint64                 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProposalType    ProposalType           `protobuf:"varint,4,opt,name=proposal_type,json=proposalType,proto3,enum=starscope.queryevent.ProposalType" json:"proposal_type,omitempty"`
	ProposalStatus  ContractProposalStatus `protobuf:"varint,5,opt,name=proposal_status,json=proposalStatus,proto3,enum=starscope.queryevent.ContractProposalStatus" json:"proposal_status,omitempty"`
	FirstSeenTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`
	VotingEndTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=voting_end_time,json=votingEndTime,proto3" json:"voting_end_time,omitempty"`
	ContractAddress string                 `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *ContractGovernanceProposalEvent) Reset() {
	*x = ContractGovernanceProposalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryevent_queryevent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractGovernanceProposalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractGovernanceProposalEvent) ProtoMessage() {}

func (x *ContractGovernanceProposalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_queryevent_queryevent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractGovernanceProposalEvent.ProtoReflect.Descriptor instead.
func (*ContractGovernanceProposalEvent) Descriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{1}
}

func (x *ContractGovernanceProposalEvent) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *ContractGovernanceProposalEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ContractGovernanceProposalEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContractGovernanceProposalEvent) GetProposalType() ProposalType {
	if x != nil {
		return x.ProposalType
	}
	return ProposalType_PROPOSAL_TYPE_UNSPECIFIED
}

func (x *ContractGovernanceProposalEvent) GetProposalStatus() ContractProposalStatus {
	if x != nil {
		return x.ProposalStatus
	}
	return ContractProposalStatus_OPEN
}

func (x *ContractGovernanceProposalEvent) GetFirstSeenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeenTime
	}
	return nil
}

func (x *ContractGovernanceProposalEvent) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

func (x *ContractGovernanceProposalEvent) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type QueryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId    uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NotifyTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*QueryEvent_GovernanceProposal
	//	*QueryEvent_ContractGovernanceProposal
	Event isQueryEvent_Event `protobuf_oneof:"event"`
}

func (x *QueryEvent) Reset() {
	*x = QueryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queryevent_queryevent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEvent) ProtoMessage() {}

func (x *QueryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_queryevent_queryevent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEvent.ProtoReflect.Descriptor instead.
func (*QueryEvent) Descriptor() ([]byte, []int) {
	return file_queryevent_queryevent_proto_rawDescGZIP(), []int{2}
}

func (x *QueryEvent) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *QueryEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *QueryEvent) GetNotifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NotifyTime
	}
	return nil
}

func (m *QueryEvent) GetEvent() isQueryEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *QueryEvent) GetGovernanceProposal() *GovernanceProposalEvent {
	if x, ok := x.GetEvent().(*QueryEvent_GovernanceProposal); ok {
		return x.GovernanceProposal
	}
	return nil
}

func (x *QueryEvent) GetContractGovernanceProposal() *ContractGovernanceProposalEvent {
	if x, ok := x.GetEvent().(*QueryEvent_ContractGovernanceProposal); ok {
		return x.ContractGovernanceProposal
	}
	return nil
}

type isQueryEvent_Event interface {
	isQueryEvent_Event()
}

type QueryEvent_GovernanceProposal struct {
	GovernanceProposal *GovernanceProposalEvent `protobuf:"bytes,4,opt,name=governance_proposal,json=governanceProposal,proto3,oneof"`
}

type QueryEvent_ContractGovernanceProposal struct {
	ContractGovernanceProposal *ContractGovernanceProposalEvent `protobuf:"bytes,5,opt,name=contract_governance_proposal,json=contractGovernanceProposal,proto3,oneof"`
}

func (*QueryEvent_GovernanceProposal) isQueryEvent_Event() {}

func (*QueryEvent_ContractGovernanceProposal) isQueryEvent_Event() {}

var File_queryevent_queryevent_proto protoreflect.FileDescriptor

var file_queryevent_queryevent_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x03, 0x0a, 0x17, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x03,
	0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x84, 0x03,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60,
	0x0a, 0x13, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x79, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2a, 0xd3, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x2a, 0xce, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x6c, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0xc9, 0x01, 0x0a, 0x18, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6d, 0x69, 0x2d, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x53, 0x51, 0x58, 0xaa, 0x02, 0x14, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0xca, 0x02, 0x14, 0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x20, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x3a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_queryevent_queryevent_proto_rawDescOnce sync.Once
	file_queryevent_queryevent_proto_rawDescData = file_queryevent_queryevent_proto_rawDesc
)

func file_queryevent_queryevent_proto_rawDescGZIP() []byte {
	file_queryevent_queryevent_proto_rawDescOnce.Do(func() {
		file_queryevent_queryevent_proto_rawDescData = protoimpl.X.CompressGZIP(file_queryevent_queryevent_proto_rawDescData)
	})
	return file_queryevent_queryevent_proto_rawDescData
}

var file_queryevent_queryevent_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_queryevent_queryevent_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_queryevent_queryevent_proto_goTypes = []interface{}{
	(ProposalType)(0),                       // 0: starscope.queryevent.ProposalType
	(ProposalStatus)(0),                     // 1: starscope.queryevent.ProposalStatus
	(ContractProposalStatus)(0),             // 2: starscope.queryevent.ContractProposalStatus
	(*GovernanceProposalEvent)(nil),         // 3: starscope.queryevent.GovernanceProposalEvent
	(*ContractGovernanceProposalEvent)(nil), // 4: starscope.queryevent.ContractGovernanceProposalEvent
	(*QueryEvent)(nil),                      // 5: starscope.queryevent.QueryEvent
	(*timestamppb.Timestamp)(nil),           // 6: google.protobuf.Timestamp
}
var file_queryevent_queryevent_proto_depIdxs = []int32{
	0,  // 0: starscope.queryevent.GovernanceProposalEvent.proposal_type:type_name -> starscope.queryevent.ProposalType
	1,  // 1: starscope.queryevent.GovernanceProposalEvent.proposal_status:type_name -> starscope.queryevent.ProposalStatus
	6,  // 2: starscope.queryevent.GovernanceProposalEvent.voting_start_time:type_name -> google.protobuf.Timestamp
	6,  // 3: starscope.queryevent.GovernanceProposalEvent.voting_end_time:type_name -> google.protobuf.Timestamp
	0,  // 4: starscope.queryevent.ContractGovernanceProposalEvent.proposal_type:type_name -> starscope.queryevent.ProposalType
	2,  // 5: starscope.queryevent.ContractGovernanceProposalEvent.proposal_status:type_name -> starscope.queryevent.ContractProposalStatus
	6,  // 6: starscope.queryevent.ContractGovernanceProposalEvent.first_seen_time:type_name -> google.protobuf.Timestamp
	6,  // 7: starscope.queryevent.ContractGovernanceProposalEvent.voting_end_time:type_name -> google.protobuf.Timestamp
	6,  // 8: starscope.queryevent.QueryEvent.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 9: starscope.queryevent.QueryEvent.notify_time:type_name -> google.protobuf.Timestamp
	3,  // 10: starscope.queryevent.QueryEvent.governance_proposal:type_name -> starscope.queryevent.GovernanceProposalEvent
	4,  // 11: starscope.queryevent.QueryEvent.contract_governance_proposal:type_name -> starscope.queryevent.ContractGovernanceProposalEvent
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_queryevent_queryevent_proto_init() }
func file_queryevent_queryevent_proto_init() {
	if File_queryevent_queryevent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_queryevent_queryevent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceProposalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queryevent_queryevent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractGovernanceProposalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queryevent_queryevent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_queryevent_queryevent_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*QueryEvent_GovernanceProposal)(nil),
		(*QueryEvent_ContractGovernanceProposal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_queryevent_queryevent_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_queryevent_queryevent_proto_goTypes,
		DependencyIndexes: file_queryevent_queryevent_proto_depIdxs,
		EnumInfos:         file_queryevent_queryevent_proto_enumTypes,
		MessageInfos:      file_queryevent_queryevent_proto_msgTypes,
	}.Build()
	File_queryevent_queryevent_proto = out.File
	file_queryevent_queryevent_proto_rawDesc = nil
	file_queryevent_queryevent_proto_goTypes = nil
	file_queryevent_queryevent_proto_depIdxs = nil
}
