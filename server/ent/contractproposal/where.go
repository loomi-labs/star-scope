// Code generated by ent, DO NOT EDIT.

package contractproposal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldUpdateTime, v))
}

// ProposalID applies equality check predicate on the "proposal_id" field. It's identical to ProposalIDEQ.
func ProposalID(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldProposalID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldDescription, v))
}

// FirstSeenTime applies equality check predicate on the "first_seen_time" field. It's identical to FirstSeenTimeEQ.
func FirstSeenTime(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldFirstSeenTime, v))
}

// VotingEndTime applies equality check predicate on the "voting_end_time" field. It's identical to VotingEndTimeEQ.
func VotingEndTime(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldVotingEndTime, v))
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldContractAddress, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldUpdateTime, v))
}

// ProposalIDEQ applies the EQ predicate on the "proposal_id" field.
func ProposalIDEQ(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldProposalID, v))
}

// ProposalIDNEQ applies the NEQ predicate on the "proposal_id" field.
func ProposalIDNEQ(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldProposalID, v))
}

// ProposalIDIn applies the In predicate on the "proposal_id" field.
func ProposalIDIn(vs ...uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldProposalID, vs...))
}

// ProposalIDNotIn applies the NotIn predicate on the "proposal_id" field.
func ProposalIDNotIn(vs ...uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldProposalID, vs...))
}

// ProposalIDGT applies the GT predicate on the "proposal_id" field.
func ProposalIDGT(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldProposalID, v))
}

// ProposalIDGTE applies the GTE predicate on the "proposal_id" field.
func ProposalIDGTE(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldProposalID, v))
}

// ProposalIDLT applies the LT predicate on the "proposal_id" field.
func ProposalIDLT(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldProposalID, v))
}

// ProposalIDLTE applies the LTE predicate on the "proposal_id" field.
func ProposalIDLTE(v uint64) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldProposalID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContainsFold(FieldDescription, v))
}

// FirstSeenTimeEQ applies the EQ predicate on the "first_seen_time" field.
func FirstSeenTimeEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldFirstSeenTime, v))
}

// FirstSeenTimeNEQ applies the NEQ predicate on the "first_seen_time" field.
func FirstSeenTimeNEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldFirstSeenTime, v))
}

// FirstSeenTimeIn applies the In predicate on the "first_seen_time" field.
func FirstSeenTimeIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldFirstSeenTime, vs...))
}

// FirstSeenTimeNotIn applies the NotIn predicate on the "first_seen_time" field.
func FirstSeenTimeNotIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldFirstSeenTime, vs...))
}

// FirstSeenTimeGT applies the GT predicate on the "first_seen_time" field.
func FirstSeenTimeGT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldFirstSeenTime, v))
}

// FirstSeenTimeGTE applies the GTE predicate on the "first_seen_time" field.
func FirstSeenTimeGTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldFirstSeenTime, v))
}

// FirstSeenTimeLT applies the LT predicate on the "first_seen_time" field.
func FirstSeenTimeLT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldFirstSeenTime, v))
}

// FirstSeenTimeLTE applies the LTE predicate on the "first_seen_time" field.
func FirstSeenTimeLTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldFirstSeenTime, v))
}

// VotingEndTimeEQ applies the EQ predicate on the "voting_end_time" field.
func VotingEndTimeEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldVotingEndTime, v))
}

// VotingEndTimeNEQ applies the NEQ predicate on the "voting_end_time" field.
func VotingEndTimeNEQ(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldVotingEndTime, v))
}

// VotingEndTimeIn applies the In predicate on the "voting_end_time" field.
func VotingEndTimeIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldVotingEndTime, vs...))
}

// VotingEndTimeNotIn applies the NotIn predicate on the "voting_end_time" field.
func VotingEndTimeNotIn(vs ...time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldVotingEndTime, vs...))
}

// VotingEndTimeGT applies the GT predicate on the "voting_end_time" field.
func VotingEndTimeGT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldVotingEndTime, v))
}

// VotingEndTimeGTE applies the GTE predicate on the "voting_end_time" field.
func VotingEndTimeGTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldVotingEndTime, v))
}

// VotingEndTimeLT applies the LT predicate on the "voting_end_time" field.
func VotingEndTimeLT(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldVotingEndTime, v))
}

// VotingEndTimeLTE applies the LTE predicate on the "voting_end_time" field.
func VotingEndTimeLTE(v time.Time) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldVotingEndTime, v))
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldContractAddress, v))
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldContractAddress, v))
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldContractAddress, vs...))
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldContractAddress, vs...))
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGT(FieldContractAddress, v))
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldGTE(FieldContractAddress, v))
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLT(FieldContractAddress, v))
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldLTE(FieldContractAddress, v))
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContains(FieldContractAddress, v))
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasPrefix(FieldContractAddress, v))
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldHasSuffix(FieldContractAddress, v))
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEqualFold(FieldContractAddress, v))
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldContainsFold(FieldContractAddress, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ContractProposal {
	return predicate.ContractProposal(sql.FieldNotIn(FieldStatus, vs...))
}

// HasChain applies the HasEdge predicate on the "chain" edge.
func HasChain() predicate.ContractProposal {
	return predicate.ContractProposal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChainTable, ChainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChainWith applies the HasEdge predicate on the "chain" edge with a given conditions (other predicates).
func HasChainWith(preds ...predicate.Chain) predicate.ContractProposal {
	return predicate.ContractProposal(func(s *sql.Selector) {
		step := newChainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContractProposal) predicate.ContractProposal {
	return predicate.ContractProposal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContractProposal) predicate.ContractProposal {
	return predicate.ContractProposal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContractProposal) predicate.ContractProposal {
	return predicate.ContractProposal(func(s *sql.Selector) {
		p(s.Not())
	})
}
