// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/state"
)

// StateUpdate is the builder for updating State entities.
type StateUpdate struct {
	config
	hooks    []Hook
	mutation *StateMutation
}

// Where appends a list predicates to the StateUpdate builder.
func (su *StateUpdate) Where(ps ...predicate.State) *StateUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *StateUpdate) SetUpdateTime(t time.Time) *StateUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetEntity sets the "entity" field.
func (su *StateUpdate) SetEntity(s state.Entity) *StateUpdate {
	su.mutation.SetEntity(s)
	return su
}

// SetLastEventTime sets the "last_event_time" field.
func (su *StateUpdate) SetLastEventTime(t time.Time) *StateUpdate {
	su.mutation.SetLastEventTime(t)
	return su
}

// SetNillableLastEventTime sets the "last_event_time" field if the given value is not nil.
func (su *StateUpdate) SetNillableLastEventTime(t *time.Time) *StateUpdate {
	if t != nil {
		su.SetLastEventTime(*t)
	}
	return su
}

// ClearLastEventTime clears the value of the "last_event_time" field.
func (su *StateUpdate) ClearLastEventTime() *StateUpdate {
	su.mutation.ClearLastEventTime()
	return su
}

// Mutation returns the StateMutation object of the builder.
func (su *StateUpdate) Mutation() *StateMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StateUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StateUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StateUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StateUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StateUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := state.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StateUpdate) check() error {
	if v, ok := su.mutation.Entity(); ok {
		if err := state.EntityValidator(v); err != nil {
			return &ValidationError{Name: "entity", err: fmt.Errorf(`ent: validator failed for field "State.entity": %w`, err)}
		}
	}
	return nil
}

func (su *StateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(state.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Entity(); ok {
		_spec.SetField(state.FieldEntity, field.TypeEnum, value)
	}
	if value, ok := su.mutation.LastEventTime(); ok {
		_spec.SetField(state.FieldLastEventTime, field.TypeTime, value)
	}
	if su.mutation.LastEventTimeCleared() {
		_spec.ClearField(state.FieldLastEventTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StateUpdateOne is the builder for updating a single State entity.
type StateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StateMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *StateUpdateOne) SetUpdateTime(t time.Time) *StateUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetEntity sets the "entity" field.
func (suo *StateUpdateOne) SetEntity(s state.Entity) *StateUpdateOne {
	suo.mutation.SetEntity(s)
	return suo
}

// SetLastEventTime sets the "last_event_time" field.
func (suo *StateUpdateOne) SetLastEventTime(t time.Time) *StateUpdateOne {
	suo.mutation.SetLastEventTime(t)
	return suo
}

// SetNillableLastEventTime sets the "last_event_time" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableLastEventTime(t *time.Time) *StateUpdateOne {
	if t != nil {
		suo.SetLastEventTime(*t)
	}
	return suo
}

// ClearLastEventTime clears the value of the "last_event_time" field.
func (suo *StateUpdateOne) ClearLastEventTime() *StateUpdateOne {
	suo.mutation.ClearLastEventTime()
	return suo
}

// Mutation returns the StateMutation object of the builder.
func (suo *StateUpdateOne) Mutation() *StateMutation {
	return suo.mutation
}

// Where appends a list predicates to the StateUpdate builder.
func (suo *StateUpdateOne) Where(ps ...predicate.State) *StateUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StateUpdateOne) Select(field string, fields ...string) *StateUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated State entity.
func (suo *StateUpdateOne) Save(ctx context.Context) (*State, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StateUpdateOne) SaveX(ctx context.Context) *State {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StateUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StateUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StateUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := state.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StateUpdateOne) check() error {
	if v, ok := suo.mutation.Entity(); ok {
		if err := state.EntityValidator(v); err != nil {
			return &ValidationError{Name: "entity", err: fmt.Errorf(`ent: validator failed for field "State.entity": %w`, err)}
		}
	}
	return nil
}

func (suo *StateUpdateOne) sqlSave(ctx context.Context) (_node *State, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "State.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, state.FieldID)
		for _, f := range fields {
			if !state.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != state.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(state.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Entity(); ok {
		_spec.SetField(state.FieldEntity, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.LastEventTime(); ok {
		_spec.SetField(state.FieldLastEventTime, field.TypeTime, value)
	}
	if suo.mutation.LastEventTimeCleared() {
		_spec.ClearField(state.FieldLastEventTime, field.TypeTime)
	}
	_node = &State{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
