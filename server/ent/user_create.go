// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/user"
	"github.com/loomi-labs/star-scope/ent/usersetup"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(t time.Time) *UserCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UserCreate) SetUpdateTime(t time.Time) *UserCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(u user.Role) *UserCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(u *user.Role) *UserCreate {
	if u != nil {
		uc.SetRole(*u)
	}
	return uc
}

// SetTelegramUserID sets the "telegram_user_id" field.
func (uc *UserCreate) SetTelegramUserID(i int64) *UserCreate {
	uc.mutation.SetTelegramUserID(i)
	return uc
}

// SetNillableTelegramUserID sets the "telegram_user_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableTelegramUserID(i *int64) *UserCreate {
	if i != nil {
		uc.SetTelegramUserID(*i)
	}
	return uc
}

// SetTelegramUsername sets the "telegram_username" field.
func (uc *UserCreate) SetTelegramUsername(s string) *UserCreate {
	uc.mutation.SetTelegramUsername(s)
	return uc
}

// SetNillableTelegramUsername sets the "telegram_username" field if the given value is not nil.
func (uc *UserCreate) SetNillableTelegramUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetTelegramUsername(*s)
	}
	return uc
}

// SetDiscordUserID sets the "discord_user_id" field.
func (uc *UserCreate) SetDiscordUserID(i int64) *UserCreate {
	uc.mutation.SetDiscordUserID(i)
	return uc
}

// SetNillableDiscordUserID sets the "discord_user_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableDiscordUserID(i *int64) *UserCreate {
	if i != nil {
		uc.SetDiscordUserID(*i)
	}
	return uc
}

// SetDiscordUsername sets the "discord_username" field.
func (uc *UserCreate) SetDiscordUsername(s string) *UserCreate {
	uc.mutation.SetDiscordUsername(s)
	return uc
}

// SetNillableDiscordUsername sets the "discord_username" field if the given value is not nil.
func (uc *UserCreate) SetNillableDiscordUsername(s *string) *UserCreate {
	if s != nil {
		uc.SetDiscordUsername(*s)
	}
	return uc
}

// SetWalletAddress sets the "wallet_address" field.
func (uc *UserCreate) SetWalletAddress(s string) *UserCreate {
	uc.mutation.SetWalletAddress(s)
	return uc
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (uc *UserCreate) SetNillableWalletAddress(s *string) *UserCreate {
	if s != nil {
		uc.SetWalletAddress(*s)
	}
	return uc
}

// SetLastLoginTime sets the "last_login_time" field.
func (uc *UserCreate) SetLastLoginTime(t time.Time) *UserCreate {
	uc.mutation.SetLastLoginTime(t)
	return uc
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLoginTime(*t)
	}
	return uc
}

// SetIsSetupComplete sets the "is_setup_complete" field.
func (uc *UserCreate) SetIsSetupComplete(b bool) *UserCreate {
	uc.mutation.SetIsSetupComplete(b)
	return uc
}

// SetNillableIsSetupComplete sets the "is_setup_complete" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsSetupComplete(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsSetupComplete(*b)
	}
	return uc
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (uc *UserCreate) AddEventListenerIDs(ids ...int) *UserCreate {
	uc.mutation.AddEventListenerIDs(ids...)
	return uc
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (uc *UserCreate) AddEventListeners(e ...*EventListener) *UserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEventListenerIDs(ids...)
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (uc *UserCreate) AddCommChannelIDs(ids ...int) *UserCreate {
	uc.mutation.AddCommChannelIDs(ids...)
	return uc
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (uc *UserCreate) AddCommChannels(c ...*CommChannel) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCommChannelIDs(ids...)
}

// AddSetupIDs adds the "setup" edge to the UserSetup entity by IDs.
func (uc *UserCreate) AddSetupIDs(ids ...int) *UserCreate {
	uc.mutation.AddSetupIDs(ids...)
	return uc
}

// AddSetup adds the "setup" edges to the UserSetup entity.
func (uc *UserCreate) AddSetup(u ...*UserSetup) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddSetupIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreateTime(); !ok {
		v := user.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		v := user.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.IsSetupComplete(); !ok {
		v := user.DefaultIsSetupComplete
		uc.mutation.SetIsSetupComplete(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "User.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "User.update_time"`)}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsSetupComplete(); !ok {
		return &ValidationError{Name: "is_setup_complete", err: errors.New(`ent: missing required field "User.is_setup_complete"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.TelegramUserID(); ok {
		_spec.SetField(user.FieldTelegramUserID, field.TypeInt64, value)
		_node.TelegramUserID = value
	}
	if value, ok := uc.mutation.TelegramUsername(); ok {
		_spec.SetField(user.FieldTelegramUsername, field.TypeString, value)
		_node.TelegramUsername = value
	}
	if value, ok := uc.mutation.DiscordUserID(); ok {
		_spec.SetField(user.FieldDiscordUserID, field.TypeInt64, value)
		_node.DiscordUserID = value
	}
	if value, ok := uc.mutation.DiscordUsername(); ok {
		_spec.SetField(user.FieldDiscordUsername, field.TypeString, value)
		_node.DiscordUsername = value
	}
	if value, ok := uc.mutation.WalletAddress(); ok {
		_spec.SetField(user.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := uc.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
		_node.LastLoginTime = &value
	}
	if value, ok := uc.mutation.IsSetupComplete(); ok {
		_spec.SetField(user.FieldIsSetupComplete, field.TypeBool, value)
		_node.IsSetupComplete = value
	}
	if nodes := uc.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SetupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SetupTable,
			Columns: []string{user.SetupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
