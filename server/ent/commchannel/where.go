// Code generated by ent, DO NOT EDIT.

package commchannel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldName, v))
}

// TelegramChatID applies equality check predicate on the "telegram_chat_id" field. It's identical to TelegramChatIDEQ.
func TelegramChatID(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldTelegramChatID, v))
}

// DiscordChannelID applies equality check predicate on the "discord_channel_id" field. It's identical to DiscordChannelIDEQ.
func DiscordChannelID(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldDiscordChannelID, v))
}

// IsGroup applies equality check predicate on the "is_group" field. It's identical to IsGroupEQ.
func IsGroup(v bool) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldIsGroup, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldType, vs...))
}

// TelegramChatIDEQ applies the EQ predicate on the "telegram_chat_id" field.
func TelegramChatIDEQ(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldTelegramChatID, v))
}

// TelegramChatIDNEQ applies the NEQ predicate on the "telegram_chat_id" field.
func TelegramChatIDNEQ(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldTelegramChatID, v))
}

// TelegramChatIDIn applies the In predicate on the "telegram_chat_id" field.
func TelegramChatIDIn(vs ...int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldTelegramChatID, vs...))
}

// TelegramChatIDNotIn applies the NotIn predicate on the "telegram_chat_id" field.
func TelegramChatIDNotIn(vs ...int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldTelegramChatID, vs...))
}

// TelegramChatIDGT applies the GT predicate on the "telegram_chat_id" field.
func TelegramChatIDGT(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldTelegramChatID, v))
}

// TelegramChatIDGTE applies the GTE predicate on the "telegram_chat_id" field.
func TelegramChatIDGTE(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldTelegramChatID, v))
}

// TelegramChatIDLT applies the LT predicate on the "telegram_chat_id" field.
func TelegramChatIDLT(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldTelegramChatID, v))
}

// TelegramChatIDLTE applies the LTE predicate on the "telegram_chat_id" field.
func TelegramChatIDLTE(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldTelegramChatID, v))
}

// DiscordChannelIDEQ applies the EQ predicate on the "discord_channel_id" field.
func DiscordChannelIDEQ(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldDiscordChannelID, v))
}

// DiscordChannelIDNEQ applies the NEQ predicate on the "discord_channel_id" field.
func DiscordChannelIDNEQ(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldDiscordChannelID, v))
}

// DiscordChannelIDIn applies the In predicate on the "discord_channel_id" field.
func DiscordChannelIDIn(vs ...int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldIn(FieldDiscordChannelID, vs...))
}

// DiscordChannelIDNotIn applies the NotIn predicate on the "discord_channel_id" field.
func DiscordChannelIDNotIn(vs ...int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNotIn(FieldDiscordChannelID, vs...))
}

// DiscordChannelIDGT applies the GT predicate on the "discord_channel_id" field.
func DiscordChannelIDGT(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGT(FieldDiscordChannelID, v))
}

// DiscordChannelIDGTE applies the GTE predicate on the "discord_channel_id" field.
func DiscordChannelIDGTE(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldGTE(FieldDiscordChannelID, v))
}

// DiscordChannelIDLT applies the LT predicate on the "discord_channel_id" field.
func DiscordChannelIDLT(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLT(FieldDiscordChannelID, v))
}

// DiscordChannelIDLTE applies the LTE predicate on the "discord_channel_id" field.
func DiscordChannelIDLTE(v int64) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldLTE(FieldDiscordChannelID, v))
}

// IsGroupEQ applies the EQ predicate on the "is_group" field.
func IsGroupEQ(v bool) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldEQ(FieldIsGroup, v))
}

// IsGroupNEQ applies the NEQ predicate on the "is_group" field.
func IsGroupNEQ(v bool) predicate.CommChannel {
	return predicate.CommChannel(sql.FieldNEQ(FieldIsGroup, v))
}

// HasEventListeners applies the HasEdge predicate on the "event_listeners" edge.
func HasEventListeners() predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventListenersTable, EventListenersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventListenersWith applies the HasEdge predicate on the "event_listeners" edge with a given conditions (other predicates).
func HasEventListenersWith(preds ...predicate.EventListener) predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		step := newEventListenersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommChannel) predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommChannel) predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommChannel) predicate.CommChannel {
	return predicate.CommChannel(func(s *sql.Selector) {
		p(s.Not())
	})
}
