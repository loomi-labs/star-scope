// Code generated by ent, DO NOT EDIT.

package commchannel

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the commchannel type in the database.
	Label = "comm_channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTelegramChatID holds the string denoting the telegram_chat_id field in the database.
	FieldTelegramChatID = "telegram_chat_id"
	// FieldDiscordChannelID holds the string denoting the discord_channel_id field in the database.
	FieldDiscordChannelID = "discord_channel_id"
	// FieldIsGroup holds the string denoting the is_group field in the database.
	FieldIsGroup = "is_group"
	// EdgeEventListeners holds the string denoting the event_listeners edge name in mutations.
	EdgeEventListeners = "event_listeners"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the commchannel in the database.
	Table = "comm_channels"
	// EventListenersTable is the table that holds the event_listeners relation/edge. The primary key declared below.
	EventListenersTable = "comm_channel_event_listeners"
	// EventListenersInverseTable is the table name for the EventListener entity.
	// It exists in this package in order to avoid circular dependency with the "eventlistener" package.
	EventListenersInverseTable = "event_listeners"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_comm_channels"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for commchannel fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldType,
	FieldTelegramChatID,
	FieldDiscordChannelID,
	FieldIsGroup,
}

var (
	// EventListenersPrimaryKey and EventListenersColumn2 are the table columns denoting the
	// primary key for the event_listeners relation (M2M).
	EventListenersPrimaryKey = []string{"comm_channel_id", "event_listener_id"}
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "comm_channel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsGroup holds the default value on creation for the "is_group" field.
	DefaultIsGroup bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWebpush  Type = "webpush"
	TypeTelegram Type = "telegram"
	TypeDiscord  Type = "discord"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWebpush, TypeTelegram, TypeDiscord:
		return nil
	default:
		return fmt.Errorf("commchannel: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the CommChannel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTelegramChatID orders the results by the telegram_chat_id field.
func ByTelegramChatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelegramChatID, opts...).ToFunc()
}

// ByDiscordChannelID orders the results by the discord_channel_id field.
func ByDiscordChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordChannelID, opts...).ToFunc()
}

// ByIsGroup orders the results by the is_group field.
func ByIsGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGroup, opts...).ToFunc()
}

// ByEventListenersCount orders the results by event_listeners count.
func ByEventListenersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventListenersStep(), opts...)
	}
}

// ByEventListeners orders the results by event_listeners terms.
func ByEventListeners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventListenersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventListenersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventListenersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventListenersTable, EventListenersPrimaryKey...),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
