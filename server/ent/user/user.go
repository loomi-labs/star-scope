// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldTelegramUserID holds the string denoting the telegram_user_id field in the database.
	FieldTelegramUserID = "telegram_user_id"
	// FieldTelegramUsername holds the string denoting the telegram_username field in the database.
	FieldTelegramUsername = "telegram_username"
	// FieldDiscordUserID holds the string denoting the discord_user_id field in the database.
	FieldDiscordUserID = "discord_user_id"
	// FieldDiscordUsername holds the string denoting the discord_username field in the database.
	FieldDiscordUsername = "discord_username"
	// FieldWalletAddress holds the string denoting the wallet_address field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldLastLoginTime holds the string denoting the last_login_time field in the database.
	FieldLastLoginTime = "last_login_time"
	// FieldIsSetupComplete holds the string denoting the is_setup_complete field in the database.
	FieldIsSetupComplete = "is_setup_complete"
	// EdgeEventListeners holds the string denoting the event_listeners edge name in mutations.
	EdgeEventListeners = "event_listeners"
	// EdgeCommChannels holds the string denoting the comm_channels edge name in mutations.
	EdgeCommChannels = "comm_channels"
	// EdgeSetup holds the string denoting the setup edge name in mutations.
	EdgeSetup = "setup"
	// Table holds the table name of the user in the database.
	Table = "users"
	// EventListenersTable is the table that holds the event_listeners relation/edge. The primary key declared below.
	EventListenersTable = "user_event_listeners"
	// EventListenersInverseTable is the table name for the EventListener entity.
	// It exists in this package in order to avoid circular dependency with the "eventlistener" package.
	EventListenersInverseTable = "event_listeners"
	// CommChannelsTable is the table that holds the comm_channels relation/edge. The primary key declared below.
	CommChannelsTable = "user_comm_channels"
	// CommChannelsInverseTable is the table name for the CommChannel entity.
	// It exists in this package in order to avoid circular dependency with the "commchannel" package.
	CommChannelsInverseTable = "comm_channels"
	// SetupTable is the table that holds the setup relation/edge.
	SetupTable = "user_setups"
	// SetupInverseTable is the table name for the UserSetup entity.
	// It exists in this package in order to avoid circular dependency with the "usersetup" package.
	SetupInverseTable = "user_setups"
	// SetupColumn is the table column denoting the setup relation/edge.
	SetupColumn = "user_setup"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRole,
	FieldTelegramUserID,
	FieldTelegramUsername,
	FieldDiscordUserID,
	FieldDiscordUsername,
	FieldWalletAddress,
	FieldLastLoginTime,
	FieldIsSetupComplete,
}

var (
	// EventListenersPrimaryKey and EventListenersColumn2 are the table columns denoting the
	// primary key for the event_listeners relation (M2M).
	EventListenersPrimaryKey = []string{"user_id", "event_listener_id"}
	// CommChannelsPrimaryKey and CommChannelsColumn2 are the table columns denoting the
	// primary key for the comm_channels relation (M2M).
	CommChannelsPrimaryKey = []string{"user_id", "comm_channel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsSetupComplete holds the default value on creation for the "is_setup_complete" field.
	DefaultIsSetupComplete bool
)

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByTelegramUserID orders the results by the telegram_user_id field.
func ByTelegramUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelegramUserID, opts...).ToFunc()
}

// ByTelegramUsername orders the results by the telegram_username field.
func ByTelegramUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelegramUsername, opts...).ToFunc()
}

// ByDiscordUserID orders the results by the discord_user_id field.
func ByDiscordUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordUserID, opts...).ToFunc()
}

// ByDiscordUsername orders the results by the discord_username field.
func ByDiscordUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscordUsername, opts...).ToFunc()
}

// ByWalletAddress orders the results by the wallet_address field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}

// ByLastLoginTime orders the results by the last_login_time field.
func ByLastLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginTime, opts...).ToFunc()
}

// ByIsSetupComplete orders the results by the is_setup_complete field.
func ByIsSetupComplete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSetupComplete, opts...).ToFunc()
}

// ByEventListenersCount orders the results by event_listeners count.
func ByEventListenersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventListenersStep(), opts...)
	}
}

// ByEventListeners orders the results by event_listeners terms.
func ByEventListeners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventListenersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommChannelsCount orders the results by comm_channels count.
func ByCommChannelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommChannelsStep(), opts...)
	}
}

// ByCommChannels orders the results by comm_channels terms.
func ByCommChannels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommChannelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySetupField orders the results by setup field.
func BySetupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSetupStep(), sql.OrderByField(field, opts...))
	}
}
func newEventListenersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventListenersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventListenersTable, EventListenersPrimaryKey...),
	)
}
func newCommChannelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommChannelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CommChannelsTable, CommChannelsPrimaryKey...),
	)
}
func newSetupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SetupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SetupTable, SetupColumn),
	)
}
