// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// TelegramUserID applies equality check predicate on the "telegram_user_id" field. It's identical to TelegramUserIDEQ.
func TelegramUserID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramUserID, v))
}

// TelegramUsername applies equality check predicate on the "telegram_username" field. It's identical to TelegramUsernameEQ.
func TelegramUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramUsername, v))
}

// DiscordUserID applies equality check predicate on the "discord_user_id" field. It's identical to DiscordUserIDEQ.
func DiscordUserID(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordUserID, v))
}

// DiscordUsername applies equality check predicate on the "discord_username" field. It's identical to DiscordUsernameEQ.
func DiscordUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordUsername, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWalletAddress, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// TelegramUserIDEQ applies the EQ predicate on the "telegram_user_id" field.
func TelegramUserIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramUserID, v))
}

// TelegramUserIDNEQ applies the NEQ predicate on the "telegram_user_id" field.
func TelegramUserIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTelegramUserID, v))
}

// TelegramUserIDIn applies the In predicate on the "telegram_user_id" field.
func TelegramUserIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldTelegramUserID, vs...))
}

// TelegramUserIDNotIn applies the NotIn predicate on the "telegram_user_id" field.
func TelegramUserIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTelegramUserID, vs...))
}

// TelegramUserIDGT applies the GT predicate on the "telegram_user_id" field.
func TelegramUserIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldTelegramUserID, v))
}

// TelegramUserIDGTE applies the GTE predicate on the "telegram_user_id" field.
func TelegramUserIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTelegramUserID, v))
}

// TelegramUserIDLT applies the LT predicate on the "telegram_user_id" field.
func TelegramUserIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldTelegramUserID, v))
}

// TelegramUserIDLTE applies the LTE predicate on the "telegram_user_id" field.
func TelegramUserIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTelegramUserID, v))
}

// TelegramUserIDIsNil applies the IsNil predicate on the "telegram_user_id" field.
func TelegramUserIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTelegramUserID))
}

// TelegramUserIDNotNil applies the NotNil predicate on the "telegram_user_id" field.
func TelegramUserIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTelegramUserID))
}

// TelegramUsernameEQ applies the EQ predicate on the "telegram_username" field.
func TelegramUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTelegramUsername, v))
}

// TelegramUsernameNEQ applies the NEQ predicate on the "telegram_username" field.
func TelegramUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTelegramUsername, v))
}

// TelegramUsernameIn applies the In predicate on the "telegram_username" field.
func TelegramUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTelegramUsername, vs...))
}

// TelegramUsernameNotIn applies the NotIn predicate on the "telegram_username" field.
func TelegramUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTelegramUsername, vs...))
}

// TelegramUsernameGT applies the GT predicate on the "telegram_username" field.
func TelegramUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTelegramUsername, v))
}

// TelegramUsernameGTE applies the GTE predicate on the "telegram_username" field.
func TelegramUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTelegramUsername, v))
}

// TelegramUsernameLT applies the LT predicate on the "telegram_username" field.
func TelegramUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTelegramUsername, v))
}

// TelegramUsernameLTE applies the LTE predicate on the "telegram_username" field.
func TelegramUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTelegramUsername, v))
}

// TelegramUsernameContains applies the Contains predicate on the "telegram_username" field.
func TelegramUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTelegramUsername, v))
}

// TelegramUsernameHasPrefix applies the HasPrefix predicate on the "telegram_username" field.
func TelegramUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTelegramUsername, v))
}

// TelegramUsernameHasSuffix applies the HasSuffix predicate on the "telegram_username" field.
func TelegramUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTelegramUsername, v))
}

// TelegramUsernameIsNil applies the IsNil predicate on the "telegram_username" field.
func TelegramUsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTelegramUsername))
}

// TelegramUsernameNotNil applies the NotNil predicate on the "telegram_username" field.
func TelegramUsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTelegramUsername))
}

// TelegramUsernameEqualFold applies the EqualFold predicate on the "telegram_username" field.
func TelegramUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTelegramUsername, v))
}

// TelegramUsernameContainsFold applies the ContainsFold predicate on the "telegram_username" field.
func TelegramUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTelegramUsername, v))
}

// DiscordUserIDEQ applies the EQ predicate on the "discord_user_id" field.
func DiscordUserIDEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordUserID, v))
}

// DiscordUserIDNEQ applies the NEQ predicate on the "discord_user_id" field.
func DiscordUserIDNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDiscordUserID, v))
}

// DiscordUserIDIn applies the In predicate on the "discord_user_id" field.
func DiscordUserIDIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldDiscordUserID, vs...))
}

// DiscordUserIDNotIn applies the NotIn predicate on the "discord_user_id" field.
func DiscordUserIDNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDiscordUserID, vs...))
}

// DiscordUserIDGT applies the GT predicate on the "discord_user_id" field.
func DiscordUserIDGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldDiscordUserID, v))
}

// DiscordUserIDGTE applies the GTE predicate on the "discord_user_id" field.
func DiscordUserIDGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDiscordUserID, v))
}

// DiscordUserIDLT applies the LT predicate on the "discord_user_id" field.
func DiscordUserIDLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldDiscordUserID, v))
}

// DiscordUserIDLTE applies the LTE predicate on the "discord_user_id" field.
func DiscordUserIDLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDiscordUserID, v))
}

// DiscordUserIDIsNil applies the IsNil predicate on the "discord_user_id" field.
func DiscordUserIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDiscordUserID))
}

// DiscordUserIDNotNil applies the NotNil predicate on the "discord_user_id" field.
func DiscordUserIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDiscordUserID))
}

// DiscordUsernameEQ applies the EQ predicate on the "discord_username" field.
func DiscordUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDiscordUsername, v))
}

// DiscordUsernameNEQ applies the NEQ predicate on the "discord_username" field.
func DiscordUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDiscordUsername, v))
}

// DiscordUsernameIn applies the In predicate on the "discord_username" field.
func DiscordUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDiscordUsername, vs...))
}

// DiscordUsernameNotIn applies the NotIn predicate on the "discord_username" field.
func DiscordUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDiscordUsername, vs...))
}

// DiscordUsernameGT applies the GT predicate on the "discord_username" field.
func DiscordUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDiscordUsername, v))
}

// DiscordUsernameGTE applies the GTE predicate on the "discord_username" field.
func DiscordUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDiscordUsername, v))
}

// DiscordUsernameLT applies the LT predicate on the "discord_username" field.
func DiscordUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDiscordUsername, v))
}

// DiscordUsernameLTE applies the LTE predicate on the "discord_username" field.
func DiscordUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDiscordUsername, v))
}

// DiscordUsernameContains applies the Contains predicate on the "discord_username" field.
func DiscordUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDiscordUsername, v))
}

// DiscordUsernameHasPrefix applies the HasPrefix predicate on the "discord_username" field.
func DiscordUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDiscordUsername, v))
}

// DiscordUsernameHasSuffix applies the HasSuffix predicate on the "discord_username" field.
func DiscordUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDiscordUsername, v))
}

// DiscordUsernameIsNil applies the IsNil predicate on the "discord_username" field.
func DiscordUsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDiscordUsername))
}

// DiscordUsernameNotNil applies the NotNil predicate on the "discord_username" field.
func DiscordUsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDiscordUsername))
}

// DiscordUsernameEqualFold applies the EqualFold predicate on the "discord_username" field.
func DiscordUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDiscordUsername, v))
}

// DiscordUsernameContainsFold applies the ContainsFold predicate on the "discord_username" field.
func DiscordUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDiscordUsername, v))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressIsNil applies the IsNil predicate on the "wallet_address" field.
func WalletAddressIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWalletAddress))
}

// WalletAddressNotNil applies the NotNil predicate on the "wallet_address" field.
func WalletAddressNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWalletAddress))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWalletAddress, v))
}

// HasEventListeners applies the HasEdge predicate on the "event_listeners" edge.
func HasEventListeners() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventListenersTable, EventListenersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventListenersWith applies the HasEdge predicate on the "event_listeners" edge with a given conditions (other predicates).
func HasEventListenersWith(preds ...predicate.EventListener) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEventListenersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommChannels applies the HasEdge predicate on the "comm_channels" edge.
func HasCommChannels() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CommChannelsTable, CommChannelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommChannelsWith applies the HasEdge predicate on the "comm_channels" edge with a given conditions (other predicates).
func HasCommChannelsWith(preds ...predicate.CommChannel) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCommChannelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
