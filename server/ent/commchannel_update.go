// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/user"
)

// CommChannelUpdate is the builder for updating CommChannel entities.
type CommChannelUpdate struct {
	config
	hooks    []Hook
	mutation *CommChannelMutation
}

// Where appends a list predicates to the CommChannelUpdate builder.
func (ccu *CommChannelUpdate) Where(ps ...predicate.CommChannel) *CommChannelUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdateTime sets the "update_time" field.
func (ccu *CommChannelUpdate) SetUpdateTime(t time.Time) *CommChannelUpdate {
	ccu.mutation.SetUpdateTime(t)
	return ccu
}

// SetName sets the "name" field.
func (ccu *CommChannelUpdate) SetName(s string) *CommChannelUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (ccu *CommChannelUpdate) AddEventListenerIDs(ids ...int) *CommChannelUpdate {
	ccu.mutation.AddEventListenerIDs(ids...)
	return ccu
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (ccu *CommChannelUpdate) AddEventListeners(e ...*EventListener) *CommChannelUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ccu.AddEventListenerIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ccu *CommChannelUpdate) AddUserIDs(ids ...int) *CommChannelUpdate {
	ccu.mutation.AddUserIDs(ids...)
	return ccu
}

// AddUsers adds the "users" edges to the User entity.
func (ccu *CommChannelUpdate) AddUsers(u ...*User) *CommChannelUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.AddUserIDs(ids...)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccu *CommChannelUpdate) Mutation() *CommChannelMutation {
	return ccu.mutation
}

// ClearEventListeners clears all "event_listeners" edges to the EventListener entity.
func (ccu *CommChannelUpdate) ClearEventListeners() *CommChannelUpdate {
	ccu.mutation.ClearEventListeners()
	return ccu
}

// RemoveEventListenerIDs removes the "event_listeners" edge to EventListener entities by IDs.
func (ccu *CommChannelUpdate) RemoveEventListenerIDs(ids ...int) *CommChannelUpdate {
	ccu.mutation.RemoveEventListenerIDs(ids...)
	return ccu
}

// RemoveEventListeners removes "event_listeners" edges to EventListener entities.
func (ccu *CommChannelUpdate) RemoveEventListeners(e ...*EventListener) *CommChannelUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ccu.RemoveEventListenerIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ccu *CommChannelUpdate) ClearUsers() *CommChannelUpdate {
	ccu.mutation.ClearUsers()
	return ccu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ccu *CommChannelUpdate) RemoveUserIDs(ids ...int) *CommChannelUpdate {
	ccu.mutation.RemoveUserIDs(ids...)
	return ccu
}

// RemoveUsers removes "users" edges to User entities.
func (ccu *CommChannelUpdate) RemoveUsers(u ...*User) *CommChannelUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CommChannelUpdate) Save(ctx context.Context) (int, error) {
	ccu.defaults()
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CommChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CommChannelUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CommChannelUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CommChannelUpdate) defaults() {
	if _, ok := ccu.mutation.UpdateTime(); !ok {
		v := commchannel.UpdateDefaultUpdateTime()
		ccu.mutation.SetUpdateTime(v)
	}
}

func (ccu *CommChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(commchannel.Table, commchannel.Columns, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdateTime(); ok {
		_spec.SetField(commchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.SetField(commchannel.FieldName, field.TypeString, value)
	}
	if ccu.mutation.TelegramChatIDCleared() {
		_spec.ClearField(commchannel.FieldTelegramChatID, field.TypeInt64)
	}
	if ccu.mutation.DiscordChannelIDCleared() {
		_spec.ClearField(commchannel.FieldDiscordChannelID, field.TypeInt64)
	}
	if ccu.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedEventListenersIDs(); len(nodes) > 0 && !ccu.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ccu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CommChannelUpdateOne is the builder for updating a single CommChannel entity.
type CommChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommChannelMutation
}

// SetUpdateTime sets the "update_time" field.
func (ccuo *CommChannelUpdateOne) SetUpdateTime(t time.Time) *CommChannelUpdateOne {
	ccuo.mutation.SetUpdateTime(t)
	return ccuo
}

// SetName sets the "name" field.
func (ccuo *CommChannelUpdateOne) SetName(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (ccuo *CommChannelUpdateOne) AddEventListenerIDs(ids ...int) *CommChannelUpdateOne {
	ccuo.mutation.AddEventListenerIDs(ids...)
	return ccuo
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (ccuo *CommChannelUpdateOne) AddEventListeners(e ...*EventListener) *CommChannelUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ccuo.AddEventListenerIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ccuo *CommChannelUpdateOne) AddUserIDs(ids ...int) *CommChannelUpdateOne {
	ccuo.mutation.AddUserIDs(ids...)
	return ccuo
}

// AddUsers adds the "users" edges to the User entity.
func (ccuo *CommChannelUpdateOne) AddUsers(u ...*User) *CommChannelUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.AddUserIDs(ids...)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccuo *CommChannelUpdateOne) Mutation() *CommChannelMutation {
	return ccuo.mutation
}

// ClearEventListeners clears all "event_listeners" edges to the EventListener entity.
func (ccuo *CommChannelUpdateOne) ClearEventListeners() *CommChannelUpdateOne {
	ccuo.mutation.ClearEventListeners()
	return ccuo
}

// RemoveEventListenerIDs removes the "event_listeners" edge to EventListener entities by IDs.
func (ccuo *CommChannelUpdateOne) RemoveEventListenerIDs(ids ...int) *CommChannelUpdateOne {
	ccuo.mutation.RemoveEventListenerIDs(ids...)
	return ccuo
}

// RemoveEventListeners removes "event_listeners" edges to EventListener entities.
func (ccuo *CommChannelUpdateOne) RemoveEventListeners(e ...*EventListener) *CommChannelUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ccuo.RemoveEventListenerIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ccuo *CommChannelUpdateOne) ClearUsers() *CommChannelUpdateOne {
	ccuo.mutation.ClearUsers()
	return ccuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ccuo *CommChannelUpdateOne) RemoveUserIDs(ids ...int) *CommChannelUpdateOne {
	ccuo.mutation.RemoveUserIDs(ids...)
	return ccuo
}

// RemoveUsers removes "users" edges to User entities.
func (ccuo *CommChannelUpdateOne) RemoveUsers(u ...*User) *CommChannelUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the CommChannelUpdate builder.
func (ccuo *CommChannelUpdateOne) Where(ps ...predicate.CommChannel) *CommChannelUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CommChannelUpdateOne) Select(field string, fields ...string) *CommChannelUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CommChannel entity.
func (ccuo *CommChannelUpdateOne) Save(ctx context.Context) (*CommChannel, error) {
	ccuo.defaults()
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CommChannelUpdateOne) SaveX(ctx context.Context) *CommChannel {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CommChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CommChannelUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CommChannelUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdateTime(); !ok {
		v := commchannel.UpdateDefaultUpdateTime()
		ccuo.mutation.SetUpdateTime(v)
	}
}

func (ccuo *CommChannelUpdateOne) sqlSave(ctx context.Context) (_node *CommChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(commchannel.Table, commchannel.Columns, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commchannel.FieldID)
		for _, f := range fields {
			if !commchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdateTime(); ok {
		_spec.SetField(commchannel.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.SetField(commchannel.FieldName, field.TypeString, value)
	}
	if ccuo.mutation.TelegramChatIDCleared() {
		_spec.ClearField(commchannel.FieldTelegramChatID, field.TypeInt64)
	}
	if ccuo.mutation.DiscordChannelIDCleared() {
		_spec.ClearField(commchannel.FieldDiscordChannelID, field.TypeInt64)
	}
	if ccuo.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedEventListenersIDs(); len(nodes) > 0 && !ccuo.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ccuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommChannel{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
