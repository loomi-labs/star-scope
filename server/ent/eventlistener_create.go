// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/loomi-labs/star-scope/ent/chain"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/event"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/user"
)

// EventListenerCreate is the builder for creating a EventListener entity.
type EventListenerCreate struct {
	config
	mutation *EventListenerMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (elc *EventListenerCreate) SetCreateTime(t time.Time) *EventListenerCreate {
	elc.mutation.SetCreateTime(t)
	return elc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (elc *EventListenerCreate) SetNillableCreateTime(t *time.Time) *EventListenerCreate {
	if t != nil {
		elc.SetCreateTime(*t)
	}
	return elc
}

// SetUpdateTime sets the "update_time" field.
func (elc *EventListenerCreate) SetUpdateTime(t time.Time) *EventListenerCreate {
	elc.mutation.SetUpdateTime(t)
	return elc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (elc *EventListenerCreate) SetNillableUpdateTime(t *time.Time) *EventListenerCreate {
	if t != nil {
		elc.SetUpdateTime(*t)
	}
	return elc
}

// SetWalletAddress sets the "wallet_address" field.
func (elc *EventListenerCreate) SetWalletAddress(s string) *EventListenerCreate {
	elc.mutation.SetWalletAddress(s)
	return elc
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (elc *EventListenerCreate) SetNillableWalletAddress(s *string) *EventListenerCreate {
	if s != nil {
		elc.SetWalletAddress(*s)
	}
	return elc
}

// SetDataType sets the "data_type" field.
func (elc *EventListenerCreate) SetDataType(et eventlistener.DataType) *EventListenerCreate {
	elc.mutation.SetDataType(et)
	return elc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (elc *EventListenerCreate) AddUserIDs(ids ...int) *EventListenerCreate {
	elc.mutation.AddUserIDs(ids...)
	return elc
}

// AddUsers adds the "users" edges to the User entity.
func (elc *EventListenerCreate) AddUsers(u ...*User) *EventListenerCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return elc.AddUserIDs(ids...)
}

// SetChainID sets the "chain" edge to the Chain entity by ID.
func (elc *EventListenerCreate) SetChainID(id int) *EventListenerCreate {
	elc.mutation.SetChainID(id)
	return elc
}

// SetNillableChainID sets the "chain" edge to the Chain entity by ID if the given value is not nil.
func (elc *EventListenerCreate) SetNillableChainID(id *int) *EventListenerCreate {
	if id != nil {
		elc = elc.SetChainID(*id)
	}
	return elc
}

// SetChain sets the "chain" edge to the Chain entity.
func (elc *EventListenerCreate) SetChain(c *Chain) *EventListenerCreate {
	return elc.SetChainID(c.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (elc *EventListenerCreate) AddEventIDs(ids ...uuid.UUID) *EventListenerCreate {
	elc.mutation.AddEventIDs(ids...)
	return elc
}

// AddEvents adds the "events" edges to the Event entity.
func (elc *EventListenerCreate) AddEvents(e ...*Event) *EventListenerCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return elc.AddEventIDs(ids...)
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (elc *EventListenerCreate) AddCommChannelIDs(ids ...int) *EventListenerCreate {
	elc.mutation.AddCommChannelIDs(ids...)
	return elc
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (elc *EventListenerCreate) AddCommChannels(c ...*CommChannel) *EventListenerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return elc.AddCommChannelIDs(ids...)
}

// Mutation returns the EventListenerMutation object of the builder.
func (elc *EventListenerCreate) Mutation() *EventListenerMutation {
	return elc.mutation
}

// Save creates the EventListener in the database.
func (elc *EventListenerCreate) Save(ctx context.Context) (*EventListener, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EventListenerCreate) SaveX(ctx context.Context) *EventListener {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *EventListenerCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *EventListenerCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *EventListenerCreate) defaults() {
	if _, ok := elc.mutation.CreateTime(); !ok {
		v := eventlistener.DefaultCreateTime()
		elc.mutation.SetCreateTime(v)
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		v := eventlistener.DefaultUpdateTime()
		elc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *EventListenerCreate) check() error {
	if _, ok := elc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "EventListener.create_time"`)}
	}
	if _, ok := elc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "EventListener.update_time"`)}
	}
	if _, ok := elc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "EventListener.data_type"`)}
	}
	if v, ok := elc.mutation.DataType(); ok {
		if err := eventlistener.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`ent: validator failed for field "EventListener.data_type": %w`, err)}
		}
	}
	return nil
}

func (elc *EventListenerCreate) sqlSave(ctx context.Context) (*EventListener, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *EventListenerCreate) createSpec() (*EventListener, *sqlgraph.CreateSpec) {
	var (
		_node = &EventListener{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(eventlistener.Table, sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt))
	)
	if value, ok := elc.mutation.CreateTime(); ok {
		_spec.SetField(eventlistener.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := elc.mutation.UpdateTime(); ok {
		_spec.SetField(eventlistener.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := elc.mutation.WalletAddress(); ok {
		_spec.SetField(eventlistener.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := elc.mutation.DataType(); ok {
		_spec.SetField(eventlistener.FieldDataType, field.TypeEnum, value)
		_node.DataType = value
	}
	if nodes := elc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventlistener.UsersTable,
			Columns: eventlistener.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.ChainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlistener.ChainTable,
			Columns: []string{eventlistener.ChainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chain_event_listeners = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventlistener.EventsTable,
			Columns: []string{eventlistener.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := elc.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   eventlistener.CommChannelsTable,
			Columns: eventlistener.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventListenerCreateBulk is the builder for creating many EventListener entities in bulk.
type EventListenerCreateBulk struct {
	config
	builders []*EventListenerCreate
}

// Save creates the EventListener entities in the database.
func (elcb *EventListenerCreateBulk) Save(ctx context.Context) ([]*EventListener, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*EventListener, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventListenerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *EventListenerCreateBulk) SaveX(ctx context.Context) []*EventListener {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *EventListenerCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *EventListenerCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
