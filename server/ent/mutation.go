// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/loomi-labs/star-scope/ent/chain"
	"github.com/loomi-labs/star-scope/ent/contractproposal"
	"github.com/loomi-labs/star-scope/ent/event"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/proposal"
	"github.com/loomi-labs/star-scope/ent/schema"
	"github.com/loomi-labs/star-scope/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChain            = "Chain"
	TypeContractProposal = "ContractProposal"
	TypeEvent            = "Event"
	TypeEventListener    = "EventListener"
	TypeProposal         = "Proposal"
	TypeUser             = "User"
)

// ChainMutation represents an operation that mutates the Chain nodes in the graph.
type ChainMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	create_time               *time.Time
	update_time               *time.Time
	chain_id                  *string
	name                      *string
	pretty_name               *string
	_path                     *string
	image                     *string
	bech32_prefix             *string
	rest_endpoint             *string
	indexing_height           *uint64
	addindexing_height        *int64
	has_custom_indexer        *bool
	handled_message_types     *string
	unhandled_message_types   *string
	is_enabled                *bool
	clearedFields             map[string]struct{}
	event_listeners           map[int]struct{}
	removedevent_listeners    map[int]struct{}
	clearedevent_listeners    bool
	proposals                 map[int]struct{}
	removedproposals          map[int]struct{}
	clearedproposals          bool
	contract_proposals        map[int]struct{}
	removedcontract_proposals map[int]struct{}
	clearedcontract_proposals bool
	done                      bool
	oldValue                  func(context.Context) (*Chain, error)
	predicates                []predicate.Chain
}

var _ ent.Mutation = (*ChainMutation)(nil)

// chainOption allows management of the mutation configuration using functional options.
type chainOption func(*ChainMutation)

// newChainMutation creates new mutation for the Chain entity.
func newChainMutation(c config, op Op, opts ...chainOption) *ChainMutation {
	m := &ChainMutation{
		config:        c,
		op:            op,
		typ:           TypeChain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChainID sets the ID field of the mutation.
func withChainID(id int) chainOption {
	return func(m *ChainMutation) {
		var (
			err   error
			once  sync.Once
			value *Chain
		)
		m.oldValue = func(ctx context.Context) (*Chain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChain sets the old Chain of the mutation.
func withChain(node *Chain) chainOption {
	return func(m *ChainMutation) {
		m.oldValue = func(context.Context) (*Chain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChainMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChainMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ChainMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ChainMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ChainMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ChainMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ChainMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ChainMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetChainID sets the "chain_id" field.
func (m *ChainMutation) SetChainID(s string) {
	m.chain_id = &s
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *ChainMutation) ChainID() (r string, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldChainID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *ChainMutation) ResetChainID() {
	m.chain_id = nil
}

// SetName sets the "name" field.
func (m *ChainMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChainMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChainMutation) ResetName() {
	m.name = nil
}

// SetPrettyName sets the "pretty_name" field.
func (m *ChainMutation) SetPrettyName(s string) {
	m.pretty_name = &s
}

// PrettyName returns the value of the "pretty_name" field in the mutation.
func (m *ChainMutation) PrettyName() (r string, exists bool) {
	v := m.pretty_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPrettyName returns the old "pretty_name" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldPrettyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrettyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrettyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrettyName: %w", err)
	}
	return oldValue.PrettyName, nil
}

// ResetPrettyName resets all changes to the "pretty_name" field.
func (m *ChainMutation) ResetPrettyName() {
	m.pretty_name = nil
}

// SetPath sets the "path" field.
func (m *ChainMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ChainMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ChainMutation) ResetPath() {
	m._path = nil
}

// SetImage sets the "image" field.
func (m *ChainMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ChainMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ChainMutation) ResetImage() {
	m.image = nil
}

// SetBech32Prefix sets the "bech32_prefix" field.
func (m *ChainMutation) SetBech32Prefix(s string) {
	m.bech32_prefix = &s
}

// Bech32Prefix returns the value of the "bech32_prefix" field in the mutation.
func (m *ChainMutation) Bech32Prefix() (r string, exists bool) {
	v := m.bech32_prefix
	if v == nil {
		return
	}
	return *v, true
}

// OldBech32Prefix returns the old "bech32_prefix" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldBech32Prefix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBech32Prefix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBech32Prefix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBech32Prefix: %w", err)
	}
	return oldValue.Bech32Prefix, nil
}

// ResetBech32Prefix resets all changes to the "bech32_prefix" field.
func (m *ChainMutation) ResetBech32Prefix() {
	m.bech32_prefix = nil
}

// SetRestEndpoint sets the "rest_endpoint" field.
func (m *ChainMutation) SetRestEndpoint(s string) {
	m.rest_endpoint = &s
}

// RestEndpoint returns the value of the "rest_endpoint" field in the mutation.
func (m *ChainMutation) RestEndpoint() (r string, exists bool) {
	v := m.rest_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldRestEndpoint returns the old "rest_endpoint" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldRestEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRestEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRestEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRestEndpoint: %w", err)
	}
	return oldValue.RestEndpoint, nil
}

// ResetRestEndpoint resets all changes to the "rest_endpoint" field.
func (m *ChainMutation) ResetRestEndpoint() {
	m.rest_endpoint = nil
}

// SetIndexingHeight sets the "indexing_height" field.
func (m *ChainMutation) SetIndexingHeight(u uint64) {
	m.indexing_height = &u
	m.addindexing_height = nil
}

// IndexingHeight returns the value of the "indexing_height" field in the mutation.
func (m *ChainMutation) IndexingHeight() (r uint64, exists bool) {
	v := m.indexing_height
	if v == nil {
		return
	}
	return *v, true
}

// OldIndexingHeight returns the old "indexing_height" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldIndexingHeight(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndexingHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndexingHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndexingHeight: %w", err)
	}
	return oldValue.IndexingHeight, nil
}

// AddIndexingHeight adds u to the "indexing_height" field.
func (m *ChainMutation) AddIndexingHeight(u int64) {
	if m.addindexing_height != nil {
		*m.addindexing_height += u
	} else {
		m.addindexing_height = &u
	}
}

// AddedIndexingHeight returns the value that was added to the "indexing_height" field in this mutation.
func (m *ChainMutation) AddedIndexingHeight() (r int64, exists bool) {
	v := m.addindexing_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndexingHeight resets all changes to the "indexing_height" field.
func (m *ChainMutation) ResetIndexingHeight() {
	m.indexing_height = nil
	m.addindexing_height = nil
}

// SetHasCustomIndexer sets the "has_custom_indexer" field.
func (m *ChainMutation) SetHasCustomIndexer(b bool) {
	m.has_custom_indexer = &b
}

// HasCustomIndexer returns the value of the "has_custom_indexer" field in the mutation.
func (m *ChainMutation) HasCustomIndexer() (r bool, exists bool) {
	v := m.has_custom_indexer
	if v == nil {
		return
	}
	return *v, true
}

// OldHasCustomIndexer returns the old "has_custom_indexer" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldHasCustomIndexer(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasCustomIndexer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasCustomIndexer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasCustomIndexer: %w", err)
	}
	return oldValue.HasCustomIndexer, nil
}

// ResetHasCustomIndexer resets all changes to the "has_custom_indexer" field.
func (m *ChainMutation) ResetHasCustomIndexer() {
	m.has_custom_indexer = nil
}

// SetHandledMessageTypes sets the "handled_message_types" field.
func (m *ChainMutation) SetHandledMessageTypes(s string) {
	m.handled_message_types = &s
}

// HandledMessageTypes returns the value of the "handled_message_types" field in the mutation.
func (m *ChainMutation) HandledMessageTypes() (r string, exists bool) {
	v := m.handled_message_types
	if v == nil {
		return
	}
	return *v, true
}

// OldHandledMessageTypes returns the old "handled_message_types" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldHandledMessageTypes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandledMessageTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandledMessageTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandledMessageTypes: %w", err)
	}
	return oldValue.HandledMessageTypes, nil
}

// ResetHandledMessageTypes resets all changes to the "handled_message_types" field.
func (m *ChainMutation) ResetHandledMessageTypes() {
	m.handled_message_types = nil
}

// SetUnhandledMessageTypes sets the "unhandled_message_types" field.
func (m *ChainMutation) SetUnhandledMessageTypes(s string) {
	m.unhandled_message_types = &s
}

// UnhandledMessageTypes returns the value of the "unhandled_message_types" field in the mutation.
func (m *ChainMutation) UnhandledMessageTypes() (r string, exists bool) {
	v := m.unhandled_message_types
	if v == nil {
		return
	}
	return *v, true
}

// OldUnhandledMessageTypes returns the old "unhandled_message_types" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldUnhandledMessageTypes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnhandledMessageTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnhandledMessageTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnhandledMessageTypes: %w", err)
	}
	return oldValue.UnhandledMessageTypes, nil
}

// ResetUnhandledMessageTypes resets all changes to the "unhandled_message_types" field.
func (m *ChainMutation) ResetUnhandledMessageTypes() {
	m.unhandled_message_types = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *ChainMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *ChainMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the Chain entity.
// If the Chain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChainMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *ChainMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by ids.
func (m *ChainMutation) AddEventListenerIDs(ids ...int) {
	if m.event_listeners == nil {
		m.event_listeners = make(map[int]struct{})
	}
	for i := range ids {
		m.event_listeners[ids[i]] = struct{}{}
	}
}

// ClearEventListeners clears the "event_listeners" edge to the EventListener entity.
func (m *ChainMutation) ClearEventListeners() {
	m.clearedevent_listeners = true
}

// EventListenersCleared reports if the "event_listeners" edge to the EventListener entity was cleared.
func (m *ChainMutation) EventListenersCleared() bool {
	return m.clearedevent_listeners
}

// RemoveEventListenerIDs removes the "event_listeners" edge to the EventListener entity by IDs.
func (m *ChainMutation) RemoveEventListenerIDs(ids ...int) {
	if m.removedevent_listeners == nil {
		m.removedevent_listeners = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.event_listeners, ids[i])
		m.removedevent_listeners[ids[i]] = struct{}{}
	}
}

// RemovedEventListeners returns the removed IDs of the "event_listeners" edge to the EventListener entity.
func (m *ChainMutation) RemovedEventListenersIDs() (ids []int) {
	for id := range m.removedevent_listeners {
		ids = append(ids, id)
	}
	return
}

// EventListenersIDs returns the "event_listeners" edge IDs in the mutation.
func (m *ChainMutation) EventListenersIDs() (ids []int) {
	for id := range m.event_listeners {
		ids = append(ids, id)
	}
	return
}

// ResetEventListeners resets all changes to the "event_listeners" edge.
func (m *ChainMutation) ResetEventListeners() {
	m.event_listeners = nil
	m.clearedevent_listeners = false
	m.removedevent_listeners = nil
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by ids.
func (m *ChainMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the Proposal entity.
func (m *ChainMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the Proposal entity was cleared.
func (m *ChainMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the Proposal entity by IDs.
func (m *ChainMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the Proposal entity.
func (m *ChainMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *ChainMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *ChainMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// AddContractProposalIDs adds the "contract_proposals" edge to the ContractProposal entity by ids.
func (m *ChainMutation) AddContractProposalIDs(ids ...int) {
	if m.contract_proposals == nil {
		m.contract_proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.contract_proposals[ids[i]] = struct{}{}
	}
}

// ClearContractProposals clears the "contract_proposals" edge to the ContractProposal entity.
func (m *ChainMutation) ClearContractProposals() {
	m.clearedcontract_proposals = true
}

// ContractProposalsCleared reports if the "contract_proposals" edge to the ContractProposal entity was cleared.
func (m *ChainMutation) ContractProposalsCleared() bool {
	return m.clearedcontract_proposals
}

// RemoveContractProposalIDs removes the "contract_proposals" edge to the ContractProposal entity by IDs.
func (m *ChainMutation) RemoveContractProposalIDs(ids ...int) {
	if m.removedcontract_proposals == nil {
		m.removedcontract_proposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contract_proposals, ids[i])
		m.removedcontract_proposals[ids[i]] = struct{}{}
	}
}

// RemovedContractProposals returns the removed IDs of the "contract_proposals" edge to the ContractProposal entity.
func (m *ChainMutation) RemovedContractProposalsIDs() (ids []int) {
	for id := range m.removedcontract_proposals {
		ids = append(ids, id)
	}
	return
}

// ContractProposalsIDs returns the "contract_proposals" edge IDs in the mutation.
func (m *ChainMutation) ContractProposalsIDs() (ids []int) {
	for id := range m.contract_proposals {
		ids = append(ids, id)
	}
	return
}

// ResetContractProposals resets all changes to the "contract_proposals" edge.
func (m *ChainMutation) ResetContractProposals() {
	m.contract_proposals = nil
	m.clearedcontract_proposals = false
	m.removedcontract_proposals = nil
}

// Where appends a list predicates to the ChainMutation builder.
func (m *ChainMutation) Where(ps ...predicate.Chain) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChainMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChainMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chain, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChainMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChainMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chain).
func (m *ChainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChainMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.create_time != nil {
		fields = append(fields, chain.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, chain.FieldUpdateTime)
	}
	if m.chain_id != nil {
		fields = append(fields, chain.FieldChainID)
	}
	if m.name != nil {
		fields = append(fields, chain.FieldName)
	}
	if m.pretty_name != nil {
		fields = append(fields, chain.FieldPrettyName)
	}
	if m._path != nil {
		fields = append(fields, chain.FieldPath)
	}
	if m.image != nil {
		fields = append(fields, chain.FieldImage)
	}
	if m.bech32_prefix != nil {
		fields = append(fields, chain.FieldBech32Prefix)
	}
	if m.rest_endpoint != nil {
		fields = append(fields, chain.FieldRestEndpoint)
	}
	if m.indexing_height != nil {
		fields = append(fields, chain.FieldIndexingHeight)
	}
	if m.has_custom_indexer != nil {
		fields = append(fields, chain.FieldHasCustomIndexer)
	}
	if m.handled_message_types != nil {
		fields = append(fields, chain.FieldHandledMessageTypes)
	}
	if m.unhandled_message_types != nil {
		fields = append(fields, chain.FieldUnhandledMessageTypes)
	}
	if m.is_enabled != nil {
		fields = append(fields, chain.FieldIsEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chain.FieldCreateTime:
		return m.CreateTime()
	case chain.FieldUpdateTime:
		return m.UpdateTime()
	case chain.FieldChainID:
		return m.ChainID()
	case chain.FieldName:
		return m.Name()
	case chain.FieldPrettyName:
		return m.PrettyName()
	case chain.FieldPath:
		return m.Path()
	case chain.FieldImage:
		return m.Image()
	case chain.FieldBech32Prefix:
		return m.Bech32Prefix()
	case chain.FieldRestEndpoint:
		return m.RestEndpoint()
	case chain.FieldIndexingHeight:
		return m.IndexingHeight()
	case chain.FieldHasCustomIndexer:
		return m.HasCustomIndexer()
	case chain.FieldHandledMessageTypes:
		return m.HandledMessageTypes()
	case chain.FieldUnhandledMessageTypes:
		return m.UnhandledMessageTypes()
	case chain.FieldIsEnabled:
		return m.IsEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chain.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case chain.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case chain.FieldChainID:
		return m.OldChainID(ctx)
	case chain.FieldName:
		return m.OldName(ctx)
	case chain.FieldPrettyName:
		return m.OldPrettyName(ctx)
	case chain.FieldPath:
		return m.OldPath(ctx)
	case chain.FieldImage:
		return m.OldImage(ctx)
	case chain.FieldBech32Prefix:
		return m.OldBech32Prefix(ctx)
	case chain.FieldRestEndpoint:
		return m.OldRestEndpoint(ctx)
	case chain.FieldIndexingHeight:
		return m.OldIndexingHeight(ctx)
	case chain.FieldHasCustomIndexer:
		return m.OldHasCustomIndexer(ctx)
	case chain.FieldHandledMessageTypes:
		return m.OldHandledMessageTypes(ctx)
	case chain.FieldUnhandledMessageTypes:
		return m.OldUnhandledMessageTypes(ctx)
	case chain.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown Chain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chain.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case chain.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case chain.FieldChainID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case chain.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case chain.FieldPrettyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrettyName(v)
		return nil
	case chain.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case chain.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case chain.FieldBech32Prefix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBech32Prefix(v)
		return nil
	case chain.FieldRestEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRestEndpoint(v)
		return nil
	case chain.FieldIndexingHeight:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndexingHeight(v)
		return nil
	case chain.FieldHasCustomIndexer:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasCustomIndexer(v)
		return nil
	case chain.FieldHandledMessageTypes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandledMessageTypes(v)
		return nil
	case chain.FieldUnhandledMessageTypes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnhandledMessageTypes(v)
		return nil
	case chain.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChainMutation) AddedFields() []string {
	var fields []string
	if m.addindexing_height != nil {
		fields = append(fields, chain.FieldIndexingHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChainMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chain.FieldIndexingHeight:
		return m.AddedIndexingHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChainMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chain.FieldIndexingHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndexingHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Chain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChainMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChainMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChainMutation) ResetField(name string) error {
	switch name {
	case chain.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case chain.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case chain.FieldChainID:
		m.ResetChainID()
		return nil
	case chain.FieldName:
		m.ResetName()
		return nil
	case chain.FieldPrettyName:
		m.ResetPrettyName()
		return nil
	case chain.FieldPath:
		m.ResetPath()
		return nil
	case chain.FieldImage:
		m.ResetImage()
		return nil
	case chain.FieldBech32Prefix:
		m.ResetBech32Prefix()
		return nil
	case chain.FieldRestEndpoint:
		m.ResetRestEndpoint()
		return nil
	case chain.FieldIndexingHeight:
		m.ResetIndexingHeight()
		return nil
	case chain.FieldHasCustomIndexer:
		m.ResetHasCustomIndexer()
		return nil
	case chain.FieldHandledMessageTypes:
		m.ResetHandledMessageTypes()
		return nil
	case chain.FieldUnhandledMessageTypes:
		m.ResetUnhandledMessageTypes()
		return nil
	case chain.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	}
	return fmt.Errorf("unknown Chain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChainMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.event_listeners != nil {
		edges = append(edges, chain.EdgeEventListeners)
	}
	if m.proposals != nil {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.contract_proposals != nil {
		edges = append(edges, chain.EdgeContractProposals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChainMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeEventListeners:
		ids := make([]ent.Value, 0, len(m.event_listeners))
		for id := range m.event_listeners {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeContractProposals:
		ids := make([]ent.Value, 0, len(m.contract_proposals))
		for id := range m.contract_proposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedevent_listeners != nil {
		edges = append(edges, chain.EdgeEventListeners)
	}
	if m.removedproposals != nil {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.removedcontract_proposals != nil {
		edges = append(edges, chain.EdgeContractProposals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChainMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chain.EdgeEventListeners:
		ids := make([]ent.Value, 0, len(m.removedevent_listeners))
		for id := range m.removedevent_listeners {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	case chain.EdgeContractProposals:
		ids := make([]ent.Value, 0, len(m.removedcontract_proposals))
		for id := range m.removedcontract_proposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedevent_listeners {
		edges = append(edges, chain.EdgeEventListeners)
	}
	if m.clearedproposals {
		edges = append(edges, chain.EdgeProposals)
	}
	if m.clearedcontract_proposals {
		edges = append(edges, chain.EdgeContractProposals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChainMutation) EdgeCleared(name string) bool {
	switch name {
	case chain.EdgeEventListeners:
		return m.clearedevent_listeners
	case chain.EdgeProposals:
		return m.clearedproposals
	case chain.EdgeContractProposals:
		return m.clearedcontract_proposals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChainMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Chain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChainMutation) ResetEdge(name string) error {
	switch name {
	case chain.EdgeEventListeners:
		m.ResetEventListeners()
		return nil
	case chain.EdgeProposals:
		m.ResetProposals()
		return nil
	case chain.EdgeContractProposals:
		m.ResetContractProposals()
		return nil
	}
	return fmt.Errorf("unknown Chain edge %s", name)
}

// ContractProposalMutation represents an operation that mutates the ContractProposal nodes in the graph.
type ContractProposalMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	proposal_id      *uint64
	addproposal_id   *int64
	title            *string
	description      *string
	first_seen_time  *time.Time
	voting_end_time  *time.Time
	contract_address *string
	status           *contractproposal.Status
	clearedFields    map[string]struct{}
	chain            *int
	clearedchain     bool
	done             bool
	oldValue         func(context.Context) (*ContractProposal, error)
	predicates       []predicate.ContractProposal
}

var _ ent.Mutation = (*ContractProposalMutation)(nil)

// contractproposalOption allows management of the mutation configuration using functional options.
type contractproposalOption func(*ContractProposalMutation)

// newContractProposalMutation creates new mutation for the ContractProposal entity.
func newContractProposalMutation(c config, op Op, opts ...contractproposalOption) *ContractProposalMutation {
	m := &ContractProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeContractProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractProposalID sets the ID field of the mutation.
func withContractProposalID(id int) contractproposalOption {
	return func(m *ContractProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *ContractProposal
		)
		m.oldValue = func(ctx context.Context) (*ContractProposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContractProposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContractProposal sets the old ContractProposal of the mutation.
func withContractProposal(node *ContractProposal) contractproposalOption {
	return func(m *ContractProposalMutation) {
		m.oldValue = func(context.Context) (*ContractProposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContractProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ContractProposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ContractProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ContractProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ContractProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ContractProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ContractProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ContractProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ContractProposalMutation) SetProposalID(u uint64) {
	m.proposal_id = &u
	m.addproposal_id = nil
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ContractProposalMutation) ProposalID() (r uint64, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldProposalID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// AddProposalID adds u to the "proposal_id" field.
func (m *ContractProposalMutation) AddProposalID(u int64) {
	if m.addproposal_id != nil {
		*m.addproposal_id += u
	} else {
		m.addproposal_id = &u
	}
}

// AddedProposalID returns the value that was added to the "proposal_id" field in this mutation.
func (m *ContractProposalMutation) AddedProposalID() (r int64, exists bool) {
	v := m.addproposal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ContractProposalMutation) ResetProposalID() {
	m.proposal_id = nil
	m.addproposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ContractProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ContractProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ContractProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ContractProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ContractProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ContractProposalMutation) ResetDescription() {
	m.description = nil
}

// SetFirstSeenTime sets the "first_seen_time" field.
func (m *ContractProposalMutation) SetFirstSeenTime(t time.Time) {
	m.first_seen_time = &t
}

// FirstSeenTime returns the value of the "first_seen_time" field in the mutation.
func (m *ContractProposalMutation) FirstSeenTime() (r time.Time, exists bool) {
	v := m.first_seen_time
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstSeenTime returns the old "first_seen_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldFirstSeenTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstSeenTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstSeenTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstSeenTime: %w", err)
	}
	return oldValue.FirstSeenTime, nil
}

// ResetFirstSeenTime resets all changes to the "first_seen_time" field.
func (m *ContractProposalMutation) ResetFirstSeenTime() {
	m.first_seen_time = nil
}

// SetVotingEndTime sets the "voting_end_time" field.
func (m *ContractProposalMutation) SetVotingEndTime(t time.Time) {
	m.voting_end_time = &t
}

// VotingEndTime returns the value of the "voting_end_time" field in the mutation.
func (m *ContractProposalMutation) VotingEndTime() (r time.Time, exists bool) {
	v := m.voting_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingEndTime returns the old "voting_end_time" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldVotingEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingEndTime: %w", err)
	}
	return oldValue.VotingEndTime, nil
}

// ResetVotingEndTime resets all changes to the "voting_end_time" field.
func (m *ContractProposalMutation) ResetVotingEndTime() {
	m.voting_end_time = nil
}

// SetContractAddress sets the "contract_address" field.
func (m *ContractProposalMutation) SetContractAddress(s string) {
	m.contract_address = &s
}

// ContractAddress returns the value of the "contract_address" field in the mutation.
func (m *ContractProposalMutation) ContractAddress() (r string, exists bool) {
	v := m.contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContractAddress returns the old "contract_address" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractAddress: %w", err)
	}
	return oldValue.ContractAddress, nil
}

// ResetContractAddress resets all changes to the "contract_address" field.
func (m *ContractProposalMutation) ResetContractAddress() {
	m.contract_address = nil
}

// SetStatus sets the "status" field.
func (m *ContractProposalMutation) SetStatus(c contractproposal.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *ContractProposalMutation) Status() (r contractproposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ContractProposal entity.
// If the ContractProposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractProposalMutation) OldStatus(ctx context.Context) (v contractproposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ContractProposalMutation) ResetStatus() {
	m.status = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *ContractProposalMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *ContractProposalMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *ContractProposalMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *ContractProposalMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *ContractProposalMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *ContractProposalMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the ContractProposalMutation builder.
func (m *ContractProposalMutation) Where(ps ...predicate.ContractProposal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContractProposalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContractProposalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ContractProposal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContractProposalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContractProposalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ContractProposal).
func (m *ContractProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractProposalMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, contractproposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, contractproposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, contractproposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, contractproposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, contractproposal.FieldDescription)
	}
	if m.first_seen_time != nil {
		fields = append(fields, contractproposal.FieldFirstSeenTime)
	}
	if m.voting_end_time != nil {
		fields = append(fields, contractproposal.FieldVotingEndTime)
	}
	if m.contract_address != nil {
		fields = append(fields, contractproposal.FieldContractAddress)
	}
	if m.status != nil {
		fields = append(fields, contractproposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contractproposal.FieldCreateTime:
		return m.CreateTime()
	case contractproposal.FieldUpdateTime:
		return m.UpdateTime()
	case contractproposal.FieldProposalID:
		return m.ProposalID()
	case contractproposal.FieldTitle:
		return m.Title()
	case contractproposal.FieldDescription:
		return m.Description()
	case contractproposal.FieldFirstSeenTime:
		return m.FirstSeenTime()
	case contractproposal.FieldVotingEndTime:
		return m.VotingEndTime()
	case contractproposal.FieldContractAddress:
		return m.ContractAddress()
	case contractproposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contractproposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case contractproposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case contractproposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case contractproposal.FieldTitle:
		return m.OldTitle(ctx)
	case contractproposal.FieldDescription:
		return m.OldDescription(ctx)
	case contractproposal.FieldFirstSeenTime:
		return m.OldFirstSeenTime(ctx)
	case contractproposal.FieldVotingEndTime:
		return m.OldVotingEndTime(ctx)
	case contractproposal.FieldContractAddress:
		return m.OldContractAddress(ctx)
	case contractproposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ContractProposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contractproposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case contractproposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case contractproposal.FieldProposalID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case contractproposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case contractproposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case contractproposal.FieldFirstSeenTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstSeenTime(v)
		return nil
	case contractproposal.FieldVotingEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingEndTime(v)
		return nil
	case contractproposal.FieldContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractAddress(v)
		return nil
	case contractproposal.FieldStatus:
		v, ok := value.(contractproposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ContractProposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractProposalMutation) AddedFields() []string {
	var fields []string
	if m.addproposal_id != nil {
		fields = append(fields, contractproposal.FieldProposalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contractproposal.FieldProposalID:
		return m.AddedProposalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contractproposal.FieldProposalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProposalID(v)
		return nil
	}
	return fmt.Errorf("unknown ContractProposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ContractProposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractProposalMutation) ResetField(name string) error {
	switch name {
	case contractproposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case contractproposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case contractproposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case contractproposal.FieldTitle:
		m.ResetTitle()
		return nil
	case contractproposal.FieldDescription:
		m.ResetDescription()
		return nil
	case contractproposal.FieldFirstSeenTime:
		m.ResetFirstSeenTime()
		return nil
	case contractproposal.FieldVotingEndTime:
		m.ResetVotingEndTime()
		return nil
	case contractproposal.FieldContractAddress:
		m.ResetContractAddress()
		return nil
	case contractproposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, contractproposal.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contractproposal.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractProposalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, contractproposal.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case contractproposal.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractProposalMutation) ClearEdge(name string) error {
	switch name {
	case contractproposal.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractProposalMutation) ResetEdge(name string) error {
	switch name {
	case contractproposal.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown ContractProposal edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	create_time           *time.Time
	update_time           *time.Time
	event_type            *event.EventType
	chain_event           **schema.ChainEventWithScan
	contract_event        **schema.ContractEventWithScan
	wallet_event          **schema.WalletEventWithScan
	data_type             *event.DataType
	notify_time           *time.Time
	is_read               *bool
	clearedFields         map[string]struct{}
	event_listener        *int
	clearedevent_listener bool
	done                  bool
	oldValue              func(context.Context) (*Event, error)
	predicates            []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *EventMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EventMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EventMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *EventMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *EventMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *EventMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEventType sets the "event_type" field.
func (m *EventMutation) SetEventType(et event.EventType) {
	m.event_type = &et
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *EventMutation) EventType() (r event.EventType, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventType(ctx context.Context) (v event.EventType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *EventMutation) ResetEventType() {
	m.event_type = nil
}

// SetChainEvent sets the "chain_event" field.
func (m *EventMutation) SetChainEvent(sews *schema.ChainEventWithScan) {
	m.chain_event = &sews
}

// ChainEvent returns the value of the "chain_event" field in the mutation.
func (m *EventMutation) ChainEvent() (r *schema.ChainEventWithScan, exists bool) {
	v := m.chain_event
	if v == nil {
		return
	}
	return *v, true
}

// OldChainEvent returns the old "chain_event" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldChainEvent(ctx context.Context) (v *schema.ChainEventWithScan, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainEvent: %w", err)
	}
	return oldValue.ChainEvent, nil
}

// ClearChainEvent clears the value of the "chain_event" field.
func (m *EventMutation) ClearChainEvent() {
	m.chain_event = nil
	m.clearedFields[event.FieldChainEvent] = struct{}{}
}

// ChainEventCleared returns if the "chain_event" field was cleared in this mutation.
func (m *EventMutation) ChainEventCleared() bool {
	_, ok := m.clearedFields[event.FieldChainEvent]
	return ok
}

// ResetChainEvent resets all changes to the "chain_event" field.
func (m *EventMutation) ResetChainEvent() {
	m.chain_event = nil
	delete(m.clearedFields, event.FieldChainEvent)
}

// SetContractEvent sets the "contract_event" field.
func (m *EventMutation) SetContractEvent(sews *schema.ContractEventWithScan) {
	m.contract_event = &sews
}

// ContractEvent returns the value of the "contract_event" field in the mutation.
func (m *EventMutation) ContractEvent() (r *schema.ContractEventWithScan, exists bool) {
	v := m.contract_event
	if v == nil {
		return
	}
	return *v, true
}

// OldContractEvent returns the old "contract_event" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldContractEvent(ctx context.Context) (v *schema.ContractEventWithScan, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractEvent: %w", err)
	}
	return oldValue.ContractEvent, nil
}

// ClearContractEvent clears the value of the "contract_event" field.
func (m *EventMutation) ClearContractEvent() {
	m.contract_event = nil
	m.clearedFields[event.FieldContractEvent] = struct{}{}
}

// ContractEventCleared returns if the "contract_event" field was cleared in this mutation.
func (m *EventMutation) ContractEventCleared() bool {
	_, ok := m.clearedFields[event.FieldContractEvent]
	return ok
}

// ResetContractEvent resets all changes to the "contract_event" field.
func (m *EventMutation) ResetContractEvent() {
	m.contract_event = nil
	delete(m.clearedFields, event.FieldContractEvent)
}

// SetWalletEvent sets the "wallet_event" field.
func (m *EventMutation) SetWalletEvent(sews *schema.WalletEventWithScan) {
	m.wallet_event = &sews
}

// WalletEvent returns the value of the "wallet_event" field in the mutation.
func (m *EventMutation) WalletEvent() (r *schema.WalletEventWithScan, exists bool) {
	v := m.wallet_event
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletEvent returns the old "wallet_event" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldWalletEvent(ctx context.Context) (v *schema.WalletEventWithScan, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletEvent: %w", err)
	}
	return oldValue.WalletEvent, nil
}

// ClearWalletEvent clears the value of the "wallet_event" field.
func (m *EventMutation) ClearWalletEvent() {
	m.wallet_event = nil
	m.clearedFields[event.FieldWalletEvent] = struct{}{}
}

// WalletEventCleared returns if the "wallet_event" field was cleared in this mutation.
func (m *EventMutation) WalletEventCleared() bool {
	_, ok := m.clearedFields[event.FieldWalletEvent]
	return ok
}

// ResetWalletEvent resets all changes to the "wallet_event" field.
func (m *EventMutation) ResetWalletEvent() {
	m.wallet_event = nil
	delete(m.clearedFields, event.FieldWalletEvent)
}

// SetDataType sets the "data_type" field.
func (m *EventMutation) SetDataType(et event.DataType) {
	m.data_type = &et
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *EventMutation) DataType() (r event.DataType, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDataType(ctx context.Context) (v event.DataType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *EventMutation) ResetDataType() {
	m.data_type = nil
}

// SetNotifyTime sets the "notify_time" field.
func (m *EventMutation) SetNotifyTime(t time.Time) {
	m.notify_time = &t
}

// NotifyTime returns the value of the "notify_time" field in the mutation.
func (m *EventMutation) NotifyTime() (r time.Time, exists bool) {
	v := m.notify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifyTime returns the old "notify_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldNotifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifyTime: %w", err)
	}
	return oldValue.NotifyTime, nil
}

// ResetNotifyTime resets all changes to the "notify_time" field.
func (m *EventMutation) ResetNotifyTime() {
	m.notify_time = nil
}

// SetIsRead sets the "is_read" field.
func (m *EventMutation) SetIsRead(b bool) {
	m.is_read = &b
}

// IsRead returns the value of the "is_read" field in the mutation.
func (m *EventMutation) IsRead() (r bool, exists bool) {
	v := m.is_read
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "is_read" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "is_read" field.
func (m *EventMutation) ResetIsRead() {
	m.is_read = nil
}

// SetEventListenerID sets the "event_listener" edge to the EventListener entity by id.
func (m *EventMutation) SetEventListenerID(id int) {
	m.event_listener = &id
}

// ClearEventListener clears the "event_listener" edge to the EventListener entity.
func (m *EventMutation) ClearEventListener() {
	m.clearedevent_listener = true
}

// EventListenerCleared reports if the "event_listener" edge to the EventListener entity was cleared.
func (m *EventMutation) EventListenerCleared() bool {
	return m.clearedevent_listener
}

// EventListenerID returns the "event_listener" edge ID in the mutation.
func (m *EventMutation) EventListenerID() (id int, exists bool) {
	if m.event_listener != nil {
		return *m.event_listener, true
	}
	return
}

// EventListenerIDs returns the "event_listener" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventListenerID instead. It exists only for internal usage by the builders.
func (m *EventMutation) EventListenerIDs() (ids []int) {
	if id := m.event_listener; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEventListener resets all changes to the "event_listener" edge.
func (m *EventMutation) ResetEventListener() {
	m.event_listener = nil
	m.clearedevent_listener = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.create_time != nil {
		fields = append(fields, event.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, event.FieldUpdateTime)
	}
	if m.event_type != nil {
		fields = append(fields, event.FieldEventType)
	}
	if m.chain_event != nil {
		fields = append(fields, event.FieldChainEvent)
	}
	if m.contract_event != nil {
		fields = append(fields, event.FieldContractEvent)
	}
	if m.wallet_event != nil {
		fields = append(fields, event.FieldWalletEvent)
	}
	if m.data_type != nil {
		fields = append(fields, event.FieldDataType)
	}
	if m.notify_time != nil {
		fields = append(fields, event.FieldNotifyTime)
	}
	if m.is_read != nil {
		fields = append(fields, event.FieldIsRead)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldCreateTime:
		return m.CreateTime()
	case event.FieldUpdateTime:
		return m.UpdateTime()
	case event.FieldEventType:
		return m.EventType()
	case event.FieldChainEvent:
		return m.ChainEvent()
	case event.FieldContractEvent:
		return m.ContractEvent()
	case event.FieldWalletEvent:
		return m.WalletEvent()
	case event.FieldDataType:
		return m.DataType()
	case event.FieldNotifyTime:
		return m.NotifyTime()
	case event.FieldIsRead:
		return m.IsRead()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case event.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case event.FieldEventType:
		return m.OldEventType(ctx)
	case event.FieldChainEvent:
		return m.OldChainEvent(ctx)
	case event.FieldContractEvent:
		return m.OldContractEvent(ctx)
	case event.FieldWalletEvent:
		return m.OldWalletEvent(ctx)
	case event.FieldDataType:
		return m.OldDataType(ctx)
	case event.FieldNotifyTime:
		return m.OldNotifyTime(ctx)
	case event.FieldIsRead:
		return m.OldIsRead(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case event.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case event.FieldEventType:
		v, ok := value.(event.EventType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case event.FieldChainEvent:
		v, ok := value.(*schema.ChainEventWithScan)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainEvent(v)
		return nil
	case event.FieldContractEvent:
		v, ok := value.(*schema.ContractEventWithScan)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractEvent(v)
		return nil
	case event.FieldWalletEvent:
		v, ok := value.(*schema.WalletEventWithScan)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletEvent(v)
		return nil
	case event.FieldDataType:
		v, ok := value.(event.DataType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case event.FieldNotifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifyTime(v)
		return nil
	case event.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldChainEvent) {
		fields = append(fields, event.FieldChainEvent)
	}
	if m.FieldCleared(event.FieldContractEvent) {
		fields = append(fields, event.FieldContractEvent)
	}
	if m.FieldCleared(event.FieldWalletEvent) {
		fields = append(fields, event.FieldWalletEvent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldChainEvent:
		m.ClearChainEvent()
		return nil
	case event.FieldContractEvent:
		m.ClearContractEvent()
		return nil
	case event.FieldWalletEvent:
		m.ClearWalletEvent()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case event.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case event.FieldEventType:
		m.ResetEventType()
		return nil
	case event.FieldChainEvent:
		m.ResetChainEvent()
		return nil
	case event.FieldContractEvent:
		m.ResetContractEvent()
		return nil
	case event.FieldWalletEvent:
		m.ResetWalletEvent()
		return nil
	case event.FieldDataType:
		m.ResetDataType()
		return nil
	case event.FieldNotifyTime:
		m.ResetNotifyTime()
		return nil
	case event.FieldIsRead:
		m.ResetIsRead()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event_listener != nil {
		edges = append(edges, event.EdgeEventListener)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeEventListener:
		if id := m.event_listener; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent_listener {
		edges = append(edges, event.EdgeEventListener)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeEventListener:
		return m.clearedevent_listener
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeEventListener:
		m.ClearEventListener()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeEventListener:
		m.ResetEventListener()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// EventListenerMutation represents an operation that mutates the EventListener nodes in the graph.
type EventListenerMutation struct {
	config
	op             Op
	typ            string
	id             *int
	create_time    *time.Time
	update_time    *time.Time
	wallet_address *string
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	chain          *int
	clearedchain   bool
	events         map[uuid.UUID]struct{}
	removedevents  map[uuid.UUID]struct{}
	clearedevents  bool
	done           bool
	oldValue       func(context.Context) (*EventListener, error)
	predicates     []predicate.EventListener
}

var _ ent.Mutation = (*EventListenerMutation)(nil)

// eventlistenerOption allows management of the mutation configuration using functional options.
type eventlistenerOption func(*EventListenerMutation)

// newEventListenerMutation creates new mutation for the EventListener entity.
func newEventListenerMutation(c config, op Op, opts ...eventlistenerOption) *EventListenerMutation {
	m := &EventListenerMutation{
		config:        c,
		op:            op,
		typ:           TypeEventListener,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventListenerID sets the ID field of the mutation.
func withEventListenerID(id int) eventlistenerOption {
	return func(m *EventListenerMutation) {
		var (
			err   error
			once  sync.Once
			value *EventListener
		)
		m.oldValue = func(ctx context.Context) (*EventListener, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventListener.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventListener sets the old EventListener of the mutation.
func withEventListener(node *EventListener) eventlistenerOption {
	return func(m *EventListenerMutation) {
		m.oldValue = func(context.Context) (*EventListener, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventListenerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventListenerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventListenerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventListenerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventListener.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *EventListenerMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EventListenerMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the EventListener entity.
// If the EventListener object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventListenerMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EventListenerMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *EventListenerMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *EventListenerMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the EventListener entity.
// If the EventListener object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventListenerMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *EventListenerMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetWalletAddress sets the "wallet_address" field.
func (m *EventListenerMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *EventListenerMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the EventListener entity.
// If the EventListener object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventListenerMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *EventListenerMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *EventListenerMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *EventListenerMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *EventListenerMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *EventListenerMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EventListenerMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EventListenerMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *EventListenerMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *EventListenerMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *EventListenerMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *EventListenerMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *EventListenerMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *EventListenerMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// AddEventIDs adds the "events" edge to the Event entity by ids.
func (m *EventListenerMutation) AddEventIDs(ids ...uuid.UUID) {
	if m.events == nil {
		m.events = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the Event entity.
func (m *EventListenerMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the Event entity was cleared.
func (m *EventListenerMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the Event entity by IDs.
func (m *EventListenerMutation) RemoveEventIDs(ids ...uuid.UUID) {
	if m.removedevents == nil {
		m.removedevents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the Event entity.
func (m *EventListenerMutation) RemovedEventsIDs() (ids []uuid.UUID) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *EventListenerMutation) EventsIDs() (ids []uuid.UUID) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *EventListenerMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// Where appends a list predicates to the EventListenerMutation builder.
func (m *EventListenerMutation) Where(ps ...predicate.EventListener) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventListenerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventListenerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EventListener, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventListenerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventListenerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EventListener).
func (m *EventListenerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventListenerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, eventlistener.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, eventlistener.FieldUpdateTime)
	}
	if m.wallet_address != nil {
		fields = append(fields, eventlistener.FieldWalletAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventListenerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eventlistener.FieldCreateTime:
		return m.CreateTime()
	case eventlistener.FieldUpdateTime:
		return m.UpdateTime()
	case eventlistener.FieldWalletAddress:
		return m.WalletAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventListenerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eventlistener.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case eventlistener.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case eventlistener.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	}
	return nil, fmt.Errorf("unknown EventListener field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventListenerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eventlistener.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case eventlistener.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case eventlistener.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	}
	return fmt.Errorf("unknown EventListener field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventListenerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventListenerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventListenerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EventListener numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventListenerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventListenerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventListenerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventListener nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventListenerMutation) ResetField(name string) error {
	switch name {
	case eventlistener.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case eventlistener.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case eventlistener.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	}
	return fmt.Errorf("unknown EventListener field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventListenerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, eventlistener.EdgeUser)
	}
	if m.chain != nil {
		edges = append(edges, eventlistener.EdgeChain)
	}
	if m.events != nil {
		edges = append(edges, eventlistener.EdgeEvents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventListenerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eventlistener.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case eventlistener.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	case eventlistener.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventListenerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedevents != nil {
		edges = append(edges, eventlistener.EdgeEvents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventListenerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case eventlistener.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventListenerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, eventlistener.EdgeUser)
	}
	if m.clearedchain {
		edges = append(edges, eventlistener.EdgeChain)
	}
	if m.clearedevents {
		edges = append(edges, eventlistener.EdgeEvents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventListenerMutation) EdgeCleared(name string) bool {
	switch name {
	case eventlistener.EdgeUser:
		return m.cleareduser
	case eventlistener.EdgeChain:
		return m.clearedchain
	case eventlistener.EdgeEvents:
		return m.clearedevents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventListenerMutation) ClearEdge(name string) error {
	switch name {
	case eventlistener.EdgeUser:
		m.ClearUser()
		return nil
	case eventlistener.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown EventListener unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventListenerMutation) ResetEdge(name string) error {
	switch name {
	case eventlistener.EdgeUser:
		m.ResetUser()
		return nil
	case eventlistener.EdgeChain:
		m.ResetChain()
		return nil
	case eventlistener.EdgeEvents:
		m.ResetEvents()
		return nil
	}
	return fmt.Errorf("unknown EventListener edge %s", name)
}

// ProposalMutation represents an operation that mutates the Proposal nodes in the graph.
type ProposalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	proposal_id       *uint64
	addproposal_id    *int64
	title             *string
	description       *string
	voting_start_time *time.Time
	voting_end_time   *time.Time
	status            *proposal.Status
	clearedFields     map[string]struct{}
	chain             *int
	clearedchain      bool
	done              bool
	oldValue          func(context.Context) (*Proposal, error)
	predicates        []predicate.Proposal
}

var _ ent.Mutation = (*ProposalMutation)(nil)

// proposalOption allows management of the mutation configuration using functional options.
type proposalOption func(*ProposalMutation)

// newProposalMutation creates new mutation for the Proposal entity.
func newProposalMutation(c config, op Op, opts ...proposalOption) *ProposalMutation {
	m := &ProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProposalID sets the ID field of the mutation.
func withProposalID(id int) proposalOption {
	return func(m *ProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *Proposal
		)
		m.oldValue = func(ctx context.Context) (*Proposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProposal sets the old Proposal of the mutation.
func withProposal(node *Proposal) proposalOption {
	return func(m *ProposalMutation) {
		m.oldValue = func(context.Context) (*Proposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ProposalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProposalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProposalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProposalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProposalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProposalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetProposalID sets the "proposal_id" field.
func (m *ProposalMutation) SetProposalID(u uint64) {
	m.proposal_id = &u
	m.addproposal_id = nil
}

// ProposalID returns the value of the "proposal_id" field in the mutation.
func (m *ProposalMutation) ProposalID() (r uint64, exists bool) {
	v := m.proposal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProposalID returns the old "proposal_id" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldProposalID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProposalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProposalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProposalID: %w", err)
	}
	return oldValue.ProposalID, nil
}

// AddProposalID adds u to the "proposal_id" field.
func (m *ProposalMutation) AddProposalID(u int64) {
	if m.addproposal_id != nil {
		*m.addproposal_id += u
	} else {
		m.addproposal_id = &u
	}
}

// AddedProposalID returns the value that was added to the "proposal_id" field in this mutation.
func (m *ProposalMutation) AddedProposalID() (r int64, exists bool) {
	v := m.addproposal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProposalID resets all changes to the "proposal_id" field.
func (m *ProposalMutation) ResetProposalID() {
	m.proposal_id = nil
	m.addproposal_id = nil
}

// SetTitle sets the "title" field.
func (m *ProposalMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProposalMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProposalMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ProposalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProposalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProposalMutation) ResetDescription() {
	m.description = nil
}

// SetVotingStartTime sets the "voting_start_time" field.
func (m *ProposalMutation) SetVotingStartTime(t time.Time) {
	m.voting_start_time = &t
}

// VotingStartTime returns the value of the "voting_start_time" field in the mutation.
func (m *ProposalMutation) VotingStartTime() (r time.Time, exists bool) {
	v := m.voting_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingStartTime returns the old "voting_start_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldVotingStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingStartTime: %w", err)
	}
	return oldValue.VotingStartTime, nil
}

// ResetVotingStartTime resets all changes to the "voting_start_time" field.
func (m *ProposalMutation) ResetVotingStartTime() {
	m.voting_start_time = nil
}

// SetVotingEndTime sets the "voting_end_time" field.
func (m *ProposalMutation) SetVotingEndTime(t time.Time) {
	m.voting_end_time = &t
}

// VotingEndTime returns the value of the "voting_end_time" field in the mutation.
func (m *ProposalMutation) VotingEndTime() (r time.Time, exists bool) {
	v := m.voting_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldVotingEndTime returns the old "voting_end_time" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldVotingEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVotingEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVotingEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVotingEndTime: %w", err)
	}
	return oldValue.VotingEndTime, nil
}

// ResetVotingEndTime resets all changes to the "voting_end_time" field.
func (m *ProposalMutation) ResetVotingEndTime() {
	m.voting_end_time = nil
}

// SetStatus sets the "status" field.
func (m *ProposalMutation) SetStatus(pr proposal.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProposalMutation) Status() (r proposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldStatus(ctx context.Context) (v proposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProposalMutation) ResetStatus() {
	m.status = nil
}

// SetChainID sets the "chain" edge to the Chain entity by id.
func (m *ProposalMutation) SetChainID(id int) {
	m.chain = &id
}

// ClearChain clears the "chain" edge to the Chain entity.
func (m *ProposalMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the Chain entity was cleared.
func (m *ProposalMutation) ChainCleared() bool {
	return m.clearedchain
}

// ChainID returns the "chain" edge ID in the mutation.
func (m *ProposalMutation) ChainID() (id int, exists bool) {
	if m.chain != nil {
		return *m.chain, true
	}
	return
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *ProposalMutation) ChainIDs() (ids []int) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *ProposalMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the ProposalMutation builder.
func (m *ProposalMutation) Where(ps ...predicate.Proposal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProposalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProposalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Proposal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProposalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProposalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Proposal).
func (m *ProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProposalMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, proposal.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, proposal.FieldUpdateTime)
	}
	if m.proposal_id != nil {
		fields = append(fields, proposal.FieldProposalID)
	}
	if m.title != nil {
		fields = append(fields, proposal.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, proposal.FieldDescription)
	}
	if m.voting_start_time != nil {
		fields = append(fields, proposal.FieldVotingStartTime)
	}
	if m.voting_end_time != nil {
		fields = append(fields, proposal.FieldVotingEndTime)
	}
	if m.status != nil {
		fields = append(fields, proposal.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldCreateTime:
		return m.CreateTime()
	case proposal.FieldUpdateTime:
		return m.UpdateTime()
	case proposal.FieldProposalID:
		return m.ProposalID()
	case proposal.FieldTitle:
		return m.Title()
	case proposal.FieldDescription:
		return m.Description()
	case proposal.FieldVotingStartTime:
		return m.VotingStartTime()
	case proposal.FieldVotingEndTime:
		return m.VotingEndTime()
	case proposal.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proposal.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case proposal.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case proposal.FieldProposalID:
		return m.OldProposalID(ctx)
	case proposal.FieldTitle:
		return m.OldTitle(ctx)
	case proposal.FieldDescription:
		return m.OldDescription(ctx)
	case proposal.FieldVotingStartTime:
		return m.OldVotingStartTime(ctx)
	case proposal.FieldVotingEndTime:
		return m.OldVotingEndTime(ctx)
	case proposal.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Proposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case proposal.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case proposal.FieldProposalID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProposalID(v)
		return nil
	case proposal.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case proposal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case proposal.FieldVotingStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingStartTime(v)
		return nil
	case proposal.FieldVotingEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVotingEndTime(v)
		return nil
	case proposal.FieldStatus:
		v, ok := value.(proposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProposalMutation) AddedFields() []string {
	var fields []string
	if m.addproposal_id != nil {
		fields = append(fields, proposal.FieldProposalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldProposalID:
		return m.AddedProposalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldProposalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProposalID(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProposalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProposalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Proposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProposalMutation) ResetField(name string) error {
	switch name {
	case proposal.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case proposal.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case proposal.FieldProposalID:
		m.ResetProposalID()
		return nil
	case proposal.FieldTitle:
		m.ResetTitle()
		return nil
	case proposal.FieldDescription:
		m.ResetDescription()
		return nil
	case proposal.FieldVotingStartTime:
		m.ResetVotingStartTime()
		return nil
	case proposal.FieldVotingEndTime:
		m.ResetVotingEndTime()
		return nil
	case proposal.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, proposal.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proposal.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProposalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, proposal.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case proposal.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProposalMutation) ClearEdge(name string) error {
	switch name {
	case proposal.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown Proposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProposalMutation) ResetEdge(name string) error {
	switch name {
	case proposal.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown Proposal edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	create_time            *time.Time
	update_time            *time.Time
	name                   *string
	wallet_address         *string
	role                   *user.Role
	clearedFields          map[string]struct{}
	event_listeners        map[int]struct{}
	removedevent_listeners map[int]struct{}
	clearedevent_listeners bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetWalletAddress sets the "wallet_address" field.
func (m *UserMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *UserMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *UserMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by ids.
func (m *UserMutation) AddEventListenerIDs(ids ...int) {
	if m.event_listeners == nil {
		m.event_listeners = make(map[int]struct{})
	}
	for i := range ids {
		m.event_listeners[ids[i]] = struct{}{}
	}
}

// ClearEventListeners clears the "event_listeners" edge to the EventListener entity.
func (m *UserMutation) ClearEventListeners() {
	m.clearedevent_listeners = true
}

// EventListenersCleared reports if the "event_listeners" edge to the EventListener entity was cleared.
func (m *UserMutation) EventListenersCleared() bool {
	return m.clearedevent_listeners
}

// RemoveEventListenerIDs removes the "event_listeners" edge to the EventListener entity by IDs.
func (m *UserMutation) RemoveEventListenerIDs(ids ...int) {
	if m.removedevent_listeners == nil {
		m.removedevent_listeners = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.event_listeners, ids[i])
		m.removedevent_listeners[ids[i]] = struct{}{}
	}
}

// RemovedEventListeners returns the removed IDs of the "event_listeners" edge to the EventListener entity.
func (m *UserMutation) RemovedEventListenersIDs() (ids []int) {
	for id := range m.removedevent_listeners {
		ids = append(ids, id)
	}
	return
}

// EventListenersIDs returns the "event_listeners" edge IDs in the mutation.
func (m *UserMutation) EventListenersIDs() (ids []int) {
	for id := range m.event_listeners {
		ids = append(ids, id)
	}
	return
}

// ResetEventListeners resets all changes to the "event_listeners" edge.
func (m *UserMutation) ResetEventListeners() {
	m.event_listeners = nil
	m.clearedevent_listeners = false
	m.removedevent_listeners = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.wallet_address != nil {
		fields = append(fields, user.FieldWalletAddress)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldName:
		return m.Name()
	case user.FieldWalletAddress:
		return m.WalletAddress()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event_listeners != nil {
		edges = append(edges, user.EdgeEventListeners)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEventListeners:
		ids := make([]ent.Value, 0, len(m.event_listeners))
		for id := range m.event_listeners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedevent_listeners != nil {
		edges = append(edges, user.EdgeEventListeners)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEventListeners:
		ids := make([]ent.Value, 0, len(m.removedevent_listeners))
		for id := range m.removedevent_listeners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent_listeners {
		edges = append(edges, user.EdgeEventListeners)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeEventListeners:
		return m.clearedevent_listeners
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeEventListeners:
		m.ResetEventListeners()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
