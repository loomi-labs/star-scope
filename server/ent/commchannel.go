// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/star-scope/ent/commchannel"
)

// CommChannel is the model entity for the CommChannel schema.
type CommChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type commchannel.Type `json:"type,omitempty"`
	// TelegramChatID holds the value of the "telegram_chat_id" field.
	TelegramChatID int64 `json:"telegram_chat_id,omitempty"`
	// DiscordChannelID holds the value of the "discord_channel_id" field.
	DiscordChannelID int64 `json:"discord_channel_id,omitempty"`
	// IsGroup holds the value of the "is_group" field.
	IsGroup bool `json:"is_group,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommChannelQuery when eager-loading is set.
	Edges        CommChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommChannelEdges holds the relations/edges for other nodes in the graph.
type CommChannelEdges struct {
	// EventListeners holds the value of the event_listeners edge.
	EventListeners []*EventListener `json:"event_listeners,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventListenersOrErr returns the EventListeners value or an error if the edge
// was not loaded in eager-loading.
func (e CommChannelEdges) EventListenersOrErr() ([]*EventListener, error) {
	if e.loadedTypes[0] {
		return e.EventListeners, nil
	}
	return nil, &NotLoadedError{edge: "event_listeners"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CommChannelEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commchannel.FieldIsGroup:
			values[i] = new(sql.NullBool)
		case commchannel.FieldID, commchannel.FieldTelegramChatID, commchannel.FieldDiscordChannelID:
			values[i] = new(sql.NullInt64)
		case commchannel.FieldName, commchannel.FieldType:
			values[i] = new(sql.NullString)
		case commchannel.FieldCreateTime, commchannel.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommChannel fields.
func (cc *CommChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commchannel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = int(value.Int64)
		case commchannel.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cc.CreateTime = value.Time
			}
		case commchannel.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cc.UpdateTime = value.Time
			}
		case commchannel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case commchannel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cc.Type = commchannel.Type(value.String)
			}
		case commchannel.FieldTelegramChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telegram_chat_id", values[i])
			} else if value.Valid {
				cc.TelegramChatID = value.Int64
			}
		case commchannel.FieldDiscordChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discord_channel_id", values[i])
			} else if value.Valid {
				cc.DiscordChannelID = value.Int64
			}
		case commchannel.FieldIsGroup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_group", values[i])
			} else if value.Valid {
				cc.IsGroup = value.Bool
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommChannel.
// This includes values selected through modifiers, order, etc.
func (cc *CommChannel) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryEventListeners queries the "event_listeners" edge of the CommChannel entity.
func (cc *CommChannel) QueryEventListeners() *EventListenerQuery {
	return NewCommChannelClient(cc.config).QueryEventListeners(cc)
}

// QueryUsers queries the "users" edge of the CommChannel entity.
func (cc *CommChannel) QueryUsers() *UserQuery {
	return NewCommChannelClient(cc.config).QueryUsers(cc)
}

// Update returns a builder for updating this CommChannel.
// Note that you need to call CommChannel.Unwrap() before calling this method if this CommChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CommChannel) Update() *CommChannelUpdateOne {
	return NewCommChannelClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CommChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CommChannel) Unwrap() *CommChannel {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommChannel is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CommChannel) String() string {
	var builder strings.Builder
	builder.WriteString("CommChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(cc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cc.Type))
	builder.WriteString(", ")
	builder.WriteString("telegram_chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.TelegramChatID))
	builder.WriteString(", ")
	builder.WriteString("discord_channel_id=")
	builder.WriteString(fmt.Sprintf("%v", cc.DiscordChannelID))
	builder.WriteString(", ")
	builder.WriteString("is_group=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsGroup))
	builder.WriteByte(')')
	return builder.String()
}

// CommChannels is a parsable slice of CommChannel.
type CommChannels []*CommChannel
