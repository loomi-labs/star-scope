// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/star-scope/ent/user"
	"github.com/loomi-labs/star-scope/ent/usersetup"
)

// UserSetup is the model entity for the UserSetup schema.
type UserSetup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Step holds the value of the "step" field.
	Step usersetup.Step `json:"step,omitempty"`
	// IsValidator holds the value of the "is_validator" field.
	IsValidator bool `json:"is_validator,omitempty"`
	// WalletAddresses holds the value of the "wallet_addresses" field.
	WalletAddresses []string `json:"wallet_addresses,omitempty"`
	// NotifyFunding holds the value of the "notify_funding" field.
	NotifyFunding bool `json:"notify_funding,omitempty"`
	// NotifyStaking holds the value of the "notify_staking" field.
	NotifyStaking bool `json:"notify_staking,omitempty"`
	// NotifyGovNewProposal holds the value of the "notify_gov_new_proposal" field.
	NotifyGovNewProposal bool `json:"notify_gov_new_proposal,omitempty"`
	// NotifyGovVotingEnd holds the value of the "notify_gov_voting_end" field.
	NotifyGovVotingEnd bool `json:"notify_gov_voting_end,omitempty"`
	// NotifyGovVotingReminder holds the value of the "notify_gov_voting_reminder" field.
	NotifyGovVotingReminder bool `json:"notify_gov_voting_reminder,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSetupQuery when eager-loading is set.
	Edges        UserSetupEdges `json:"edges"`
	user_setup   *int
	selectValues sql.SelectValues
}

// UserSetupEdges holds the relations/edges for other nodes in the graph.
type UserSetupEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// SelectedValidators holds the value of the selected_validators edge.
	SelectedValidators []*Validator `json:"selected_validators,omitempty"`
	// SelectedChains holds the value of the selected_chains edge.
	SelectedChains []*Chain `json:"selected_chains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSetupEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SelectedValidatorsOrErr returns the SelectedValidators value or an error if the edge
// was not loaded in eager-loading.
func (e UserSetupEdges) SelectedValidatorsOrErr() ([]*Validator, error) {
	if e.loadedTypes[1] {
		return e.SelectedValidators, nil
	}
	return nil, &NotLoadedError{edge: "selected_validators"}
}

// SelectedChainsOrErr returns the SelectedChains value or an error if the edge
// was not loaded in eager-loading.
func (e UserSetupEdges) SelectedChainsOrErr() ([]*Chain, error) {
	if e.loadedTypes[2] {
		return e.SelectedChains, nil
	}
	return nil, &NotLoadedError{edge: "selected_chains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSetup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersetup.FieldWalletAddresses:
			values[i] = new([]byte)
		case usersetup.FieldIsValidator, usersetup.FieldNotifyFunding, usersetup.FieldNotifyStaking, usersetup.FieldNotifyGovNewProposal, usersetup.FieldNotifyGovVotingEnd, usersetup.FieldNotifyGovVotingReminder:
			values[i] = new(sql.NullBool)
		case usersetup.FieldID:
			values[i] = new(sql.NullInt64)
		case usersetup.FieldStep:
			values[i] = new(sql.NullString)
		case usersetup.FieldCreateTime, usersetup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case usersetup.ForeignKeys[0]: // user_setup
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSetup fields.
func (us *UserSetup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersetup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case usersetup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				us.CreateTime = value.Time
			}
		case usersetup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				us.UpdateTime = value.Time
			}
		case usersetup.FieldStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				us.Step = usersetup.Step(value.String)
			}
		case usersetup.FieldIsValidator:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_validator", values[i])
			} else if value.Valid {
				us.IsValidator = value.Bool
			}
		case usersetup.FieldWalletAddresses:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_addresses", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &us.WalletAddresses); err != nil {
					return fmt.Errorf("unmarshal field wallet_addresses: %w", err)
				}
			}
		case usersetup.FieldNotifyFunding:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_funding", values[i])
			} else if value.Valid {
				us.NotifyFunding = value.Bool
			}
		case usersetup.FieldNotifyStaking:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_staking", values[i])
			} else if value.Valid {
				us.NotifyStaking = value.Bool
			}
		case usersetup.FieldNotifyGovNewProposal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_gov_new_proposal", values[i])
			} else if value.Valid {
				us.NotifyGovNewProposal = value.Bool
			}
		case usersetup.FieldNotifyGovVotingEnd:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_gov_voting_end", values[i])
			} else if value.Valid {
				us.NotifyGovVotingEnd = value.Bool
			}
		case usersetup.FieldNotifyGovVotingReminder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_gov_voting_reminder", values[i])
			} else if value.Valid {
				us.NotifyGovVotingReminder = value.Bool
			}
		case usersetup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_setup", value)
			} else if value.Valid {
				us.user_setup = new(int)
				*us.user_setup = int(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSetup.
// This includes values selected through modifiers, order, etc.
func (us *UserSetup) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserSetup entity.
func (us *UserSetup) QueryUser() *UserQuery {
	return NewUserSetupClient(us.config).QueryUser(us)
}

// QuerySelectedValidators queries the "selected_validators" edge of the UserSetup entity.
func (us *UserSetup) QuerySelectedValidators() *ValidatorQuery {
	return NewUserSetupClient(us.config).QuerySelectedValidators(us)
}

// QuerySelectedChains queries the "selected_chains" edge of the UserSetup entity.
func (us *UserSetup) QuerySelectedChains() *ChainQuery {
	return NewUserSetupClient(us.config).QuerySelectedChains(us)
}

// Update returns a builder for updating this UserSetup.
// Note that you need to call UserSetup.Unwrap() before calling this method if this UserSetup
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSetup) Update() *UserSetupUpdateOne {
	return NewUserSetupClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSetup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSetup) Unwrap() *UserSetup {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSetup is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSetup) String() string {
	var builder strings.Builder
	builder.WriteString("UserSetup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("create_time=")
	builder.WriteString(us.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(us.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", us.Step))
	builder.WriteString(", ")
	builder.WriteString("is_validator=")
	builder.WriteString(fmt.Sprintf("%v", us.IsValidator))
	builder.WriteString(", ")
	builder.WriteString("wallet_addresses=")
	builder.WriteString(fmt.Sprintf("%v", us.WalletAddresses))
	builder.WriteString(", ")
	builder.WriteString("notify_funding=")
	builder.WriteString(fmt.Sprintf("%v", us.NotifyFunding))
	builder.WriteString(", ")
	builder.WriteString("notify_staking=")
	builder.WriteString(fmt.Sprintf("%v", us.NotifyStaking))
	builder.WriteString(", ")
	builder.WriteString("notify_gov_new_proposal=")
	builder.WriteString(fmt.Sprintf("%v", us.NotifyGovNewProposal))
	builder.WriteString(", ")
	builder.WriteString("notify_gov_voting_end=")
	builder.WriteString(fmt.Sprintf("%v", us.NotifyGovVotingEnd))
	builder.WriteString(", ")
	builder.WriteString("notify_gov_voting_reminder=")
	builder.WriteString(fmt.Sprintf("%v", us.NotifyGovVotingReminder))
	builder.WriteByte(')')
	return builder.String()
}

// UserSetups is a parsable slice of UserSetup.
type UserSetups []*UserSetup
