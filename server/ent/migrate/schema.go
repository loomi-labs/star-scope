// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChainsColumns holds the columns for the "chains" table.
	ChainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "chain_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "pretty_name", Type: field.TypeString, Unique: true},
		{Name: "path", Type: field.TypeString, Unique: true},
		{Name: "image", Type: field.TypeString},
		{Name: "bech32_prefix", Type: field.TypeString},
		{Name: "rest_endpoint", Type: field.TypeString, Default: ""},
		{Name: "indexing_height", Type: field.TypeUint64, Default: 0},
		{Name: "has_custom_indexer", Type: field.TypeBool, Default: false},
		{Name: "handled_message_types", Type: field.TypeString, Default: ""},
		{Name: "unhandled_message_types", Type: field.TypeString, Default: ""},
		{Name: "is_enabled", Type: field.TypeBool, Default: false},
	}
	// ChainsTable holds the schema information for the "chains" table.
	ChainsTable = &schema.Table{
		Name:       "chains",
		Columns:    ChainsColumns,
		PrimaryKey: []*schema.Column{ChainsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "chain_name",
				Unique:  true,
				Columns: []*schema.Column{ChainsColumns[4]},
			},
		},
	}
	// ContractProposalsColumns holds the columns for the "contract_proposals" table.
	ContractProposalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "proposal_id", Type: field.TypeUint64},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "first_seen_time", Type: field.TypeTime},
		{Name: "voting_end_time", Type: field.TypeTime},
		{Name: "contract_address", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"OPEN", "REJECTED", "PASSED", "EXECUTED", "CLOSED", "EXECUTION_FAILED"}},
		{Name: "chain_contract_proposals", Type: field.TypeInt, Nullable: true},
	}
	// ContractProposalsTable holds the schema information for the "contract_proposals" table.
	ContractProposalsTable = &schema.Table{
		Name:       "contract_proposals",
		Columns:    ContractProposalsColumns,
		PrimaryKey: []*schema.Column{ContractProposalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contract_proposals_chains_contract_proposals",
				Columns:    []*schema.Column{ContractProposalsColumns[10]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "event_type", Type: field.TypeEnum, Enums: []string{"STAKING", "DEX", "GOVERNANCE", "FUNDING"}},
		{Name: "chain_event", Type: field.TypeBytes, Nullable: true},
		{Name: "contract_event", Type: field.TypeBytes, Nullable: true},
		{Name: "wallet_event", Type: field.TypeBytes, Nullable: true},
		{Name: "data_type", Type: field.TypeEnum, Enums: []string{"WalletEvent_CoinReceived", "WalletEvent_OsmosisPoolUnlock", "WalletEvent_Unstake", "WalletEvent_NeutronTokenVesting", "ChainEvent_GovernanceProposal_Ongoing", "ChainEvent_GovernanceProposal_Finished"}},
		{Name: "notify_time", Type: field.TypeTime},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "event_listener_events", Type: field.TypeInt, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_event_listeners_events",
				Columns:    []*schema.Column{EventsColumns[10]},
				RefColumns: []*schema.Column{EventListenersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EventListenersColumns holds the columns for the "event_listeners" table.
	EventListenersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "wallet_address", Type: field.TypeString},
		{Name: "chain_event_listeners", Type: field.TypeInt, Nullable: true},
		{Name: "user_event_listeners", Type: field.TypeInt, Nullable: true},
	}
	// EventListenersTable holds the schema information for the "event_listeners" table.
	EventListenersTable = &schema.Table{
		Name:       "event_listeners",
		Columns:    EventListenersColumns,
		PrimaryKey: []*schema.Column{EventListenersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_listeners_chains_event_listeners",
				Columns:    []*schema.Column{EventListenersColumns[4]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "event_listeners_users_event_listeners",
				Columns:    []*schema.Column{EventListenersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProposalsColumns holds the columns for the "proposals" table.
	ProposalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "proposal_id", Type: field.TypeUint64},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "voting_start_time", Type: field.TypeTime},
		{Name: "voting_end_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PROPOSAL_STATUS_PASSED", "PROPOSAL_STATUS_REJECTED", "PROPOSAL_STATUS_FAILED", "PROPOSAL_STATUS_UNSPECIFIED", "PROPOSAL_STATUS_DEPOSIT_PERIOD", "PROPOSAL_STATUS_VOTING_PERIOD"}},
		{Name: "chain_proposals", Type: field.TypeInt, Nullable: true},
	}
	// ProposalsTable holds the schema information for the "proposals" table.
	ProposalsTable = &schema.Table{
		Name:       "proposals",
		Columns:    ProposalsColumns,
		PrimaryKey: []*schema.Column{ProposalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "proposals_chains_proposals",
				Columns:    []*schema.Column{ProposalsColumns[9]},
				RefColumns: []*schema.Column{ChainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "wallet_address", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChainsTable,
		ContractProposalsTable,
		EventsTable,
		EventListenersTable,
		ProposalsTable,
		UsersTable,
	}
)

func init() {
	ContractProposalsTable.ForeignKeys[0].RefTable = ChainsTable
	EventsTable.ForeignKeys[0].RefTable = EventListenersTable
	EventListenersTable.ForeignKeys[0].RefTable = ChainsTable
	EventListenersTable.ForeignKeys[1].RefTable = UsersTable
	ProposalsTable.ForeignKeys[0].RefTable = ChainsTable
}
