// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/star-scope/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// TelegramUserID holds the value of the "telegram_user_id" field.
	TelegramUserID int64 `json:"telegram_user_id,omitempty"`
	// TelegramUsername holds the value of the "telegram_username" field.
	TelegramUsername string `json:"telegram_username,omitempty"`
	// DiscordUserID holds the value of the "discord_user_id" field.
	DiscordUserID int64 `json:"discord_user_id,omitempty"`
	// DiscordUsername holds the value of the "discord_username" field.
	DiscordUsername string `json:"discord_username,omitempty"`
	// WalletAddress holds the value of the "wallet_address" field.
	WalletAddress string `json:"wallet_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// EventListeners holds the value of the event_listeners edge.
	EventListeners []*EventListener `json:"event_listeners,omitempty"`
	// CommChannels holds the value of the comm_channels edge.
	CommChannels []*CommChannel `json:"comm_channels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventListenersOrErr returns the EventListeners value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EventListenersOrErr() ([]*EventListener, error) {
	if e.loadedTypes[0] {
		return e.EventListeners, nil
	}
	return nil, &NotLoadedError{edge: "event_listeners"}
}

// CommChannelsOrErr returns the CommChannels value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CommChannelsOrErr() ([]*CommChannel, error) {
	if e.loadedTypes[1] {
		return e.CommChannels, nil
	}
	return nil, &NotLoadedError{edge: "comm_channels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldTelegramUserID, user.FieldDiscordUserID:
			values[i] = new(sql.NullInt64)
		case user.FieldRole, user.FieldTelegramUsername, user.FieldDiscordUsername, user.FieldWalletAddress:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = user.Role(value.String)
			}
		case user.FieldTelegramUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telegram_user_id", values[i])
			} else if value.Valid {
				u.TelegramUserID = value.Int64
			}
		case user.FieldTelegramUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telegram_username", values[i])
			} else if value.Valid {
				u.TelegramUsername = value.String
			}
		case user.FieldDiscordUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discord_user_id", values[i])
			} else if value.Valid {
				u.DiscordUserID = value.Int64
			}
		case user.FieldDiscordUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_username", values[i])
			} else if value.Valid {
				u.DiscordUsername = value.String
			}
		case user.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				u.WalletAddress = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryEventListeners queries the "event_listeners" edge of the User entity.
func (u *User) QueryEventListeners() *EventListenerQuery {
	return NewUserClient(u.config).QueryEventListeners(u)
}

// QueryCommChannels queries the "comm_channels" edge of the User entity.
func (u *User) QueryCommChannels() *CommChannelQuery {
	return NewUserClient(u.config).QueryCommChannels(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("telegram_user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TelegramUserID))
	builder.WriteString(", ")
	builder.WriteString("telegram_username=")
	builder.WriteString(u.TelegramUsername)
	builder.WriteString(", ")
	builder.WriteString("discord_user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.DiscordUserID))
	builder.WriteString(", ")
	builder.WriteString("discord_username=")
	builder.WriteString(u.DiscordUsername)
	builder.WriteString(", ")
	builder.WriteString("wallet_address=")
	builder.WriteString(u.WalletAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
