// Code generated by ent, DO NOT EDIT.

package usersetup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldUpdateTime, v))
}

// IsValidator applies equality check predicate on the "is_validator" field. It's identical to IsValidatorEQ.
func IsValidator(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldIsValidator, v))
}

// NotifyFunding applies equality check predicate on the "notify_funding" field. It's identical to NotifyFundingEQ.
func NotifyFunding(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyFunding, v))
}

// NotifyStaking applies equality check predicate on the "notify_staking" field. It's identical to NotifyStakingEQ.
func NotifyStaking(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyStaking, v))
}

// NotifyGovNewProposal applies equality check predicate on the "notify_gov_new_proposal" field. It's identical to NotifyGovNewProposalEQ.
func NotifyGovNewProposal(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovNewProposal, v))
}

// NotifyGovVotingEnd applies equality check predicate on the "notify_gov_voting_end" field. It's identical to NotifyGovVotingEndEQ.
func NotifyGovVotingEnd(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovVotingEnd, v))
}

// NotifyGovVotingReminder applies equality check predicate on the "notify_gov_voting_reminder" field. It's identical to NotifyGovVotingReminderEQ.
func NotifyGovVotingReminder(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovVotingReminder, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldLTE(FieldUpdateTime, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v Step) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v Step) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...Step) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...Step) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNotIn(FieldStep, vs...))
}

// IsValidatorEQ applies the EQ predicate on the "is_validator" field.
func IsValidatorEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldIsValidator, v))
}

// IsValidatorNEQ applies the NEQ predicate on the "is_validator" field.
func IsValidatorNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldIsValidator, v))
}

// WalletAddressesIsNil applies the IsNil predicate on the "wallet_addresses" field.
func WalletAddressesIsNil() predicate.UserSetup {
	return predicate.UserSetup(sql.FieldIsNull(FieldWalletAddresses))
}

// WalletAddressesNotNil applies the NotNil predicate on the "wallet_addresses" field.
func WalletAddressesNotNil() predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNotNull(FieldWalletAddresses))
}

// NotifyFundingEQ applies the EQ predicate on the "notify_funding" field.
func NotifyFundingEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyFunding, v))
}

// NotifyFundingNEQ applies the NEQ predicate on the "notify_funding" field.
func NotifyFundingNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldNotifyFunding, v))
}

// NotifyStakingEQ applies the EQ predicate on the "notify_staking" field.
func NotifyStakingEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyStaking, v))
}

// NotifyStakingNEQ applies the NEQ predicate on the "notify_staking" field.
func NotifyStakingNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldNotifyStaking, v))
}

// NotifyGovNewProposalEQ applies the EQ predicate on the "notify_gov_new_proposal" field.
func NotifyGovNewProposalEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovNewProposal, v))
}

// NotifyGovNewProposalNEQ applies the NEQ predicate on the "notify_gov_new_proposal" field.
func NotifyGovNewProposalNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldNotifyGovNewProposal, v))
}

// NotifyGovVotingEndEQ applies the EQ predicate on the "notify_gov_voting_end" field.
func NotifyGovVotingEndEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovVotingEnd, v))
}

// NotifyGovVotingEndNEQ applies the NEQ predicate on the "notify_gov_voting_end" field.
func NotifyGovVotingEndNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldNotifyGovVotingEnd, v))
}

// NotifyGovVotingReminderEQ applies the EQ predicate on the "notify_gov_voting_reminder" field.
func NotifyGovVotingReminderEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldEQ(FieldNotifyGovVotingReminder, v))
}

// NotifyGovVotingReminderNEQ applies the NEQ predicate on the "notify_gov_voting_reminder" field.
func NotifyGovVotingReminderNEQ(v bool) predicate.UserSetup {
	return predicate.UserSetup(sql.FieldNEQ(FieldNotifyGovVotingReminder, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedValidators applies the HasEdge predicate on the "selected_validators" edge.
func HasSelectedValidators() predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SelectedValidatorsTable, SelectedValidatorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedValidatorsWith applies the HasEdge predicate on the "selected_validators" edge with a given conditions (other predicates).
func HasSelectedValidatorsWith(preds ...predicate.Validator) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := newSelectedValidatorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedChains applies the HasEdge predicate on the "selected_chains" edge.
func HasSelectedChains() predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SelectedChainsTable, SelectedChainsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedChainsWith applies the HasEdge predicate on the "selected_chains" edge with a given conditions (other predicates).
func HasSelectedChainsWith(preds ...predicate.Chain) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		step := newSelectedChainsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSetup) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSetup) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSetup) predicate.UserSetup {
	return predicate.UserSetup(func(s *sql.Selector) {
		p(s.Not())
	})
}
