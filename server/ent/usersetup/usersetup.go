// Code generated by ent, DO NOT EDIT.

package usersetup

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usersetup type in the database.
	Label = "user_setup"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldIsValidator holds the string denoting the is_validator field in the database.
	FieldIsValidator = "is_validator"
	// FieldWalletAddresses holds the string denoting the wallet_addresses field in the database.
	FieldWalletAddresses = "wallet_addresses"
	// FieldNotifyFunding holds the string denoting the notify_funding field in the database.
	FieldNotifyFunding = "notify_funding"
	// FieldNotifyStaking holds the string denoting the notify_staking field in the database.
	FieldNotifyStaking = "notify_staking"
	// FieldNotifyGovNewProposal holds the string denoting the notify_gov_new_proposal field in the database.
	FieldNotifyGovNewProposal = "notify_gov_new_proposal"
	// FieldNotifyGovVotingEnd holds the string denoting the notify_gov_voting_end field in the database.
	FieldNotifyGovVotingEnd = "notify_gov_voting_end"
	// FieldNotifyGovVotingReminder holds the string denoting the notify_gov_voting_reminder field in the database.
	FieldNotifyGovVotingReminder = "notify_gov_voting_reminder"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSelectedValidators holds the string denoting the selected_validators edge name in mutations.
	EdgeSelectedValidators = "selected_validators"
	// EdgeSelectedChains holds the string denoting the selected_chains edge name in mutations.
	EdgeSelectedChains = "selected_chains"
	// Table holds the table name of the usersetup in the database.
	Table = "user_setups"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_setups"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_setup"
	// SelectedValidatorsTable is the table that holds the selected_validators relation/edge.
	SelectedValidatorsTable = "validators"
	// SelectedValidatorsInverseTable is the table name for the Validator entity.
	// It exists in this package in order to avoid circular dependency with the "validator" package.
	SelectedValidatorsInverseTable = "validators"
	// SelectedValidatorsColumn is the table column denoting the selected_validators relation/edge.
	SelectedValidatorsColumn = "user_setup_selected_validators"
	// SelectedChainsTable is the table that holds the selected_chains relation/edge.
	SelectedChainsTable = "chains"
	// SelectedChainsInverseTable is the table name for the Chain entity.
	// It exists in this package in order to avoid circular dependency with the "chain" package.
	SelectedChainsInverseTable = "chains"
	// SelectedChainsColumn is the table column denoting the selected_chains relation/edge.
	SelectedChainsColumn = "user_setup_selected_chains"
)

// Columns holds all SQL columns for usersetup fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStep,
	FieldIsValidator,
	FieldWalletAddresses,
	FieldNotifyFunding,
	FieldNotifyStaking,
	FieldNotifyGovNewProposal,
	FieldNotifyGovVotingEnd,
	FieldNotifyGovVotingReminder,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_setups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_setup",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsValidator holds the default value on creation for the "is_validator" field.
	DefaultIsValidator bool
	// DefaultNotifyFunding holds the default value on creation for the "notify_funding" field.
	DefaultNotifyFunding bool
	// DefaultNotifyStaking holds the default value on creation for the "notify_staking" field.
	DefaultNotifyStaking bool
	// DefaultNotifyGovNewProposal holds the default value on creation for the "notify_gov_new_proposal" field.
	DefaultNotifyGovNewProposal bool
	// DefaultNotifyGovVotingEnd holds the default value on creation for the "notify_gov_voting_end" field.
	DefaultNotifyGovVotingEnd bool
	// DefaultNotifyGovVotingReminder holds the default value on creation for the "notify_gov_voting_reminder" field.
	DefaultNotifyGovVotingReminder bool
)

// Step defines the type for the "step" enum field.
type Step string

// StepOne is the default value of the Step enum.
const DefaultStep = StepOne

// Step values.
const (
	StepOne   Step = "one"
	StepTwo   Step = "two"
	StepThree Step = "three"
	StepFour  Step = "four"
	StepFive  Step = "five"
)

func (s Step) String() string {
	return string(s)
}

// StepValidator is a validator for the "step" field enum values. It is called by the builders before save.
func StepValidator(s Step) error {
	switch s {
	case StepOne, StepTwo, StepThree, StepFour, StepFive:
		return nil
	default:
		return fmt.Errorf("usersetup: invalid enum value for step field: %q", s)
	}
}

// OrderOption defines the ordering options for the UserSetup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStep orders the results by the step field.
func ByStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStep, opts...).ToFunc()
}

// ByIsValidator orders the results by the is_validator field.
func ByIsValidator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsValidator, opts...).ToFunc()
}

// ByNotifyFunding orders the results by the notify_funding field.
func ByNotifyFunding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyFunding, opts...).ToFunc()
}

// ByNotifyStaking orders the results by the notify_staking field.
func ByNotifyStaking(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyStaking, opts...).ToFunc()
}

// ByNotifyGovNewProposal orders the results by the notify_gov_new_proposal field.
func ByNotifyGovNewProposal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyGovNewProposal, opts...).ToFunc()
}

// ByNotifyGovVotingEnd orders the results by the notify_gov_voting_end field.
func ByNotifyGovVotingEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyGovVotingEnd, opts...).ToFunc()
}

// ByNotifyGovVotingReminder orders the results by the notify_gov_voting_reminder field.
func ByNotifyGovVotingReminder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyGovVotingReminder, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// BySelectedValidatorsCount orders the results by selected_validators count.
func BySelectedValidatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSelectedValidatorsStep(), opts...)
	}
}

// BySelectedValidators orders the results by selected_validators terms.
func BySelectedValidators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedValidatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySelectedChainsCount orders the results by selected_chains count.
func BySelectedChainsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSelectedChainsStep(), opts...)
	}
}

// BySelectedChains orders the results by selected_chains terms.
func BySelectedChains(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedChainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newSelectedValidatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedValidatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SelectedValidatorsTable, SelectedValidatorsColumn),
	)
}
func newSelectedChainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedChainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SelectedChainsTable, SelectedChainsColumn),
	)
}
