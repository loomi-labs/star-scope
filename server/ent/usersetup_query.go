// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/chain"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/user"
	"github.com/loomi-labs/star-scope/ent/usersetup"
	"github.com/loomi-labs/star-scope/ent/validator"
)

// UserSetupQuery is the builder for querying UserSetup entities.
type UserSetupQuery struct {
	config
	ctx                    *QueryContext
	order                  []usersetup.OrderOption
	inters                 []Interceptor
	predicates             []predicate.UserSetup
	withUser               *UserQuery
	withSelectedValidators *ValidatorQuery
	withSelectedChains     *ChainQuery
	withFKs                bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserSetupQuery builder.
func (usq *UserSetupQuery) Where(ps ...predicate.UserSetup) *UserSetupQuery {
	usq.predicates = append(usq.predicates, ps...)
	return usq
}

// Limit the number of records to be returned by this query.
func (usq *UserSetupQuery) Limit(limit int) *UserSetupQuery {
	usq.ctx.Limit = &limit
	return usq
}

// Offset to start from.
func (usq *UserSetupQuery) Offset(offset int) *UserSetupQuery {
	usq.ctx.Offset = &offset
	return usq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (usq *UserSetupQuery) Unique(unique bool) *UserSetupQuery {
	usq.ctx.Unique = &unique
	return usq
}

// Order specifies how the records should be ordered.
func (usq *UserSetupQuery) Order(o ...usersetup.OrderOption) *UserSetupQuery {
	usq.order = append(usq.order, o...)
	return usq
}

// QueryUser chains the current query on the "user" edge.
func (usq *UserSetupQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: usq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := usq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := usq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usersetup.Table, usersetup.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, usersetup.UserTable, usersetup.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(usq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedValidators chains the current query on the "selected_validators" edge.
func (usq *UserSetupQuery) QuerySelectedValidators() *ValidatorQuery {
	query := (&ValidatorClient{config: usq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := usq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := usq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usersetup.Table, usersetup.FieldID, selector),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usersetup.SelectedValidatorsTable, usersetup.SelectedValidatorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(usq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedChains chains the current query on the "selected_chains" edge.
func (usq *UserSetupQuery) QuerySelectedChains() *ChainQuery {
	query := (&ChainClient{config: usq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := usq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := usq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usersetup.Table, usersetup.FieldID, selector),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usersetup.SelectedChainsTable, usersetup.SelectedChainsColumn),
		)
		fromU = sqlgraph.SetNeighbors(usq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserSetup entity from the query.
// Returns a *NotFoundError when no UserSetup was found.
func (usq *UserSetupQuery) First(ctx context.Context) (*UserSetup, error) {
	nodes, err := usq.Limit(1).All(setContextOp(ctx, usq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usersetup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (usq *UserSetupQuery) FirstX(ctx context.Context) *UserSetup {
	node, err := usq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserSetup ID from the query.
// Returns a *NotFoundError when no UserSetup ID was found.
func (usq *UserSetupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = usq.Limit(1).IDs(setContextOp(ctx, usq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usersetup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (usq *UserSetupQuery) FirstIDX(ctx context.Context) int {
	id, err := usq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserSetup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserSetup entity is found.
// Returns a *NotFoundError when no UserSetup entities are found.
func (usq *UserSetupQuery) Only(ctx context.Context) (*UserSetup, error) {
	nodes, err := usq.Limit(2).All(setContextOp(ctx, usq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usersetup.Label}
	default:
		return nil, &NotSingularError{usersetup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (usq *UserSetupQuery) OnlyX(ctx context.Context) *UserSetup {
	node, err := usq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserSetup ID in the query.
// Returns a *NotSingularError when more than one UserSetup ID is found.
// Returns a *NotFoundError when no entities are found.
func (usq *UserSetupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = usq.Limit(2).IDs(setContextOp(ctx, usq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usersetup.Label}
	default:
		err = &NotSingularError{usersetup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (usq *UserSetupQuery) OnlyIDX(ctx context.Context) int {
	id, err := usq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserSetups.
func (usq *UserSetupQuery) All(ctx context.Context) ([]*UserSetup, error) {
	ctx = setContextOp(ctx, usq.ctx, "All")
	if err := usq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserSetup, *UserSetupQuery]()
	return withInterceptors[[]*UserSetup](ctx, usq, qr, usq.inters)
}

// AllX is like All, but panics if an error occurs.
func (usq *UserSetupQuery) AllX(ctx context.Context) []*UserSetup {
	nodes, err := usq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserSetup IDs.
func (usq *UserSetupQuery) IDs(ctx context.Context) (ids []int, err error) {
	if usq.ctx.Unique == nil && usq.path != nil {
		usq.Unique(true)
	}
	ctx = setContextOp(ctx, usq.ctx, "IDs")
	if err = usq.Select(usersetup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (usq *UserSetupQuery) IDsX(ctx context.Context) []int {
	ids, err := usq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (usq *UserSetupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, usq.ctx, "Count")
	if err := usq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, usq, querierCount[*UserSetupQuery](), usq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (usq *UserSetupQuery) CountX(ctx context.Context) int {
	count, err := usq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (usq *UserSetupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, usq.ctx, "Exist")
	switch _, err := usq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (usq *UserSetupQuery) ExistX(ctx context.Context) bool {
	exist, err := usq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserSetupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (usq *UserSetupQuery) Clone() *UserSetupQuery {
	if usq == nil {
		return nil
	}
	return &UserSetupQuery{
		config:                 usq.config,
		ctx:                    usq.ctx.Clone(),
		order:                  append([]usersetup.OrderOption{}, usq.order...),
		inters:                 append([]Interceptor{}, usq.inters...),
		predicates:             append([]predicate.UserSetup{}, usq.predicates...),
		withUser:               usq.withUser.Clone(),
		withSelectedValidators: usq.withSelectedValidators.Clone(),
		withSelectedChains:     usq.withSelectedChains.Clone(),
		// clone intermediate query.
		sql:  usq.sql.Clone(),
		path: usq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (usq *UserSetupQuery) WithUser(opts ...func(*UserQuery)) *UserSetupQuery {
	query := (&UserClient{config: usq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	usq.withUser = query
	return usq
}

// WithSelectedValidators tells the query-builder to eager-load the nodes that are connected to
// the "selected_validators" edge. The optional arguments are used to configure the query builder of the edge.
func (usq *UserSetupQuery) WithSelectedValidators(opts ...func(*ValidatorQuery)) *UserSetupQuery {
	query := (&ValidatorClient{config: usq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	usq.withSelectedValidators = query
	return usq
}

// WithSelectedChains tells the query-builder to eager-load the nodes that are connected to
// the "selected_chains" edge. The optional arguments are used to configure the query builder of the edge.
func (usq *UserSetupQuery) WithSelectedChains(opts ...func(*ChainQuery)) *UserSetupQuery {
	query := (&ChainClient{config: usq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	usq.withSelectedChains = query
	return usq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserSetup.Query().
//		GroupBy(usersetup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (usq *UserSetupQuery) GroupBy(field string, fields ...string) *UserSetupGroupBy {
	usq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserSetupGroupBy{build: usq}
	grbuild.flds = &usq.ctx.Fields
	grbuild.label = usersetup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.UserSetup.Query().
//		Select(usersetup.FieldCreateTime).
//		Scan(ctx, &v)
func (usq *UserSetupQuery) Select(fields ...string) *UserSetupSelect {
	usq.ctx.Fields = append(usq.ctx.Fields, fields...)
	sbuild := &UserSetupSelect{UserSetupQuery: usq}
	sbuild.label = usersetup.Label
	sbuild.flds, sbuild.scan = &usq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSetupSelect configured with the given aggregations.
func (usq *UserSetupQuery) Aggregate(fns ...AggregateFunc) *UserSetupSelect {
	return usq.Select().Aggregate(fns...)
}

func (usq *UserSetupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range usq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, usq); err != nil {
				return err
			}
		}
	}
	for _, f := range usq.ctx.Fields {
		if !usersetup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if usq.path != nil {
		prev, err := usq.path(ctx)
		if err != nil {
			return err
		}
		usq.sql = prev
	}
	return nil
}

func (usq *UserSetupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserSetup, error) {
	var (
		nodes       = []*UserSetup{}
		withFKs     = usq.withFKs
		_spec       = usq.querySpec()
		loadedTypes = [3]bool{
			usq.withUser != nil,
			usq.withSelectedValidators != nil,
			usq.withSelectedChains != nil,
		}
	)
	if usq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usersetup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserSetup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserSetup{config: usq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, usq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := usq.withUser; query != nil {
		if err := usq.loadUser(ctx, query, nodes, nil,
			func(n *UserSetup, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := usq.withSelectedValidators; query != nil {
		if err := usq.loadSelectedValidators(ctx, query, nodes,
			func(n *UserSetup) { n.Edges.SelectedValidators = []*Validator{} },
			func(n *UserSetup, e *Validator) { n.Edges.SelectedValidators = append(n.Edges.SelectedValidators, e) }); err != nil {
			return nil, err
		}
	}
	if query := usq.withSelectedChains; query != nil {
		if err := usq.loadSelectedChains(ctx, query, nodes,
			func(n *UserSetup) { n.Edges.SelectedChains = []*Chain{} },
			func(n *UserSetup, e *Chain) { n.Edges.SelectedChains = append(n.Edges.SelectedChains, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (usq *UserSetupQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserSetup, init func(*UserSetup), assign func(*UserSetup, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserSetup)
	for i := range nodes {
		if nodes[i].user_setup == nil {
			continue
		}
		fk := *nodes[i].user_setup
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_setup" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (usq *UserSetupQuery) loadSelectedValidators(ctx context.Context, query *ValidatorQuery, nodes []*UserSetup, init func(*UserSetup), assign func(*UserSetup, *Validator)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserSetup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usersetup.SelectedValidatorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_setup_selected_validators
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_setup_selected_validators" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_setup_selected_validators" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (usq *UserSetupQuery) loadSelectedChains(ctx context.Context, query *ChainQuery, nodes []*UserSetup, init func(*UserSetup), assign func(*UserSetup, *Chain)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserSetup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Chain(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usersetup.SelectedChainsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_setup_selected_chains
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_setup_selected_chains" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_setup_selected_chains" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (usq *UserSetupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := usq.querySpec()
	_spec.Node.Columns = usq.ctx.Fields
	if len(usq.ctx.Fields) > 0 {
		_spec.Unique = usq.ctx.Unique != nil && *usq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, usq.driver, _spec)
}

func (usq *UserSetupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usersetup.Table, usersetup.Columns, sqlgraph.NewFieldSpec(usersetup.FieldID, field.TypeInt))
	_spec.From = usq.sql
	if unique := usq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if usq.path != nil {
		_spec.Unique = true
	}
	if fields := usq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersetup.FieldID)
		for i := range fields {
			if fields[i] != usersetup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := usq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := usq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := usq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := usq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (usq *UserSetupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(usq.driver.Dialect())
	t1 := builder.Table(usersetup.Table)
	columns := usq.ctx.Fields
	if len(columns) == 0 {
		columns = usersetup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if usq.sql != nil {
		selector = usq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if usq.ctx.Unique != nil && *usq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range usq.predicates {
		p(selector)
	}
	for _, p := range usq.order {
		p(selector)
	}
	if offset := usq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := usq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserSetupGroupBy is the group-by builder for UserSetup entities.
type UserSetupGroupBy struct {
	selector
	build *UserSetupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (usgb *UserSetupGroupBy) Aggregate(fns ...AggregateFunc) *UserSetupGroupBy {
	usgb.fns = append(usgb.fns, fns...)
	return usgb
}

// Scan applies the selector query and scans the result into the given value.
func (usgb *UserSetupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, usgb.build.ctx, "GroupBy")
	if err := usgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserSetupQuery, *UserSetupGroupBy](ctx, usgb.build, usgb, usgb.build.inters, v)
}

func (usgb *UserSetupGroupBy) sqlScan(ctx context.Context, root *UserSetupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(usgb.fns))
	for _, fn := range usgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*usgb.flds)+len(usgb.fns))
		for _, f := range *usgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*usgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := usgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSetupSelect is the builder for selecting fields of UserSetup entities.
type UserSetupSelect struct {
	*UserSetupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uss *UserSetupSelect) Aggregate(fns ...AggregateFunc) *UserSetupSelect {
	uss.fns = append(uss.fns, fns...)
	return uss
}

// Scan applies the selector query and scans the result into the given value.
func (uss *UserSetupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uss.ctx, "Select")
	if err := uss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserSetupQuery, *UserSetupSelect](ctx, uss.UserSetupQuery, uss, uss.inters, v)
}

func (uss *UserSetupSelect) sqlScan(ctx context.Context, root *UserSetupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uss.fns))
	for _, fn := range uss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
