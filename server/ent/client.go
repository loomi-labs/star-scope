// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/loomi-labs/star-scope/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/chain"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/contractproposal"
	"github.com/loomi-labs/star-scope/ent/event"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/proposal"
	"github.com/loomi-labs/star-scope/ent/user"
	"github.com/loomi-labs/star-scope/ent/validator"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chain is the client for interacting with the Chain builders.
	Chain *ChainClient
	// CommChannel is the client for interacting with the CommChannel builders.
	CommChannel *CommChannelClient
	// ContractProposal is the client for interacting with the ContractProposal builders.
	ContractProposal *ContractProposalClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventListener is the client for interacting with the EventListener builders.
	EventListener *EventListenerClient
	// Proposal is the client for interacting with the Proposal builders.
	Proposal *ProposalClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Validator is the client for interacting with the Validator builders.
	Validator *ValidatorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chain = NewChainClient(c.config)
	c.CommChannel = NewCommChannelClient(c.config)
	c.ContractProposal = NewContractProposalClient(c.config)
	c.Event = NewEventClient(c.config)
	c.EventListener = NewEventListenerClient(c.config)
	c.Proposal = NewProposalClient(c.config)
	c.User = NewUserClient(c.config)
	c.Validator = NewValidatorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Chain:            NewChainClient(cfg),
		CommChannel:      NewCommChannelClient(cfg),
		ContractProposal: NewContractProposalClient(cfg),
		Event:            NewEventClient(cfg),
		EventListener:    NewEventListenerClient(cfg),
		Proposal:         NewProposalClient(cfg),
		User:             NewUserClient(cfg),
		Validator:        NewValidatorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Chain:            NewChainClient(cfg),
		CommChannel:      NewCommChannelClient(cfg),
		ContractProposal: NewContractProposalClient(cfg),
		Event:            NewEventClient(cfg),
		EventListener:    NewEventListenerClient(cfg),
		Proposal:         NewProposalClient(cfg),
		User:             NewUserClient(cfg),
		Validator:        NewValidatorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chain.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Chain, c.CommChannel, c.ContractProposal, c.Event, c.EventListener,
		c.Proposal, c.User, c.Validator,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Chain, c.CommChannel, c.ContractProposal, c.Event, c.EventListener,
		c.Proposal, c.User, c.Validator,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChainMutation:
		return c.Chain.mutate(ctx, m)
	case *CommChannelMutation:
		return c.CommChannel.mutate(ctx, m)
	case *ContractProposalMutation:
		return c.ContractProposal.mutate(ctx, m)
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *EventListenerMutation:
		return c.EventListener.mutate(ctx, m)
	case *ProposalMutation:
		return c.Proposal.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *ValidatorMutation:
		return c.Validator.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChainClient is a client for the Chain schema.
type ChainClient struct {
	config
}

// NewChainClient returns a client for the Chain from the given config.
func NewChainClient(c config) *ChainClient {
	return &ChainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chain.Hooks(f(g(h())))`.
func (c *ChainClient) Use(hooks ...Hook) {
	c.hooks.Chain = append(c.hooks.Chain, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chain.Intercept(f(g(h())))`.
func (c *ChainClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chain = append(c.inters.Chain, interceptors...)
}

// Create returns a builder for creating a Chain entity.
func (c *ChainClient) Create() *ChainCreate {
	mutation := newChainMutation(c.config, OpCreate)
	return &ChainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chain entities.
func (c *ChainClient) CreateBulk(builders ...*ChainCreate) *ChainCreateBulk {
	return &ChainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chain.
func (c *ChainClient) Update() *ChainUpdate {
	mutation := newChainMutation(c.config, OpUpdate)
	return &ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChainClient) UpdateOne(ch *Chain) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChain(ch))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChainClient) UpdateOneID(id int) *ChainUpdateOne {
	mutation := newChainMutation(c.config, OpUpdateOne, withChainID(id))
	return &ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chain.
func (c *ChainClient) Delete() *ChainDelete {
	mutation := newChainMutation(c.config, OpDelete)
	return &ChainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChainClient) DeleteOne(ch *Chain) *ChainDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChainClient) DeleteOneID(id int) *ChainDeleteOne {
	builder := c.Delete().Where(chain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChainDeleteOne{builder}
}

// Query returns a query builder for Chain.
func (c *ChainClient) Query() *ChainQuery {
	return &ChainQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChain},
		inters: c.Interceptors(),
	}
}

// Get returns a Chain entity by its id.
func (c *ChainClient) Get(ctx context.Context, id int) (*Chain, error) {
	return c.Query().Where(chain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChainClient) GetX(ctx context.Context, id int) *Chain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEventListeners queries the event_listeners edge of a Chain.
func (c *ChainClient) QueryEventListeners(ch *Chain) *EventListenerQuery {
	query := (&EventListenerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(eventlistener.Table, eventlistener.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.EventListenersTable, chain.EventListenersColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProposals queries the proposals edge of a Chain.
func (c *ChainClient) QueryProposals(ch *Chain) *ProposalQuery {
	query := (&ProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(proposal.Table, proposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ProposalsTable, chain.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContractProposals queries the contract_proposals edge of a Chain.
func (c *ChainClient) QueryContractProposals(ch *Chain) *ContractProposalQuery {
	query := (&ContractProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(contractproposal.Table, contractproposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ContractProposalsTable, chain.ContractProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValidators queries the validators edge of a Chain.
func (c *ChainClient) QueryValidators(ch *Chain) *ValidatorQuery {
	query := (&ValidatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chain.Table, chain.FieldID, id),
			sqlgraph.To(validator.Table, validator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chain.ValidatorsTable, chain.ValidatorsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChainClient) Hooks() []Hook {
	return c.hooks.Chain
}

// Interceptors returns the client interceptors.
func (c *ChainClient) Interceptors() []Interceptor {
	return c.inters.Chain
}

func (c *ChainClient) mutate(ctx context.Context, m *ChainMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChainCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChainUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChainDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chain mutation op: %q", m.Op())
	}
}

// CommChannelClient is a client for the CommChannel schema.
type CommChannelClient struct {
	config
}

// NewCommChannelClient returns a client for the CommChannel from the given config.
func NewCommChannelClient(c config) *CommChannelClient {
	return &CommChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commchannel.Hooks(f(g(h())))`.
func (c *CommChannelClient) Use(hooks ...Hook) {
	c.hooks.CommChannel = append(c.hooks.CommChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commchannel.Intercept(f(g(h())))`.
func (c *CommChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommChannel = append(c.inters.CommChannel, interceptors...)
}

// Create returns a builder for creating a CommChannel entity.
func (c *CommChannelClient) Create() *CommChannelCreate {
	mutation := newCommChannelMutation(c.config, OpCreate)
	return &CommChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommChannel entities.
func (c *CommChannelClient) CreateBulk(builders ...*CommChannelCreate) *CommChannelCreateBulk {
	return &CommChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommChannel.
func (c *CommChannelClient) Update() *CommChannelUpdate {
	mutation := newCommChannelMutation(c.config, OpUpdate)
	return &CommChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommChannelClient) UpdateOne(cc *CommChannel) *CommChannelUpdateOne {
	mutation := newCommChannelMutation(c.config, OpUpdateOne, withCommChannel(cc))
	return &CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommChannelClient) UpdateOneID(id int) *CommChannelUpdateOne {
	mutation := newCommChannelMutation(c.config, OpUpdateOne, withCommChannelID(id))
	return &CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommChannel.
func (c *CommChannelClient) Delete() *CommChannelDelete {
	mutation := newCommChannelMutation(c.config, OpDelete)
	return &CommChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommChannelClient) DeleteOne(cc *CommChannel) *CommChannelDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommChannelClient) DeleteOneID(id int) *CommChannelDeleteOne {
	builder := c.Delete().Where(commchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommChannelDeleteOne{builder}
}

// Query returns a query builder for CommChannel.
func (c *CommChannelClient) Query() *CommChannelQuery {
	return &CommChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a CommChannel entity by its id.
func (c *CommChannelClient) Get(ctx context.Context, id int) (*CommChannel, error) {
	return c.Query().Where(commchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommChannelClient) GetX(ctx context.Context, id int) *CommChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEventListeners queries the event_listeners edge of a CommChannel.
func (c *CommChannelClient) QueryEventListeners(cc *CommChannel) *EventListenerQuery {
	query := (&EventListenerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commchannel.Table, commchannel.FieldID, id),
			sqlgraph.To(eventlistener.Table, eventlistener.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, commchannel.EventListenersTable, commchannel.EventListenersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a CommChannel.
func (c *CommChannelClient) QueryUsers(cc *CommChannel) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commchannel.Table, commchannel.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, commchannel.UsersTable, commchannel.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommChannelClient) Hooks() []Hook {
	return c.hooks.CommChannel
}

// Interceptors returns the client interceptors.
func (c *CommChannelClient) Interceptors() []Interceptor {
	return c.inters.CommChannel
}

func (c *CommChannelClient) mutate(ctx context.Context, m *CommChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommChannel mutation op: %q", m.Op())
	}
}

// ContractProposalClient is a client for the ContractProposal schema.
type ContractProposalClient struct {
	config
}

// NewContractProposalClient returns a client for the ContractProposal from the given config.
func NewContractProposalClient(c config) *ContractProposalClient {
	return &ContractProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contractproposal.Hooks(f(g(h())))`.
func (c *ContractProposalClient) Use(hooks ...Hook) {
	c.hooks.ContractProposal = append(c.hooks.ContractProposal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contractproposal.Intercept(f(g(h())))`.
func (c *ContractProposalClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContractProposal = append(c.inters.ContractProposal, interceptors...)
}

// Create returns a builder for creating a ContractProposal entity.
func (c *ContractProposalClient) Create() *ContractProposalCreate {
	mutation := newContractProposalMutation(c.config, OpCreate)
	return &ContractProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContractProposal entities.
func (c *ContractProposalClient) CreateBulk(builders ...*ContractProposalCreate) *ContractProposalCreateBulk {
	return &ContractProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContractProposal.
func (c *ContractProposalClient) Update() *ContractProposalUpdate {
	mutation := newContractProposalMutation(c.config, OpUpdate)
	return &ContractProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractProposalClient) UpdateOne(cp *ContractProposal) *ContractProposalUpdateOne {
	mutation := newContractProposalMutation(c.config, OpUpdateOne, withContractProposal(cp))
	return &ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractProposalClient) UpdateOneID(id int) *ContractProposalUpdateOne {
	mutation := newContractProposalMutation(c.config, OpUpdateOne, withContractProposalID(id))
	return &ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContractProposal.
func (c *ContractProposalClient) Delete() *ContractProposalDelete {
	mutation := newContractProposalMutation(c.config, OpDelete)
	return &ContractProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractProposalClient) DeleteOne(cp *ContractProposal) *ContractProposalDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractProposalClient) DeleteOneID(id int) *ContractProposalDeleteOne {
	builder := c.Delete().Where(contractproposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractProposalDeleteOne{builder}
}

// Query returns a query builder for ContractProposal.
func (c *ContractProposalClient) Query() *ContractProposalQuery {
	return &ContractProposalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContractProposal},
		inters: c.Interceptors(),
	}
}

// Get returns a ContractProposal entity by its id.
func (c *ContractProposalClient) Get(ctx context.Context, id int) (*ContractProposal, error) {
	return c.Query().Where(contractproposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractProposalClient) GetX(ctx context.Context, id int) *ContractProposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a ContractProposal.
func (c *ContractProposalClient) QueryChain(cp *ContractProposal) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contractproposal.Table, contractproposal.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contractproposal.ChainTable, contractproposal.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractProposalClient) Hooks() []Hook {
	return c.hooks.ContractProposal
}

// Interceptors returns the client interceptors.
func (c *ContractProposalClient) Interceptors() []Interceptor {
	return c.inters.ContractProposal
}

func (c *ContractProposalClient) mutate(ctx context.Context, m *ContractProposalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractProposalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractProposalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContractProposal mutation op: %q", m.Op())
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uuid.UUID) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uuid.UUID) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uuid.UUID) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uuid.UUID) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEventListener queries the event_listener edge of a Event.
func (c *EventClient) QueryEventListener(e *Event) *EventListenerQuery {
	query := (&EventListenerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(eventlistener.Table, eventlistener.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, event.EventListenerTable, event.EventListenerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	return c.inters.Event
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Event mutation op: %q", m.Op())
	}
}

// EventListenerClient is a client for the EventListener schema.
type EventListenerClient struct {
	config
}

// NewEventListenerClient returns a client for the EventListener from the given config.
func NewEventListenerClient(c config) *EventListenerClient {
	return &EventListenerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventlistener.Hooks(f(g(h())))`.
func (c *EventListenerClient) Use(hooks ...Hook) {
	c.hooks.EventListener = append(c.hooks.EventListener, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eventlistener.Intercept(f(g(h())))`.
func (c *EventListenerClient) Intercept(interceptors ...Interceptor) {
	c.inters.EventListener = append(c.inters.EventListener, interceptors...)
}

// Create returns a builder for creating a EventListener entity.
func (c *EventListenerClient) Create() *EventListenerCreate {
	mutation := newEventListenerMutation(c.config, OpCreate)
	return &EventListenerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventListener entities.
func (c *EventListenerClient) CreateBulk(builders ...*EventListenerCreate) *EventListenerCreateBulk {
	return &EventListenerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventListener.
func (c *EventListenerClient) Update() *EventListenerUpdate {
	mutation := newEventListenerMutation(c.config, OpUpdate)
	return &EventListenerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventListenerClient) UpdateOne(el *EventListener) *EventListenerUpdateOne {
	mutation := newEventListenerMutation(c.config, OpUpdateOne, withEventListener(el))
	return &EventListenerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventListenerClient) UpdateOneID(id int) *EventListenerUpdateOne {
	mutation := newEventListenerMutation(c.config, OpUpdateOne, withEventListenerID(id))
	return &EventListenerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventListener.
func (c *EventListenerClient) Delete() *EventListenerDelete {
	mutation := newEventListenerMutation(c.config, OpDelete)
	return &EventListenerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventListenerClient) DeleteOne(el *EventListener) *EventListenerDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventListenerClient) DeleteOneID(id int) *EventListenerDeleteOne {
	builder := c.Delete().Where(eventlistener.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventListenerDeleteOne{builder}
}

// Query returns a query builder for EventListener.
func (c *EventListenerClient) Query() *EventListenerQuery {
	return &EventListenerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEventListener},
		inters: c.Interceptors(),
	}
}

// Get returns a EventListener entity by its id.
func (c *EventListenerClient) Get(ctx context.Context, id int) (*EventListener, error) {
	return c.Query().Where(eventlistener.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventListenerClient) GetX(ctx context.Context, id int) *EventListener {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a EventListener.
func (c *EventListenerClient) QueryUsers(el *EventListener) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlistener.Table, eventlistener.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, eventlistener.UsersTable, eventlistener.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChain queries the chain edge of a EventListener.
func (c *EventListenerClient) QueryChain(el *EventListener) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlistener.Table, eventlistener.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlistener.ChainTable, eventlistener.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a EventListener.
func (c *EventListenerClient) QueryEvents(el *EventListener) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlistener.Table, eventlistener.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eventlistener.EventsTable, eventlistener.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommChannels queries the comm_channels edge of a EventListener.
func (c *EventListenerClient) QueryCommChannels(el *EventListener) *CommChannelQuery {
	query := (&CommChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := el.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlistener.Table, eventlistener.FieldID, id),
			sqlgraph.To(commchannel.Table, commchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, eventlistener.CommChannelsTable, eventlistener.CommChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(el.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventListenerClient) Hooks() []Hook {
	return c.hooks.EventListener
}

// Interceptors returns the client interceptors.
func (c *EventListenerClient) Interceptors() []Interceptor {
	return c.inters.EventListener
}

func (c *EventListenerClient) mutate(ctx context.Context, m *EventListenerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventListenerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventListenerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventListenerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventListenerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EventListener mutation op: %q", m.Op())
	}
}

// ProposalClient is a client for the Proposal schema.
type ProposalClient struct {
	config
}

// NewProposalClient returns a client for the Proposal from the given config.
func NewProposalClient(c config) *ProposalClient {
	return &ProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proposal.Hooks(f(g(h())))`.
func (c *ProposalClient) Use(hooks ...Hook) {
	c.hooks.Proposal = append(c.hooks.Proposal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proposal.Intercept(f(g(h())))`.
func (c *ProposalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Proposal = append(c.inters.Proposal, interceptors...)
}

// Create returns a builder for creating a Proposal entity.
func (c *ProposalClient) Create() *ProposalCreate {
	mutation := newProposalMutation(c.config, OpCreate)
	return &ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proposal entities.
func (c *ProposalClient) CreateBulk(builders ...*ProposalCreate) *ProposalCreateBulk {
	return &ProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proposal.
func (c *ProposalClient) Update() *ProposalUpdate {
	mutation := newProposalMutation(c.config, OpUpdate)
	return &ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProposalClient) UpdateOne(pr *Proposal) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposal(pr))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProposalClient) UpdateOneID(id int) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposalID(id))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proposal.
func (c *ProposalClient) Delete() *ProposalDelete {
	mutation := newProposalMutation(c.config, OpDelete)
	return &ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProposalClient) DeleteOne(pr *Proposal) *ProposalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProposalClient) DeleteOneID(id int) *ProposalDeleteOne {
	builder := c.Delete().Where(proposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProposalDeleteOne{builder}
}

// Query returns a query builder for Proposal.
func (c *ProposalClient) Query() *ProposalQuery {
	return &ProposalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProposal},
		inters: c.Interceptors(),
	}
}

// Get returns a Proposal entity by its id.
func (c *ProposalClient) Get(ctx context.Context, id int) (*Proposal, error) {
	return c.Query().Where(proposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProposalClient) GetX(ctx context.Context, id int) *Proposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Proposal.
func (c *ProposalClient) QueryChain(pr *Proposal) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proposal.Table, proposal.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposal.ChainTable, proposal.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProposalClient) Hooks() []Hook {
	return c.hooks.Proposal
}

// Interceptors returns the client interceptors.
func (c *ProposalClient) Interceptors() []Interceptor {
	return c.inters.Proposal
}

func (c *ProposalClient) mutate(ctx context.Context, m *ProposalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Proposal mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEventListeners queries the event_listeners edge of a User.
func (c *UserClient) QueryEventListeners(u *User) *EventListenerQuery {
	query := (&EventListenerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(eventlistener.Table, eventlistener.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EventListenersTable, user.EventListenersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommChannels queries the comm_channels edge of a User.
func (c *UserClient) QueryCommChannels(u *User) *CommChannelQuery {
	query := (&CommChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(commchannel.Table, commchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.CommChannelsTable, user.CommChannelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// ValidatorClient is a client for the Validator schema.
type ValidatorClient struct {
	config
}

// NewValidatorClient returns a client for the Validator from the given config.
func NewValidatorClient(c config) *ValidatorClient {
	return &ValidatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `validator.Hooks(f(g(h())))`.
func (c *ValidatorClient) Use(hooks ...Hook) {
	c.hooks.Validator = append(c.hooks.Validator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `validator.Intercept(f(g(h())))`.
func (c *ValidatorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Validator = append(c.inters.Validator, interceptors...)
}

// Create returns a builder for creating a Validator entity.
func (c *ValidatorClient) Create() *ValidatorCreate {
	mutation := newValidatorMutation(c.config, OpCreate)
	return &ValidatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Validator entities.
func (c *ValidatorClient) CreateBulk(builders ...*ValidatorCreate) *ValidatorCreateBulk {
	return &ValidatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Validator.
func (c *ValidatorClient) Update() *ValidatorUpdate {
	mutation := newValidatorMutation(c.config, OpUpdate)
	return &ValidatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ValidatorClient) UpdateOne(v *Validator) *ValidatorUpdateOne {
	mutation := newValidatorMutation(c.config, OpUpdateOne, withValidator(v))
	return &ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ValidatorClient) UpdateOneID(id int) *ValidatorUpdateOne {
	mutation := newValidatorMutation(c.config, OpUpdateOne, withValidatorID(id))
	return &ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Validator.
func (c *ValidatorClient) Delete() *ValidatorDelete {
	mutation := newValidatorMutation(c.config, OpDelete)
	return &ValidatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ValidatorClient) DeleteOne(v *Validator) *ValidatorDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ValidatorClient) DeleteOneID(id int) *ValidatorDeleteOne {
	builder := c.Delete().Where(validator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ValidatorDeleteOne{builder}
}

// Query returns a query builder for Validator.
func (c *ValidatorClient) Query() *ValidatorQuery {
	return &ValidatorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeValidator},
		inters: c.Interceptors(),
	}
}

// Get returns a Validator entity by its id.
func (c *ValidatorClient) Get(ctx context.Context, id int) (*Validator, error) {
	return c.Query().Where(validator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ValidatorClient) GetX(ctx context.Context, id int) *Validator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Validator.
func (c *ValidatorClient) QueryChain(v *Validator) *ChainQuery {
	query := (&ChainClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(validator.Table, validator.FieldID, id),
			sqlgraph.To(chain.Table, chain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, validator.ChainTable, validator.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ValidatorClient) Hooks() []Hook {
	return c.hooks.Validator
}

// Interceptors returns the client interceptors.
func (c *ValidatorClient) Interceptors() []Interceptor {
	return c.inters.Validator
}

func (c *ValidatorClient) mutate(ctx context.Context, m *ValidatorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ValidatorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ValidatorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ValidatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ValidatorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Validator mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chain, CommChannel, ContractProposal, Event, EventListener, Proposal, User,
		Validator []ent.Hook
	}
	inters struct {
		Chain, CommChannel, ContractProposal, Event, EventListener, Proposal, User,
		Validator []ent.Interceptor
	}
)
