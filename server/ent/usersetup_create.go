// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/chain"
	"github.com/loomi-labs/star-scope/ent/user"
	"github.com/loomi-labs/star-scope/ent/usersetup"
	"github.com/loomi-labs/star-scope/ent/validator"
)

// UserSetupCreate is the builder for creating a UserSetup entity.
type UserSetupCreate struct {
	config
	mutation *UserSetupMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (usc *UserSetupCreate) SetCreateTime(t time.Time) *UserSetupCreate {
	usc.mutation.SetCreateTime(t)
	return usc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableCreateTime(t *time.Time) *UserSetupCreate {
	if t != nil {
		usc.SetCreateTime(*t)
	}
	return usc
}

// SetUpdateTime sets the "update_time" field.
func (usc *UserSetupCreate) SetUpdateTime(t time.Time) *UserSetupCreate {
	usc.mutation.SetUpdateTime(t)
	return usc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableUpdateTime(t *time.Time) *UserSetupCreate {
	if t != nil {
		usc.SetUpdateTime(*t)
	}
	return usc
}

// SetStep sets the "step" field.
func (usc *UserSetupCreate) SetStep(u usersetup.Step) *UserSetupCreate {
	usc.mutation.SetStep(u)
	return usc
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableStep(u *usersetup.Step) *UserSetupCreate {
	if u != nil {
		usc.SetStep(*u)
	}
	return usc
}

// SetIsValidator sets the "is_validator" field.
func (usc *UserSetupCreate) SetIsValidator(b bool) *UserSetupCreate {
	usc.mutation.SetIsValidator(b)
	return usc
}

// SetNillableIsValidator sets the "is_validator" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableIsValidator(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetIsValidator(*b)
	}
	return usc
}

// SetWalletAddresses sets the "wallet_addresses" field.
func (usc *UserSetupCreate) SetWalletAddresses(s []string) *UserSetupCreate {
	usc.mutation.SetWalletAddresses(s)
	return usc
}

// SetNotifyFunding sets the "notify_funding" field.
func (usc *UserSetupCreate) SetNotifyFunding(b bool) *UserSetupCreate {
	usc.mutation.SetNotifyFunding(b)
	return usc
}

// SetNillableNotifyFunding sets the "notify_funding" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableNotifyFunding(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetNotifyFunding(*b)
	}
	return usc
}

// SetNotifyStaking sets the "notify_staking" field.
func (usc *UserSetupCreate) SetNotifyStaking(b bool) *UserSetupCreate {
	usc.mutation.SetNotifyStaking(b)
	return usc
}

// SetNillableNotifyStaking sets the "notify_staking" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableNotifyStaking(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetNotifyStaking(*b)
	}
	return usc
}

// SetNotifyGovNewProposal sets the "notify_gov_new_proposal" field.
func (usc *UserSetupCreate) SetNotifyGovNewProposal(b bool) *UserSetupCreate {
	usc.mutation.SetNotifyGovNewProposal(b)
	return usc
}

// SetNillableNotifyGovNewProposal sets the "notify_gov_new_proposal" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableNotifyGovNewProposal(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetNotifyGovNewProposal(*b)
	}
	return usc
}

// SetNotifyGovVotingEnd sets the "notify_gov_voting_end" field.
func (usc *UserSetupCreate) SetNotifyGovVotingEnd(b bool) *UserSetupCreate {
	usc.mutation.SetNotifyGovVotingEnd(b)
	return usc
}

// SetNillableNotifyGovVotingEnd sets the "notify_gov_voting_end" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableNotifyGovVotingEnd(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetNotifyGovVotingEnd(*b)
	}
	return usc
}

// SetNotifyGovVotingReminder sets the "notify_gov_voting_reminder" field.
func (usc *UserSetupCreate) SetNotifyGovVotingReminder(b bool) *UserSetupCreate {
	usc.mutation.SetNotifyGovVotingReminder(b)
	return usc
}

// SetNillableNotifyGovVotingReminder sets the "notify_gov_voting_reminder" field if the given value is not nil.
func (usc *UserSetupCreate) SetNillableNotifyGovVotingReminder(b *bool) *UserSetupCreate {
	if b != nil {
		usc.SetNotifyGovVotingReminder(*b)
	}
	return usc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usc *UserSetupCreate) SetUserID(id int) *UserSetupCreate {
	usc.mutation.SetUserID(id)
	return usc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usc *UserSetupCreate) SetNillableUserID(id *int) *UserSetupCreate {
	if id != nil {
		usc = usc.SetUserID(*id)
	}
	return usc
}

// SetUser sets the "user" edge to the User entity.
func (usc *UserSetupCreate) SetUser(u *User) *UserSetupCreate {
	return usc.SetUserID(u.ID)
}

// AddSelectedValidatorIDs adds the "selected_validators" edge to the Validator entity by IDs.
func (usc *UserSetupCreate) AddSelectedValidatorIDs(ids ...int) *UserSetupCreate {
	usc.mutation.AddSelectedValidatorIDs(ids...)
	return usc
}

// AddSelectedValidators adds the "selected_validators" edges to the Validator entity.
func (usc *UserSetupCreate) AddSelectedValidators(v ...*Validator) *UserSetupCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return usc.AddSelectedValidatorIDs(ids...)
}

// AddSelectedChainIDs adds the "selected_chains" edge to the Chain entity by IDs.
func (usc *UserSetupCreate) AddSelectedChainIDs(ids ...int) *UserSetupCreate {
	usc.mutation.AddSelectedChainIDs(ids...)
	return usc
}

// AddSelectedChains adds the "selected_chains" edges to the Chain entity.
func (usc *UserSetupCreate) AddSelectedChains(c ...*Chain) *UserSetupCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return usc.AddSelectedChainIDs(ids...)
}

// Mutation returns the UserSetupMutation object of the builder.
func (usc *UserSetupCreate) Mutation() *UserSetupMutation {
	return usc.mutation
}

// Save creates the UserSetup in the database.
func (usc *UserSetupCreate) Save(ctx context.Context) (*UserSetup, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSetupCreate) SaveX(ctx context.Context) *UserSetup {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSetupCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSetupCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSetupCreate) defaults() {
	if _, ok := usc.mutation.CreateTime(); !ok {
		v := usersetup.DefaultCreateTime()
		usc.mutation.SetCreateTime(v)
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		v := usersetup.DefaultUpdateTime()
		usc.mutation.SetUpdateTime(v)
	}
	if _, ok := usc.mutation.Step(); !ok {
		v := usersetup.DefaultStep
		usc.mutation.SetStep(v)
	}
	if _, ok := usc.mutation.IsValidator(); !ok {
		v := usersetup.DefaultIsValidator
		usc.mutation.SetIsValidator(v)
	}
	if _, ok := usc.mutation.NotifyFunding(); !ok {
		v := usersetup.DefaultNotifyFunding
		usc.mutation.SetNotifyFunding(v)
	}
	if _, ok := usc.mutation.NotifyStaking(); !ok {
		v := usersetup.DefaultNotifyStaking
		usc.mutation.SetNotifyStaking(v)
	}
	if _, ok := usc.mutation.NotifyGovNewProposal(); !ok {
		v := usersetup.DefaultNotifyGovNewProposal
		usc.mutation.SetNotifyGovNewProposal(v)
	}
	if _, ok := usc.mutation.NotifyGovVotingEnd(); !ok {
		v := usersetup.DefaultNotifyGovVotingEnd
		usc.mutation.SetNotifyGovVotingEnd(v)
	}
	if _, ok := usc.mutation.NotifyGovVotingReminder(); !ok {
		v := usersetup.DefaultNotifyGovVotingReminder
		usc.mutation.SetNotifyGovVotingReminder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSetupCreate) check() error {
	if _, ok := usc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserSetup.create_time"`)}
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserSetup.update_time"`)}
	}
	if _, ok := usc.mutation.Step(); !ok {
		return &ValidationError{Name: "step", err: errors.New(`ent: missing required field "UserSetup.step"`)}
	}
	if v, ok := usc.mutation.Step(); ok {
		if err := usersetup.StepValidator(v); err != nil {
			return &ValidationError{Name: "step", err: fmt.Errorf(`ent: validator failed for field "UserSetup.step": %w`, err)}
		}
	}
	if _, ok := usc.mutation.IsValidator(); !ok {
		return &ValidationError{Name: "is_validator", err: errors.New(`ent: missing required field "UserSetup.is_validator"`)}
	}
	if _, ok := usc.mutation.NotifyFunding(); !ok {
		return &ValidationError{Name: "notify_funding", err: errors.New(`ent: missing required field "UserSetup.notify_funding"`)}
	}
	if _, ok := usc.mutation.NotifyStaking(); !ok {
		return &ValidationError{Name: "notify_staking", err: errors.New(`ent: missing required field "UserSetup.notify_staking"`)}
	}
	if _, ok := usc.mutation.NotifyGovNewProposal(); !ok {
		return &ValidationError{Name: "notify_gov_new_proposal", err: errors.New(`ent: missing required field "UserSetup.notify_gov_new_proposal"`)}
	}
	if _, ok := usc.mutation.NotifyGovVotingEnd(); !ok {
		return &ValidationError{Name: "notify_gov_voting_end", err: errors.New(`ent: missing required field "UserSetup.notify_gov_voting_end"`)}
	}
	if _, ok := usc.mutation.NotifyGovVotingReminder(); !ok {
		return &ValidationError{Name: "notify_gov_voting_reminder", err: errors.New(`ent: missing required field "UserSetup.notify_gov_voting_reminder"`)}
	}
	return nil
}

func (usc *UserSetupCreate) sqlSave(ctx context.Context) (*UserSetup, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSetupCreate) createSpec() (*UserSetup, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSetup{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersetup.Table, sqlgraph.NewFieldSpec(usersetup.FieldID, field.TypeInt))
	)
	if value, ok := usc.mutation.CreateTime(); ok {
		_spec.SetField(usersetup.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := usc.mutation.UpdateTime(); ok {
		_spec.SetField(usersetup.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := usc.mutation.Step(); ok {
		_spec.SetField(usersetup.FieldStep, field.TypeEnum, value)
		_node.Step = value
	}
	if value, ok := usc.mutation.IsValidator(); ok {
		_spec.SetField(usersetup.FieldIsValidator, field.TypeBool, value)
		_node.IsValidator = value
	}
	if value, ok := usc.mutation.WalletAddresses(); ok {
		_spec.SetField(usersetup.FieldWalletAddresses, field.TypeJSON, value)
		_node.WalletAddresses = value
	}
	if value, ok := usc.mutation.NotifyFunding(); ok {
		_spec.SetField(usersetup.FieldNotifyFunding, field.TypeBool, value)
		_node.NotifyFunding = value
	}
	if value, ok := usc.mutation.NotifyStaking(); ok {
		_spec.SetField(usersetup.FieldNotifyStaking, field.TypeBool, value)
		_node.NotifyStaking = value
	}
	if value, ok := usc.mutation.NotifyGovNewProposal(); ok {
		_spec.SetField(usersetup.FieldNotifyGovNewProposal, field.TypeBool, value)
		_node.NotifyGovNewProposal = value
	}
	if value, ok := usc.mutation.NotifyGovVotingEnd(); ok {
		_spec.SetField(usersetup.FieldNotifyGovVotingEnd, field.TypeBool, value)
		_node.NotifyGovVotingEnd = value
	}
	if value, ok := usc.mutation.NotifyGovVotingReminder(); ok {
		_spec.SetField(usersetup.FieldNotifyGovVotingReminder, field.TypeBool, value)
		_node.NotifyGovVotingReminder = value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetup.UserTable,
			Columns: []string{usersetup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_setup = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.SelectedValidatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usersetup.SelectedValidatorsTable,
			Columns: usersetup.SelectedValidatorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(validator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.SelectedChainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   usersetup.SelectedChainsTable,
			Columns: usersetup.SelectedChainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chain.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSetupCreateBulk is the builder for creating many UserSetup entities in bulk.
type UserSetupCreateBulk struct {
	config
	builders []*UserSetupCreate
}

// Save creates the UserSetup entities in the database.
func (uscb *UserSetupCreateBulk) Save(ctx context.Context) ([]*UserSetup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSetup, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSetupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSetupCreateBulk) SaveX(ctx context.Context) []*UserSetup {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSetupCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSetupCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
