// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// EventListenerDelete is the builder for deleting a EventListener entity.
type EventListenerDelete struct {
	config
	hooks    []Hook
	mutation *EventListenerMutation
}

// Where appends a list predicates to the EventListenerDelete builder.
func (eld *EventListenerDelete) Where(ps ...predicate.EventListener) *EventListenerDelete {
	eld.mutation.Where(ps...)
	return eld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eld *EventListenerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eld.sqlExec, eld.mutation, eld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eld *EventListenerDelete) ExecX(ctx context.Context) int {
	n, err := eld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eld *EventListenerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eventlistener.Table, sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt))
	if ps := eld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eld.mutation.done = true
	return affected, err
}

// EventListenerDeleteOne is the builder for deleting a single EventListener entity.
type EventListenerDeleteOne struct {
	eld *EventListenerDelete
}

// Where appends a list predicates to the EventListenerDelete builder.
func (eldo *EventListenerDeleteOne) Where(ps ...predicate.EventListener) *EventListenerDeleteOne {
	eldo.eld.mutation.Where(ps...)
	return eldo
}

// Exec executes the deletion query.
func (eldo *EventListenerDeleteOne) Exec(ctx context.Context) error {
	n, err := eldo.eld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eventlistener.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eldo *EventListenerDeleteOne) ExecX(ctx context.Context) {
	if err := eldo.Exec(ctx); err != nil {
		panic(err)
	}
}
