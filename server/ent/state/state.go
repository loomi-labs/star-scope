// Code generated by ent, DO NOT EDIT.

package state

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the state type in the database.
	Label = "state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEntity holds the string denoting the entity field in the database.
	FieldEntity = "entity"
	// FieldLastEventTime holds the string denoting the last_event_time field in the database.
	FieldLastEventTime = "last_event_time"
	// Table holds the table name of the state in the database.
	Table = "states"
)

// Columns holds all SQL columns for state fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEntity,
	FieldLastEventTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Entity defines the type for the "entity" enum field.
type Entity string

// Entity values.
const (
	EntityDiscord  Entity = "discord"
	EntityTelegram Entity = "telegram"
)

func (e Entity) String() string {
	return string(e)
}

// EntityValidator is a validator for the "entity" field enum values. It is called by the builders before save.
func EntityValidator(e Entity) error {
	switch e {
	case EntityDiscord, EntityTelegram:
		return nil
	default:
		return fmt.Errorf("state: invalid enum value for entity field: %q", e)
	}
}

// OrderOption defines the ordering options for the State queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByEntity orders the results by the entity field.
func ByEntity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntity, opts...).ToFunc()
}

// ByLastEventTime orders the results by the last_event_time field.
func ByLastEventTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEventTime, opts...).ToFunc()
}
