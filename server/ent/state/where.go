// Code generated by ent, DO NOT EDIT.

package state

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.State {
	return predicate.State(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.State {
	return predicate.State(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.State {
	return predicate.State(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.State {
	return predicate.State(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.State {
	return predicate.State(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.State {
	return predicate.State(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.State {
	return predicate.State(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldUpdateTime, v))
}

// LastEventTime applies equality check predicate on the "last_event_time" field. It's identical to LastEventTimeEQ.
func LastEventTime(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldLastEventTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.State {
	return predicate.State(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.State {
	return predicate.State(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.State {
	return predicate.State(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.State {
	return predicate.State(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldLTE(FieldUpdateTime, v))
}

// EntityEQ applies the EQ predicate on the "entity" field.
func EntityEQ(v Entity) predicate.State {
	return predicate.State(sql.FieldEQ(FieldEntity, v))
}

// EntityNEQ applies the NEQ predicate on the "entity" field.
func EntityNEQ(v Entity) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldEntity, v))
}

// EntityIn applies the In predicate on the "entity" field.
func EntityIn(vs ...Entity) predicate.State {
	return predicate.State(sql.FieldIn(FieldEntity, vs...))
}

// EntityNotIn applies the NotIn predicate on the "entity" field.
func EntityNotIn(vs ...Entity) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldEntity, vs...))
}

// LastEventTimeEQ applies the EQ predicate on the "last_event_time" field.
func LastEventTimeEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldEQ(FieldLastEventTime, v))
}

// LastEventTimeNEQ applies the NEQ predicate on the "last_event_time" field.
func LastEventTimeNEQ(v time.Time) predicate.State {
	return predicate.State(sql.FieldNEQ(FieldLastEventTime, v))
}

// LastEventTimeIn applies the In predicate on the "last_event_time" field.
func LastEventTimeIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldIn(FieldLastEventTime, vs...))
}

// LastEventTimeNotIn applies the NotIn predicate on the "last_event_time" field.
func LastEventTimeNotIn(vs ...time.Time) predicate.State {
	return predicate.State(sql.FieldNotIn(FieldLastEventTime, vs...))
}

// LastEventTimeGT applies the GT predicate on the "last_event_time" field.
func LastEventTimeGT(v time.Time) predicate.State {
	return predicate.State(sql.FieldGT(FieldLastEventTime, v))
}

// LastEventTimeGTE applies the GTE predicate on the "last_event_time" field.
func LastEventTimeGTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldGTE(FieldLastEventTime, v))
}

// LastEventTimeLT applies the LT predicate on the "last_event_time" field.
func LastEventTimeLT(v time.Time) predicate.State {
	return predicate.State(sql.FieldLT(FieldLastEventTime, v))
}

// LastEventTimeLTE applies the LTE predicate on the "last_event_time" field.
func LastEventTimeLTE(v time.Time) predicate.State {
	return predicate.State(sql.FieldLTE(FieldLastEventTime, v))
}

// LastEventTimeIsNil applies the IsNil predicate on the "last_event_time" field.
func LastEventTimeIsNil() predicate.State {
	return predicate.State(sql.FieldIsNull(FieldLastEventTime))
}

// LastEventTimeNotNil applies the NotNil predicate on the "last_event_time" field.
func LastEventTimeNotNil() predicate.State {
	return predicate.State(sql.FieldNotNull(FieldLastEventTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.State) predicate.State {
	return predicate.State(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.State) predicate.State {
	return predicate.State(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.State) predicate.State {
	return predicate.State(func(s *sql.Selector) {
		p(s.Not())
	})
}
