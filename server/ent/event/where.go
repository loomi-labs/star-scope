// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loomi-labs/star-scope/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldData, v))
}

// IsTxEvent applies equality check predicate on the "is_tx_event" field. It's identical to IsTxEventEQ.
func IsTxEvent(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsTxEvent, v))
}

// NotifyTime applies equality check predicate on the "notify_time" field. It's identical to NotifyTimeEQ.
func NotifyTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNotifyTime, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsRead, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdateTime, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v EventType) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v EventType) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...EventType) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...EventType) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventType, vs...))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldData, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v DataType) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v DataType) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...DataType) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...DataType) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDataType, vs...))
}

// IsTxEventEQ applies the EQ predicate on the "is_tx_event" field.
func IsTxEventEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsTxEvent, v))
}

// IsTxEventNEQ applies the NEQ predicate on the "is_tx_event" field.
func IsTxEventNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsTxEvent, v))
}

// NotifyTimeEQ applies the EQ predicate on the "notify_time" field.
func NotifyTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNotifyTime, v))
}

// NotifyTimeNEQ applies the NEQ predicate on the "notify_time" field.
func NotifyTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldNotifyTime, v))
}

// NotifyTimeIn applies the In predicate on the "notify_time" field.
func NotifyTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldNotifyTime, vs...))
}

// NotifyTimeNotIn applies the NotIn predicate on the "notify_time" field.
func NotifyTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldNotifyTime, vs...))
}

// NotifyTimeGT applies the GT predicate on the "notify_time" field.
func NotifyTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldNotifyTime, v))
}

// NotifyTimeGTE applies the GTE predicate on the "notify_time" field.
func NotifyTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldNotifyTime, v))
}

// NotifyTimeLT applies the LT predicate on the "notify_time" field.
func NotifyTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldNotifyTime, v))
}

// NotifyTimeLTE applies the LTE predicate on the "notify_time" field.
func NotifyTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldNotifyTime, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsRead, v))
}

// HasEventListener applies the HasEdge predicate on the "event_listener" edge.
func HasEventListener() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventListenerTable, EventListenerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventListenerWith applies the HasEdge predicate on the "event_listener" edge with a given conditions (other predicates).
func HasEventListenerWith(preds ...predicate.EventListener) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newEventListenerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		p(s.Not())
	})
}
