// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// ChainEvent applies equality check predicate on the "chain_event" field. It's identical to ChainEventEQ.
func ChainEvent(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldChainEvent, v))
}

// ContractEvent applies equality check predicate on the "contract_event" field. It's identical to ContractEventEQ.
func ContractEvent(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldContractEvent, v))
}

// WalletEvent applies equality check predicate on the "wallet_event" field. It's identical to WalletEventEQ.
func WalletEvent(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldWalletEvent, v))
}

// NotifyTime applies equality check predicate on the "notify_time" field. It's identical to NotifyTimeEQ.
func NotifyTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNotifyTime, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsRead, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdateTime, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v EventType) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v EventType) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...EventType) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...EventType) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventType, vs...))
}

// ChainEventEQ applies the EQ predicate on the "chain_event" field.
func ChainEventEQ(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldChainEvent, v))
}

// ChainEventNEQ applies the NEQ predicate on the "chain_event" field.
func ChainEventNEQ(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldChainEvent, v))
}

// ChainEventIn applies the In predicate on the "chain_event" field.
func ChainEventIn(vs ...*schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldChainEvent, vs...))
}

// ChainEventNotIn applies the NotIn predicate on the "chain_event" field.
func ChainEventNotIn(vs ...*schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldChainEvent, vs...))
}

// ChainEventGT applies the GT predicate on the "chain_event" field.
func ChainEventGT(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldChainEvent, v))
}

// ChainEventGTE applies the GTE predicate on the "chain_event" field.
func ChainEventGTE(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldChainEvent, v))
}

// ChainEventLT applies the LT predicate on the "chain_event" field.
func ChainEventLT(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldChainEvent, v))
}

// ChainEventLTE applies the LTE predicate on the "chain_event" field.
func ChainEventLTE(v *schema.ChainEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldChainEvent, v))
}

// ChainEventIsNil applies the IsNil predicate on the "chain_event" field.
func ChainEventIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldChainEvent))
}

// ChainEventNotNil applies the NotNil predicate on the "chain_event" field.
func ChainEventNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldChainEvent))
}

// ContractEventEQ applies the EQ predicate on the "contract_event" field.
func ContractEventEQ(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldContractEvent, v))
}

// ContractEventNEQ applies the NEQ predicate on the "contract_event" field.
func ContractEventNEQ(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldContractEvent, v))
}

// ContractEventIn applies the In predicate on the "contract_event" field.
func ContractEventIn(vs ...*schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldContractEvent, vs...))
}

// ContractEventNotIn applies the NotIn predicate on the "contract_event" field.
func ContractEventNotIn(vs ...*schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldContractEvent, vs...))
}

// ContractEventGT applies the GT predicate on the "contract_event" field.
func ContractEventGT(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldContractEvent, v))
}

// ContractEventGTE applies the GTE predicate on the "contract_event" field.
func ContractEventGTE(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldContractEvent, v))
}

// ContractEventLT applies the LT predicate on the "contract_event" field.
func ContractEventLT(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldContractEvent, v))
}

// ContractEventLTE applies the LTE predicate on the "contract_event" field.
func ContractEventLTE(v *schema.ContractEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldContractEvent, v))
}

// ContractEventIsNil applies the IsNil predicate on the "contract_event" field.
func ContractEventIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldContractEvent))
}

// ContractEventNotNil applies the NotNil predicate on the "contract_event" field.
func ContractEventNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldContractEvent))
}

// WalletEventEQ applies the EQ predicate on the "wallet_event" field.
func WalletEventEQ(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldWalletEvent, v))
}

// WalletEventNEQ applies the NEQ predicate on the "wallet_event" field.
func WalletEventNEQ(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldWalletEvent, v))
}

// WalletEventIn applies the In predicate on the "wallet_event" field.
func WalletEventIn(vs ...*schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldWalletEvent, vs...))
}

// WalletEventNotIn applies the NotIn predicate on the "wallet_event" field.
func WalletEventNotIn(vs ...*schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldWalletEvent, vs...))
}

// WalletEventGT applies the GT predicate on the "wallet_event" field.
func WalletEventGT(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldWalletEvent, v))
}

// WalletEventGTE applies the GTE predicate on the "wallet_event" field.
func WalletEventGTE(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldWalletEvent, v))
}

// WalletEventLT applies the LT predicate on the "wallet_event" field.
func WalletEventLT(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldWalletEvent, v))
}

// WalletEventLTE applies the LTE predicate on the "wallet_event" field.
func WalletEventLTE(v *schema.WalletEventWithScan) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldWalletEvent, v))
}

// WalletEventIsNil applies the IsNil predicate on the "wallet_event" field.
func WalletEventIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldWalletEvent))
}

// WalletEventNotNil applies the NotNil predicate on the "wallet_event" field.
func WalletEventNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldWalletEvent))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v DataType) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v DataType) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...DataType) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...DataType) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDataType, vs...))
}

// NotifyTimeEQ applies the EQ predicate on the "notify_time" field.
func NotifyTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNotifyTime, v))
}

// NotifyTimeNEQ applies the NEQ predicate on the "notify_time" field.
func NotifyTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldNotifyTime, v))
}

// NotifyTimeIn applies the In predicate on the "notify_time" field.
func NotifyTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldNotifyTime, vs...))
}

// NotifyTimeNotIn applies the NotIn predicate on the "notify_time" field.
func NotifyTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldNotifyTime, vs...))
}

// NotifyTimeGT applies the GT predicate on the "notify_time" field.
func NotifyTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldNotifyTime, v))
}

// NotifyTimeGTE applies the GTE predicate on the "notify_time" field.
func NotifyTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldNotifyTime, v))
}

// NotifyTimeLT applies the LT predicate on the "notify_time" field.
func NotifyTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldNotifyTime, v))
}

// NotifyTimeLTE applies the LTE predicate on the "notify_time" field.
func NotifyTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldNotifyTime, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsRead, v))
}

// HasEventListener applies the HasEdge predicate on the "event_listener" edge.
func HasEventListener() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventListenerTable, EventListenerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventListenerWith applies the HasEdge predicate on the "event_listener" edge with a given conditions (other predicates).
func HasEventListenerWith(preds ...predicate.EventListener) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newEventListenerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		p(s.Not())
	})
}
