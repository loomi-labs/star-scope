// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// FieldIsTxEvent holds the string denoting the is_tx_event field in the database.
	FieldIsTxEvent = "is_tx_event"
	// FieldNotifyTime holds the string denoting the notify_time field in the database.
	FieldNotifyTime = "notify_time"
	// FieldIsRead holds the string denoting the is_read field in the database.
	FieldIsRead = "is_read"
	// EdgeEventListener holds the string denoting the event_listener edge name in mutations.
	EdgeEventListener = "event_listener"
	// Table holds the table name of the event in the database.
	Table = "events"
	// EventListenerTable is the table that holds the event_listener relation/edge.
	EventListenerTable = "events"
	// EventListenerInverseTable is the table name for the EventListener entity.
	// It exists in this package in order to avoid circular dependency with the "eventlistener" package.
	EventListenerInverseTable = "event_listeners"
	// EventListenerColumn is the table column denoting the event_listener relation/edge.
	EventListenerColumn = "event_listener_events"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEventType,
	FieldData,
	FieldDataType,
	FieldIsTxEvent,
	FieldNotifyTime,
	FieldIsRead,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_listener_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultNotifyTime holds the default value on creation for the "notify_time" field.
	DefaultNotifyTime time.Time
	// DefaultIsRead holds the default value on creation for the "is_read" field.
	DefaultIsRead bool
)

// EventType defines the type for the "event_type" enum field.
type EventType string

// EventType values.
const (
	EventTypeSTAKING    EventType = "STAKING"
	EventTypeDEX        EventType = "DEX"
	EventTypeGOVERNANCE EventType = "GOVERNANCE"
	EventTypeFUNDING    EventType = "FUNDING"
)

func (et EventType) String() string {
	return string(et)
}

// EventTypeValidator is a validator for the "event_type" field enum values. It is called by the builders before save.
func EventTypeValidator(et EventType) error {
	switch et {
	case EventTypeSTAKING, EventTypeDEX, EventTypeGOVERNANCE, EventTypeFUNDING:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for event_type field: %q", et)
	}
}

// DataType defines the type for the "data_type" enum field.
type DataType string

// DataType values.
const (
	DataTypeTxEvent_CoinReceived                   DataType = "TxEvent_CoinReceived"
	DataTypeTxEvent_OsmosisPoolUnlock              DataType = "TxEvent_OsmosisPoolUnlock"
	DataTypeTxEvent_Unstake                        DataType = "TxEvent_Unstake"
	DataTypeQueryEvent_GovernanceProposal_Ongoing  DataType = "QueryEvent_GovernanceProposal_Ongoing"
	DataTypeQueryEvent_GovernanceProposal_Finished DataType = "QueryEvent_GovernanceProposal_Finished"
)

func (dt DataType) String() string {
	return string(dt)
}

// DataTypeValidator is a validator for the "data_type" field enum values. It is called by the builders before save.
func DataTypeValidator(dt DataType) error {
	switch dt {
	case DataTypeTxEvent_CoinReceived, DataTypeTxEvent_OsmosisPoolUnlock, DataTypeTxEvent_Unstake, DataTypeQueryEvent_GovernanceProposal_Ongoing, DataTypeQueryEvent_GovernanceProposal_Finished:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for data_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByIsTxEvent orders the results by the is_tx_event field.
func ByIsTxEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTxEvent, opts...).ToFunc()
}

// ByNotifyTime orders the results by the notify_time field.
func ByNotifyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyTime, opts...).ToFunc()
}

// ByIsRead orders the results by the is_read field.
func ByIsRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRead, opts...).ToFunc()
}

// ByEventListenerField orders the results by event_listener field.
func ByEventListenerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventListenerStep(), sql.OrderByField(field, opts...))
	}
}
func newEventListenerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventListenerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventListenerTable, EventListenerColumn),
	)
}
