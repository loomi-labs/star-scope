// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTxEvent holds the string denoting the tx_event field in the database.
	FieldTxEvent = "tx_event"
	// FieldNotifyTime holds the string denoting the notify_time field in the database.
	FieldNotifyTime = "notify_time"
	// EdgeEventListener holds the string denoting the event_listener edge name in mutations.
	EdgeEventListener = "event_listener"
	// Table holds the table name of the event in the database.
	Table = "events"
	// EventListenerTable is the table that holds the event_listener relation/edge.
	EventListenerTable = "events"
	// EventListenerInverseTable is the table name for the EventListener entity.
	// It exists in this package in order to avoid circular dependency with the "eventlistener" package.
	EventListenerInverseTable = "event_listeners"
	// EventListenerColumn is the table column denoting the event_listener relation/edge.
	EventListenerColumn = "event_listener_events"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldType,
	FieldTxEvent,
	FieldNotifyTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_listener_events",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultNotifyTime holds the default value on creation for the "notify_time" field.
	DefaultNotifyTime time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeTxEvent_CoinReceived                   Type = "TxEvent_CoinReceived"
	TypeTxEvent_OsmosisPoolUnlock              Type = "TxEvent_OsmosisPoolUnlock"
	TypeTxEvent_Unstake                        Type = "TxEvent_Unstake"
	TypeQueryEvent_GovernanceProposal_Ongoing  Type = "QueryEvent_GovernanceProposal_Ongoing"
	TypeQueryEvent_GovernanceProposal_Finished Type = "QueryEvent_GovernanceProposal_Finished"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTxEvent_CoinReceived, TypeTxEvent_OsmosisPoolUnlock, TypeTxEvent_Unstake, TypeQueryEvent_GovernanceProposal_Ongoing, TypeQueryEvent_GovernanceProposal_Finished:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNotifyTime orders the results by the notify_time field.
func ByNotifyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyTime, opts...).ToFunc()
}

// ByEventListenerField orders the results by event_listener field.
func ByEventListenerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventListenerStep(), sql.OrderByField(field, opts...))
	}
}
func newEventListenerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventListenerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventListenerTable, EventListenerColumn),
	)
}
