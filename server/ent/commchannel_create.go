// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/user"
)

// CommChannelCreate is the builder for creating a CommChannel entity.
type CommChannelCreate struct {
	config
	mutation *CommChannelMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ccc *CommChannelCreate) SetCreateTime(t time.Time) *CommChannelCreate {
	ccc.mutation.SetCreateTime(t)
	return ccc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableCreateTime(t *time.Time) *CommChannelCreate {
	if t != nil {
		ccc.SetCreateTime(*t)
	}
	return ccc
}

// SetUpdateTime sets the "update_time" field.
func (ccc *CommChannelCreate) SetUpdateTime(t time.Time) *CommChannelCreate {
	ccc.mutation.SetUpdateTime(t)
	return ccc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableUpdateTime(t *time.Time) *CommChannelCreate {
	if t != nil {
		ccc.SetUpdateTime(*t)
	}
	return ccc
}

// SetName sets the "name" field.
func (ccc *CommChannelCreate) SetName(s string) *CommChannelCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetType sets the "type" field.
func (ccc *CommChannelCreate) SetType(c commchannel.Type) *CommChannelCreate {
	ccc.mutation.SetType(c)
	return ccc
}

// SetTelegramChatID sets the "telegram_chat_id" field.
func (ccc *CommChannelCreate) SetTelegramChatID(i int64) *CommChannelCreate {
	ccc.mutation.SetTelegramChatID(i)
	return ccc
}

// SetNillableTelegramChatID sets the "telegram_chat_id" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableTelegramChatID(i *int64) *CommChannelCreate {
	if i != nil {
		ccc.SetTelegramChatID(*i)
	}
	return ccc
}

// SetDiscordChannelID sets the "discord_channel_id" field.
func (ccc *CommChannelCreate) SetDiscordChannelID(i int64) *CommChannelCreate {
	ccc.mutation.SetDiscordChannelID(i)
	return ccc
}

// SetNillableDiscordChannelID sets the "discord_channel_id" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableDiscordChannelID(i *int64) *CommChannelCreate {
	if i != nil {
		ccc.SetDiscordChannelID(*i)
	}
	return ccc
}

// SetIsGroup sets the "is_group" field.
func (ccc *CommChannelCreate) SetIsGroup(b bool) *CommChannelCreate {
	ccc.mutation.SetIsGroup(b)
	return ccc
}

// SetNillableIsGroup sets the "is_group" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableIsGroup(b *bool) *CommChannelCreate {
	if b != nil {
		ccc.SetIsGroup(*b)
	}
	return ccc
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (ccc *CommChannelCreate) AddEventListenerIDs(ids ...int) *CommChannelCreate {
	ccc.mutation.AddEventListenerIDs(ids...)
	return ccc
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (ccc *CommChannelCreate) AddEventListeners(e ...*EventListener) *CommChannelCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ccc.AddEventListenerIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ccc *CommChannelCreate) AddUserIDs(ids ...int) *CommChannelCreate {
	ccc.mutation.AddUserIDs(ids...)
	return ccc
}

// AddUsers adds the "users" edges to the User entity.
func (ccc *CommChannelCreate) AddUsers(u ...*User) *CommChannelCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ccc.AddUserIDs(ids...)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccc *CommChannelCreate) Mutation() *CommChannelMutation {
	return ccc.mutation
}

// Save creates the CommChannel in the database.
func (ccc *CommChannelCreate) Save(ctx context.Context) (*CommChannel, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CommChannelCreate) SaveX(ctx context.Context) *CommChannel {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CommChannelCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CommChannelCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CommChannelCreate) defaults() {
	if _, ok := ccc.mutation.CreateTime(); !ok {
		v := commchannel.DefaultCreateTime()
		ccc.mutation.SetCreateTime(v)
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		v := commchannel.DefaultUpdateTime()
		ccc.mutation.SetUpdateTime(v)
	}
	if _, ok := ccc.mutation.IsGroup(); !ok {
		v := commchannel.DefaultIsGroup
		ccc.mutation.SetIsGroup(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CommChannelCreate) check() error {
	if _, ok := ccc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CommChannel.create_time"`)}
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CommChannel.update_time"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CommChannel.name"`)}
	}
	if _, ok := ccc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CommChannel.type"`)}
	}
	if v, ok := ccc.mutation.GetType(); ok {
		if err := commchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommChannel.type": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.IsGroup(); !ok {
		return &ValidationError{Name: "is_group", err: errors.New(`ent: missing required field "CommChannel.is_group"`)}
	}
	return nil
}

func (ccc *CommChannelCreate) sqlSave(ctx context.Context) (*CommChannel, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CommChannelCreate) createSpec() (*CommChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &CommChannel{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(commchannel.Table, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt))
	)
	if value, ok := ccc.mutation.CreateTime(); ok {
		_spec.SetField(commchannel.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ccc.mutation.UpdateTime(); ok {
		_spec.SetField(commchannel.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.SetField(commchannel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccc.mutation.GetType(); ok {
		_spec.SetField(commchannel.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ccc.mutation.TelegramChatID(); ok {
		_spec.SetField(commchannel.FieldTelegramChatID, field.TypeInt64, value)
		_node.TelegramChatID = value
	}
	if value, ok := ccc.mutation.DiscordChannelID(); ok {
		_spec.SetField(commchannel.FieldDiscordChannelID, field.TypeInt64, value)
		_node.DiscordChannelID = value
	}
	if value, ok := ccc.mutation.IsGroup(); ok {
		_spec.SetField(commchannel.FieldIsGroup, field.TypeBool, value)
		_node.IsGroup = value
	}
	if nodes := ccc.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   commchannel.EventListenersTable,
			Columns: commchannel.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   commchannel.UsersTable,
			Columns: commchannel.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommChannelCreateBulk is the builder for creating many CommChannel entities in bulk.
type CommChannelCreateBulk struct {
	config
	builders []*CommChannelCreate
}

// Save creates the CommChannel entities in the database.
func (cccb *CommChannelCreateBulk) Save(ctx context.Context) ([]*CommChannel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CommChannel, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CommChannelCreateBulk) SaveX(ctx context.Context) []*CommChannel {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CommChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CommChannelCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
