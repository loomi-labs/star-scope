// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loomi-labs/star-scope/ent/commchannel"
	"github.com/loomi-labs/star-scope/ent/eventlistener"
	"github.com/loomi-labs/star-scope/ent/predicate"
	"github.com/loomi-labs/star-scope/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetTelegramUserID sets the "telegram_user_id" field.
func (uu *UserUpdate) SetTelegramUserID(i int64) *UserUpdate {
	uu.mutation.ResetTelegramUserID()
	uu.mutation.SetTelegramUserID(i)
	return uu
}

// SetNillableTelegramUserID sets the "telegram_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTelegramUserID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetTelegramUserID(*i)
	}
	return uu
}

// AddTelegramUserID adds i to the "telegram_user_id" field.
func (uu *UserUpdate) AddTelegramUserID(i int64) *UserUpdate {
	uu.mutation.AddTelegramUserID(i)
	return uu
}

// ClearTelegramUserID clears the value of the "telegram_user_id" field.
func (uu *UserUpdate) ClearTelegramUserID() *UserUpdate {
	uu.mutation.ClearTelegramUserID()
	return uu
}

// SetTelegramUsername sets the "telegram_username" field.
func (uu *UserUpdate) SetTelegramUsername(s string) *UserUpdate {
	uu.mutation.SetTelegramUsername(s)
	return uu
}

// SetNillableTelegramUsername sets the "telegram_username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTelegramUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetTelegramUsername(*s)
	}
	return uu
}

// ClearTelegramUsername clears the value of the "telegram_username" field.
func (uu *UserUpdate) ClearTelegramUsername() *UserUpdate {
	uu.mutation.ClearTelegramUsername()
	return uu
}

// SetDiscordUserID sets the "discord_user_id" field.
func (uu *UserUpdate) SetDiscordUserID(i int64) *UserUpdate {
	uu.mutation.ResetDiscordUserID()
	uu.mutation.SetDiscordUserID(i)
	return uu
}

// SetNillableDiscordUserID sets the "discord_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDiscordUserID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDiscordUserID(*i)
	}
	return uu
}

// AddDiscordUserID adds i to the "discord_user_id" field.
func (uu *UserUpdate) AddDiscordUserID(i int64) *UserUpdate {
	uu.mutation.AddDiscordUserID(i)
	return uu
}

// ClearDiscordUserID clears the value of the "discord_user_id" field.
func (uu *UserUpdate) ClearDiscordUserID() *UserUpdate {
	uu.mutation.ClearDiscordUserID()
	return uu
}

// SetDiscordUsername sets the "discord_username" field.
func (uu *UserUpdate) SetDiscordUsername(s string) *UserUpdate {
	uu.mutation.SetDiscordUsername(s)
	return uu
}

// SetNillableDiscordUsername sets the "discord_username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDiscordUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetDiscordUsername(*s)
	}
	return uu
}

// ClearDiscordUsername clears the value of the "discord_username" field.
func (uu *UserUpdate) ClearDiscordUsername() *UserUpdate {
	uu.mutation.ClearDiscordUsername()
	return uu
}

// SetWalletAddress sets the "wallet_address" field.
func (uu *UserUpdate) SetWalletAddress(s string) *UserUpdate {
	uu.mutation.SetWalletAddress(s)
	return uu
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWalletAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetWalletAddress(*s)
	}
	return uu
}

// ClearWalletAddress clears the value of the "wallet_address" field.
func (uu *UserUpdate) ClearWalletAddress() *UserUpdate {
	uu.mutation.ClearWalletAddress()
	return uu
}

// SetLastLoginTime sets the "last_login_time" field.
func (uu *UserUpdate) SetLastLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginTime(t)
	return uu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginTime(*t)
	}
	return uu
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (uu *UserUpdate) ClearLastLoginTime() *UserUpdate {
	uu.mutation.ClearLastLoginTime()
	return uu
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (uu *UserUpdate) AddEventListenerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddEventListenerIDs(ids...)
	return uu
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (uu *UserUpdate) AddEventListeners(e ...*EventListener) *UserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventListenerIDs(ids...)
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (uu *UserUpdate) AddCommChannelIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCommChannelIDs(ids...)
	return uu
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (uu *UserUpdate) AddCommChannels(c ...*CommChannel) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCommChannelIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearEventListeners clears all "event_listeners" edges to the EventListener entity.
func (uu *UserUpdate) ClearEventListeners() *UserUpdate {
	uu.mutation.ClearEventListeners()
	return uu
}

// RemoveEventListenerIDs removes the "event_listeners" edge to EventListener entities by IDs.
func (uu *UserUpdate) RemoveEventListenerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveEventListenerIDs(ids...)
	return uu
}

// RemoveEventListeners removes "event_listeners" edges to EventListener entities.
func (uu *UserUpdate) RemoveEventListeners(e ...*EventListener) *UserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventListenerIDs(ids...)
}

// ClearCommChannels clears all "comm_channels" edges to the CommChannel entity.
func (uu *UserUpdate) ClearCommChannels() *UserUpdate {
	uu.mutation.ClearCommChannels()
	return uu
}

// RemoveCommChannelIDs removes the "comm_channels" edge to CommChannel entities by IDs.
func (uu *UserUpdate) RemoveCommChannelIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCommChannelIDs(ids...)
	return uu
}

// RemoveCommChannels removes "comm_channels" edges to CommChannel entities.
func (uu *UserUpdate) RemoveCommChannels(c ...*CommChannel) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCommChannelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.TelegramUserID(); ok {
		_spec.SetField(user.FieldTelegramUserID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedTelegramUserID(); ok {
		_spec.AddField(user.FieldTelegramUserID, field.TypeInt64, value)
	}
	if uu.mutation.TelegramUserIDCleared() {
		_spec.ClearField(user.FieldTelegramUserID, field.TypeInt64)
	}
	if value, ok := uu.mutation.TelegramUsername(); ok {
		_spec.SetField(user.FieldTelegramUsername, field.TypeString, value)
	}
	if uu.mutation.TelegramUsernameCleared() {
		_spec.ClearField(user.FieldTelegramUsername, field.TypeString)
	}
	if value, ok := uu.mutation.DiscordUserID(); ok {
		_spec.SetField(user.FieldDiscordUserID, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedDiscordUserID(); ok {
		_spec.AddField(user.FieldDiscordUserID, field.TypeInt64, value)
	}
	if uu.mutation.DiscordUserIDCleared() {
		_spec.ClearField(user.FieldDiscordUserID, field.TypeInt64)
	}
	if value, ok := uu.mutation.DiscordUsername(); ok {
		_spec.SetField(user.FieldDiscordUsername, field.TypeString, value)
	}
	if uu.mutation.DiscordUsernameCleared() {
		_spec.ClearField(user.FieldDiscordUsername, field.TypeString)
	}
	if value, ok := uu.mutation.WalletAddress(); ok {
		_spec.SetField(user.FieldWalletAddress, field.TypeString, value)
	}
	if uu.mutation.WalletAddressCleared() {
		_spec.ClearField(user.FieldWalletAddress, field.TypeString)
	}
	if value, ok := uu.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if uu.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if uu.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventListenersIDs(); len(nodes) > 0 && !uu.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommChannelsIDs(); len(nodes) > 0 && !uu.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetTelegramUserID sets the "telegram_user_id" field.
func (uuo *UserUpdateOne) SetTelegramUserID(i int64) *UserUpdateOne {
	uuo.mutation.ResetTelegramUserID()
	uuo.mutation.SetTelegramUserID(i)
	return uuo
}

// SetNillableTelegramUserID sets the "telegram_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTelegramUserID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetTelegramUserID(*i)
	}
	return uuo
}

// AddTelegramUserID adds i to the "telegram_user_id" field.
func (uuo *UserUpdateOne) AddTelegramUserID(i int64) *UserUpdateOne {
	uuo.mutation.AddTelegramUserID(i)
	return uuo
}

// ClearTelegramUserID clears the value of the "telegram_user_id" field.
func (uuo *UserUpdateOne) ClearTelegramUserID() *UserUpdateOne {
	uuo.mutation.ClearTelegramUserID()
	return uuo
}

// SetTelegramUsername sets the "telegram_username" field.
func (uuo *UserUpdateOne) SetTelegramUsername(s string) *UserUpdateOne {
	uuo.mutation.SetTelegramUsername(s)
	return uuo
}

// SetNillableTelegramUsername sets the "telegram_username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTelegramUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTelegramUsername(*s)
	}
	return uuo
}

// ClearTelegramUsername clears the value of the "telegram_username" field.
func (uuo *UserUpdateOne) ClearTelegramUsername() *UserUpdateOne {
	uuo.mutation.ClearTelegramUsername()
	return uuo
}

// SetDiscordUserID sets the "discord_user_id" field.
func (uuo *UserUpdateOne) SetDiscordUserID(i int64) *UserUpdateOne {
	uuo.mutation.ResetDiscordUserID()
	uuo.mutation.SetDiscordUserID(i)
	return uuo
}

// SetNillableDiscordUserID sets the "discord_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDiscordUserID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDiscordUserID(*i)
	}
	return uuo
}

// AddDiscordUserID adds i to the "discord_user_id" field.
func (uuo *UserUpdateOne) AddDiscordUserID(i int64) *UserUpdateOne {
	uuo.mutation.AddDiscordUserID(i)
	return uuo
}

// ClearDiscordUserID clears the value of the "discord_user_id" field.
func (uuo *UserUpdateOne) ClearDiscordUserID() *UserUpdateOne {
	uuo.mutation.ClearDiscordUserID()
	return uuo
}

// SetDiscordUsername sets the "discord_username" field.
func (uuo *UserUpdateOne) SetDiscordUsername(s string) *UserUpdateOne {
	uuo.mutation.SetDiscordUsername(s)
	return uuo
}

// SetNillableDiscordUsername sets the "discord_username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDiscordUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDiscordUsername(*s)
	}
	return uuo
}

// ClearDiscordUsername clears the value of the "discord_username" field.
func (uuo *UserUpdateOne) ClearDiscordUsername() *UserUpdateOne {
	uuo.mutation.ClearDiscordUsername()
	return uuo
}

// SetWalletAddress sets the "wallet_address" field.
func (uuo *UserUpdateOne) SetWalletAddress(s string) *UserUpdateOne {
	uuo.mutation.SetWalletAddress(s)
	return uuo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWalletAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetWalletAddress(*s)
	}
	return uuo
}

// ClearWalletAddress clears the value of the "wallet_address" field.
func (uuo *UserUpdateOne) ClearWalletAddress() *UserUpdateOne {
	uuo.mutation.ClearWalletAddress()
	return uuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (uuo *UserUpdateOne) SetLastLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginTime(t)
	return uuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginTime(*t)
	}
	return uuo
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (uuo *UserUpdateOne) ClearLastLoginTime() *UserUpdateOne {
	uuo.mutation.ClearLastLoginTime()
	return uuo
}

// AddEventListenerIDs adds the "event_listeners" edge to the EventListener entity by IDs.
func (uuo *UserUpdateOne) AddEventListenerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddEventListenerIDs(ids...)
	return uuo
}

// AddEventListeners adds the "event_listeners" edges to the EventListener entity.
func (uuo *UserUpdateOne) AddEventListeners(e ...*EventListener) *UserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventListenerIDs(ids...)
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (uuo *UserUpdateOne) AddCommChannelIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCommChannelIDs(ids...)
	return uuo
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (uuo *UserUpdateOne) AddCommChannels(c ...*CommChannel) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCommChannelIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearEventListeners clears all "event_listeners" edges to the EventListener entity.
func (uuo *UserUpdateOne) ClearEventListeners() *UserUpdateOne {
	uuo.mutation.ClearEventListeners()
	return uuo
}

// RemoveEventListenerIDs removes the "event_listeners" edge to EventListener entities by IDs.
func (uuo *UserUpdateOne) RemoveEventListenerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveEventListenerIDs(ids...)
	return uuo
}

// RemoveEventListeners removes "event_listeners" edges to EventListener entities.
func (uuo *UserUpdateOne) RemoveEventListeners(e ...*EventListener) *UserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventListenerIDs(ids...)
}

// ClearCommChannels clears all "comm_channels" edges to the CommChannel entity.
func (uuo *UserUpdateOne) ClearCommChannels() *UserUpdateOne {
	uuo.mutation.ClearCommChannels()
	return uuo
}

// RemoveCommChannelIDs removes the "comm_channels" edge to CommChannel entities by IDs.
func (uuo *UserUpdateOne) RemoveCommChannelIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCommChannelIDs(ids...)
	return uuo
}

// RemoveCommChannels removes "comm_channels" edges to CommChannel entities.
func (uuo *UserUpdateOne) RemoveCommChannels(c ...*CommChannel) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCommChannelIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.TelegramUserID(); ok {
		_spec.SetField(user.FieldTelegramUserID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedTelegramUserID(); ok {
		_spec.AddField(user.FieldTelegramUserID, field.TypeInt64, value)
	}
	if uuo.mutation.TelegramUserIDCleared() {
		_spec.ClearField(user.FieldTelegramUserID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.TelegramUsername(); ok {
		_spec.SetField(user.FieldTelegramUsername, field.TypeString, value)
	}
	if uuo.mutation.TelegramUsernameCleared() {
		_spec.ClearField(user.FieldTelegramUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.DiscordUserID(); ok {
		_spec.SetField(user.FieldDiscordUserID, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedDiscordUserID(); ok {
		_spec.AddField(user.FieldDiscordUserID, field.TypeInt64, value)
	}
	if uuo.mutation.DiscordUserIDCleared() {
		_spec.ClearField(user.FieldDiscordUserID, field.TypeInt64)
	}
	if value, ok := uuo.mutation.DiscordUsername(); ok {
		_spec.SetField(user.FieldDiscordUsername, field.TypeString, value)
	}
	if uuo.mutation.DiscordUsernameCleared() {
		_spec.ClearField(user.FieldDiscordUsername, field.TypeString)
	}
	if value, ok := uuo.mutation.WalletAddress(); ok {
		_spec.SetField(user.FieldWalletAddress, field.TypeString, value)
	}
	if uuo.mutation.WalletAddressCleared() {
		_spec.ClearField(user.FieldWalletAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.LastLoginTime(); ok {
		_spec.SetField(user.FieldLastLoginTime, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginTimeCleared() {
		_spec.ClearField(user.FieldLastLoginTime, field.TypeTime)
	}
	if uuo.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventListenersIDs(); len(nodes) > 0 && !uuo.mutation.EventListenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventListenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EventListenersTable,
			Columns: user.EventListenersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventlistener.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommChannelsIDs(); len(nodes) > 0 && !uuo.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CommChannelsTable,
			Columns: user.CommChannelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
