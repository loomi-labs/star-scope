// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/auth/authpb/auth_service.proto

package authpbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	authpb "github.com/loomi-labs/star-scope/grpc/auth/authpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "starscope.grpc.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceKeplrLoginProcedure is the fully-qualified name of the AuthService's KeplrLogin RPC.
	AuthServiceKeplrLoginProcedure = "/starscope.grpc.AuthService/KeplrLogin"
	// AuthServiceRefreshAccessTokenProcedure is the fully-qualified name of the AuthService's
	// RefreshAccessToken RPC.
	AuthServiceRefreshAccessTokenProcedure = "/starscope.grpc.AuthService/RefreshAccessToken"
)

// AuthServiceClient is a client for the starscope.grpc.AuthService service.
type AuthServiceClient interface {
	KeplrLogin(context.Context, *connect_go.Request[authpb.KeplrLoginRequest]) (*connect_go.Response[authpb.LoginResponse], error)
	RefreshAccessToken(context.Context, *connect_go.Request[authpb.RefreshAccessTokenRequest]) (*connect_go.Response[authpb.RefreshAccessTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the starscope.grpc.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		keplrLogin: connect_go.NewClient[authpb.KeplrLoginRequest, authpb.LoginResponse](
			httpClient,
			baseURL+AuthServiceKeplrLoginProcedure,
			opts...,
		),
		refreshAccessToken: connect_go.NewClient[authpb.RefreshAccessTokenRequest, authpb.RefreshAccessTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshAccessTokenProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	keplrLogin         *connect_go.Client[authpb.KeplrLoginRequest, authpb.LoginResponse]
	refreshAccessToken *connect_go.Client[authpb.RefreshAccessTokenRequest, authpb.RefreshAccessTokenResponse]
}

// KeplrLogin calls starscope.grpc.AuthService.KeplrLogin.
func (c *authServiceClient) KeplrLogin(ctx context.Context, req *connect_go.Request[authpb.KeplrLoginRequest]) (*connect_go.Response[authpb.LoginResponse], error) {
	return c.keplrLogin.CallUnary(ctx, req)
}

// RefreshAccessToken calls starscope.grpc.AuthService.RefreshAccessToken.
func (c *authServiceClient) RefreshAccessToken(ctx context.Context, req *connect_go.Request[authpb.RefreshAccessTokenRequest]) (*connect_go.Response[authpb.RefreshAccessTokenResponse], error) {
	return c.refreshAccessToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the starscope.grpc.AuthService service.
type AuthServiceHandler interface {
	KeplrLogin(context.Context, *connect_go.Request[authpb.KeplrLoginRequest]) (*connect_go.Response[authpb.LoginResponse], error)
	RefreshAccessToken(context.Context, *connect_go.Request[authpb.RefreshAccessTokenRequest]) (*connect_go.Response[authpb.RefreshAccessTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AuthServiceKeplrLoginProcedure, connect_go.NewUnaryHandler(
		AuthServiceKeplrLoginProcedure,
		svc.KeplrLogin,
		opts...,
	))
	mux.Handle(AuthServiceRefreshAccessTokenProcedure, connect_go.NewUnaryHandler(
		AuthServiceRefreshAccessTokenProcedure,
		svc.RefreshAccessToken,
		opts...,
	))
	return "/starscope.grpc.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) KeplrLogin(context.Context, *connect_go.Request[authpb.KeplrLoginRequest]) (*connect_go.Response[authpb.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("starscope.grpc.AuthService.KeplrLogin is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshAccessToken(context.Context, *connect_go.Request[authpb.RefreshAccessTokenRequest]) (*connect_go.Response[authpb.RefreshAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("starscope.grpc.AuthService.RefreshAccessToken is not implemented"))
}
