// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/user/userpb/user_setup_service.proto

package userpbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	userpb "github.com/loomi-labs/star-scope/grpc/user/userpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserSetupServiceName is the fully-qualified name of the UserSetupService service.
	UserSetupServiceName = "starscope.grpc.UserSetupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserSetupServiceGetCurrentStepProcedure is the fully-qualified name of the UserSetupService's
	// GetCurrentStep RPC.
	UserSetupServiceGetCurrentStepProcedure = "/starscope.grpc.UserSetupService/GetCurrentStep"
	// UserSetupServiceFinishStepProcedure is the fully-qualified name of the UserSetupService's
	// FinishStep RPC.
	UserSetupServiceFinishStepProcedure = "/starscope.grpc.UserSetupService/FinishStep"
)

// UserSetupServiceClient is a client for the starscope.grpc.UserSetupService service.
type UserSetupServiceClient interface {
	GetCurrentStep(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[userpb.StepResponse], error)
	FinishStep(context.Context, *connect_go.Request[userpb.FinishStepRequest]) (*connect_go.Response[userpb.StepResponse], error)
}

// NewUserSetupServiceClient constructs a client for the starscope.grpc.UserSetupService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserSetupServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserSetupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userSetupServiceClient{
		getCurrentStep: connect_go.NewClient[emptypb.Empty, userpb.StepResponse](
			httpClient,
			baseURL+UserSetupServiceGetCurrentStepProcedure,
			opts...,
		),
		finishStep: connect_go.NewClient[userpb.FinishStepRequest, userpb.StepResponse](
			httpClient,
			baseURL+UserSetupServiceFinishStepProcedure,
			opts...,
		),
	}
}

// userSetupServiceClient implements UserSetupServiceClient.
type userSetupServiceClient struct {
	getCurrentStep *connect_go.Client[emptypb.Empty, userpb.StepResponse]
	finishStep     *connect_go.Client[userpb.FinishStepRequest, userpb.StepResponse]
}

// GetCurrentStep calls starscope.grpc.UserSetupService.GetCurrentStep.
func (c *userSetupServiceClient) GetCurrentStep(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[userpb.StepResponse], error) {
	return c.getCurrentStep.CallUnary(ctx, req)
}

// FinishStep calls starscope.grpc.UserSetupService.FinishStep.
func (c *userSetupServiceClient) FinishStep(ctx context.Context, req *connect_go.Request[userpb.FinishStepRequest]) (*connect_go.Response[userpb.StepResponse], error) {
	return c.finishStep.CallUnary(ctx, req)
}

// UserSetupServiceHandler is an implementation of the starscope.grpc.UserSetupService service.
type UserSetupServiceHandler interface {
	GetCurrentStep(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[userpb.StepResponse], error)
	FinishStep(context.Context, *connect_go.Request[userpb.FinishStepRequest]) (*connect_go.Response[userpb.StepResponse], error)
}

// NewUserSetupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserSetupServiceHandler(svc UserSetupServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(UserSetupServiceGetCurrentStepProcedure, connect_go.NewUnaryHandler(
		UserSetupServiceGetCurrentStepProcedure,
		svc.GetCurrentStep,
		opts...,
	))
	mux.Handle(UserSetupServiceFinishStepProcedure, connect_go.NewUnaryHandler(
		UserSetupServiceFinishStepProcedure,
		svc.FinishStep,
		opts...,
	))
	return "/starscope.grpc.UserSetupService/", mux
}

// UnimplementedUserSetupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserSetupServiceHandler struct{}

func (UnimplementedUserSetupServiceHandler) GetCurrentStep(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[userpb.StepResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("starscope.grpc.UserSetupService.GetCurrentStep is not implemented"))
}

func (UnimplementedUserSetupServiceHandler) FinishStep(context.Context, *connect_go.Request[userpb.FinishStepRequest]) (*connect_go.Response[userpb.StepResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("starscope.grpc.UserSetupService.FinishStep is not implemented"))
}
