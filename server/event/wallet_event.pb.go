// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: event/wallet_event.proto

package event

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{0}
}

func (x *Coin) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Coin) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CoinReceivedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Coin   *Coin  `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *CoinReceivedEvent) Reset() {
	*x = CoinReceivedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinReceivedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReceivedEvent) ProtoMessage() {}

func (x *CoinReceivedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReceivedEvent.ProtoReflect.Descriptor instead.
func (*CoinReceivedEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{1}
}

func (x *CoinReceivedEvent) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *CoinReceivedEvent) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

type OsmosisPoolUnlockEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration   *durationpb.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	UnlockTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *OsmosisPoolUnlockEvent) Reset() {
	*x = OsmosisPoolUnlockEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsmosisPoolUnlockEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsmosisPoolUnlockEvent) ProtoMessage() {}

func (x *OsmosisPoolUnlockEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsmosisPoolUnlockEvent.ProtoReflect.Descriptor instead.
func (*OsmosisPoolUnlockEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{2}
}

func (x *OsmosisPoolUnlockEvent) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *OsmosisPoolUnlockEvent) GetUnlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

type UnstakeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	Coin           *Coin                  `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *UnstakeEvent) Reset() {
	*x = UnstakeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeEvent) ProtoMessage() {}

func (x *UnstakeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeEvent.ProtoReflect.Descriptor instead.
func (*UnstakeEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{3}
}

func (x *UnstakeEvent) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *UnstakeEvent) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

type NeutronTokenVestingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount     uint64                 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Duration   *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	UnlockTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *NeutronTokenVestingEvent) Reset() {
	*x = NeutronTokenVestingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeutronTokenVestingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeutronTokenVestingEvent) ProtoMessage() {}

func (x *NeutronTokenVestingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeutronTokenVestingEvent.ProtoReflect.Descriptor instead.
func (*NeutronTokenVestingEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{4}
}

func (x *NeutronTokenVestingEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NeutronTokenVestingEvent) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *NeutronTokenVestingEvent) GetUnlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

type VoteReminderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId  uint64                 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	VoteEndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=vote_end_time,json=voteEndTime,proto3" json:"vote_end_time,omitempty"`
}

func (x *VoteReminderEvent) Reset() {
	*x = VoteReminderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteReminderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteReminderEvent) ProtoMessage() {}

func (x *VoteReminderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteReminderEvent.ProtoReflect.Descriptor instead.
func (*VoteReminderEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{5}
}

func (x *VoteReminderEvent) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *VoteReminderEvent) GetVoteEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VoteEndTime
	}
	return nil
}

type VotedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Option     string `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *VotedEvent) Reset() {
	*x = VotedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotedEvent) ProtoMessage() {}

func (x *VotedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotedEvent.ProtoReflect.Descriptor instead.
func (*VotedEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{6}
}

func (x *VotedEvent) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *VotedEvent) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

type WalletEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	WalletAddress string                 `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NotifyTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=notify_time,json=notifyTime,proto3" json:"notify_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*WalletEvent_CoinReceived
	//	*WalletEvent_OsmosisPoolUnlock
	//	*WalletEvent_Unstake
	//	*WalletEvent_NeutronTokenVesting
	//	*WalletEvent_VoteReminder
	//	*WalletEvent_Voted
	Event isWalletEvent_Event `protobuf_oneof:"event"`
}

func (x *WalletEvent) Reset() {
	*x = WalletEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_wallet_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletEvent) ProtoMessage() {}

func (x *WalletEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_wallet_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletEvent.ProtoReflect.Descriptor instead.
func (*WalletEvent) Descriptor() ([]byte, []int) {
	return file_event_wallet_event_proto_rawDescGZIP(), []int{7}
}

func (x *WalletEvent) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *WalletEvent) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *WalletEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WalletEvent) GetNotifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NotifyTime
	}
	return nil
}

func (m *WalletEvent) GetEvent() isWalletEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *WalletEvent) GetCoinReceived() *CoinReceivedEvent {
	if x, ok := x.GetEvent().(*WalletEvent_CoinReceived); ok {
		return x.CoinReceived
	}
	return nil
}

func (x *WalletEvent) GetOsmosisPoolUnlock() *OsmosisPoolUnlockEvent {
	if x, ok := x.GetEvent().(*WalletEvent_OsmosisPoolUnlock); ok {
		return x.OsmosisPoolUnlock
	}
	return nil
}

func (x *WalletEvent) GetUnstake() *UnstakeEvent {
	if x, ok := x.GetEvent().(*WalletEvent_Unstake); ok {
		return x.Unstake
	}
	return nil
}

func (x *WalletEvent) GetNeutronTokenVesting() *NeutronTokenVestingEvent {
	if x, ok := x.GetEvent().(*WalletEvent_NeutronTokenVesting); ok {
		return x.NeutronTokenVesting
	}
	return nil
}

func (x *WalletEvent) GetVoteReminder() *VoteReminderEvent {
	if x, ok := x.GetEvent().(*WalletEvent_VoteReminder); ok {
		return x.VoteReminder
	}
	return nil
}

func (x *WalletEvent) GetVoted() *VotedEvent {
	if x, ok := x.GetEvent().(*WalletEvent_Voted); ok {
		return x.Voted
	}
	return nil
}

type isWalletEvent_Event interface {
	isWalletEvent_Event()
}

type WalletEvent_CoinReceived struct {
	CoinReceived *CoinReceivedEvent `protobuf:"bytes,5,opt,name=coin_received,json=coinReceived,proto3,oneof"`
}

type WalletEvent_OsmosisPoolUnlock struct {
	OsmosisPoolUnlock *OsmosisPoolUnlockEvent `protobuf:"bytes,6,opt,name=osmosis_pool_unlock,json=osmosisPoolUnlock,proto3,oneof"`
}

type WalletEvent_Unstake struct {
	Unstake *UnstakeEvent `protobuf:"bytes,7,opt,name=unstake,proto3,oneof"`
}

type WalletEvent_NeutronTokenVesting struct {
	NeutronTokenVesting *NeutronTokenVestingEvent `protobuf:"bytes,8,opt,name=neutron_token_vesting,json=neutronTokenVesting,proto3,oneof"`
}

type WalletEvent_VoteReminder struct {
	VoteReminder *VoteReminderEvent `protobuf:"bytes,9,opt,name=vote_reminder,json=voteReminder,proto3,oneof"`
}

type WalletEvent_Voted struct {
	Voted *VotedEvent `protobuf:"bytes,10,opt,name=voted,proto3,oneof"`
}

func (*WalletEvent_CoinReceived) isWalletEvent_Event() {}

func (*WalletEvent_OsmosisPoolUnlock) isWalletEvent_Event() {}

func (*WalletEvent_Unstake) isWalletEvent_Event() {}

func (*WalletEvent_NeutronTokenVesting) isWalletEvent_Event() {}

func (*WalletEvent_VoteReminder) isWalletEvent_Event() {}

func (*WalletEvent_Voted) isWalletEvent_Event() {}

var File_event_wallet_event_proto protoreflect.FileDescriptor

var file_event_wallet_event_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x56, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x4f,
	0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x0c, 0x55, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x4e, 0x65,
	0x75, 0x74, 0x72, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x91, 0x05, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x13, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x75, 0x74, 0x72,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0d, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0xac, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6f, 0x6f, 0x6d,
	0x69, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x2d, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x53, 0x45, 0x58, 0xaa, 0x02, 0x0f,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xca,
	0x02, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0xe2, 0x02, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x10, 0x53, 0x74, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x3a, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_wallet_event_proto_rawDescOnce sync.Once
	file_event_wallet_event_proto_rawDescData = file_event_wallet_event_proto_rawDesc
)

func file_event_wallet_event_proto_rawDescGZIP() []byte {
	file_event_wallet_event_proto_rawDescOnce.Do(func() {
		file_event_wallet_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_wallet_event_proto_rawDescData)
	})
	return file_event_wallet_event_proto_rawDescData
}

var file_event_wallet_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_event_wallet_event_proto_goTypes = []interface{}{
	(*Coin)(nil),                     // 0: starscope.event.Coin
	(*CoinReceivedEvent)(nil),        // 1: starscope.event.CoinReceivedEvent
	(*OsmosisPoolUnlockEvent)(nil),   // 2: starscope.event.OsmosisPoolUnlockEvent
	(*UnstakeEvent)(nil),             // 3: starscope.event.UnstakeEvent
	(*NeutronTokenVestingEvent)(nil), // 4: starscope.event.NeutronTokenVestingEvent
	(*VoteReminderEvent)(nil),        // 5: starscope.event.VoteReminderEvent
	(*VotedEvent)(nil),               // 6: starscope.event.VotedEvent
	(*WalletEvent)(nil),              // 7: starscope.event.WalletEvent
	(*durationpb.Duration)(nil),      // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
}
var file_event_wallet_event_proto_depIdxs = []int32{
	0,  // 0: starscope.event.CoinReceivedEvent.coin:type_name -> starscope.event.Coin
	8,  // 1: starscope.event.OsmosisPoolUnlockEvent.duration:type_name -> google.protobuf.Duration
	9,  // 2: starscope.event.OsmosisPoolUnlockEvent.unlock_time:type_name -> google.protobuf.Timestamp
	9,  // 3: starscope.event.UnstakeEvent.completion_time:type_name -> google.protobuf.Timestamp
	0,  // 4: starscope.event.UnstakeEvent.coin:type_name -> starscope.event.Coin
	8,  // 5: starscope.event.NeutronTokenVestingEvent.duration:type_name -> google.protobuf.Duration
	9,  // 6: starscope.event.NeutronTokenVestingEvent.unlock_time:type_name -> google.protobuf.Timestamp
	9,  // 7: starscope.event.VoteReminderEvent.vote_end_time:type_name -> google.protobuf.Timestamp
	9,  // 8: starscope.event.WalletEvent.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 9: starscope.event.WalletEvent.notify_time:type_name -> google.protobuf.Timestamp
	1,  // 10: starscope.event.WalletEvent.coin_received:type_name -> starscope.event.CoinReceivedEvent
	2,  // 11: starscope.event.WalletEvent.osmosis_pool_unlock:type_name -> starscope.event.OsmosisPoolUnlockEvent
	3,  // 12: starscope.event.WalletEvent.unstake:type_name -> starscope.event.UnstakeEvent
	4,  // 13: starscope.event.WalletEvent.neutron_token_vesting:type_name -> starscope.event.NeutronTokenVestingEvent
	5,  // 14: starscope.event.WalletEvent.vote_reminder:type_name -> starscope.event.VoteReminderEvent
	6,  // 15: starscope.event.WalletEvent.voted:type_name -> starscope.event.VotedEvent
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_event_wallet_event_proto_init() }
func file_event_wallet_event_proto_init() {
	if File_event_wallet_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_wallet_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinReceivedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsmosisPoolUnlockEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeutronTokenVestingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteReminderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_wallet_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_wallet_event_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*WalletEvent_CoinReceived)(nil),
		(*WalletEvent_OsmosisPoolUnlock)(nil),
		(*WalletEvent_Unstake)(nil),
		(*WalletEvent_NeutronTokenVesting)(nil),
		(*WalletEvent_VoteReminder)(nil),
		(*WalletEvent_Voted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_wallet_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_wallet_event_proto_goTypes,
		DependencyIndexes: file_event_wallet_event_proto_depIdxs,
		MessageInfos:      file_event_wallet_event_proto_msgTypes,
	}.Build()
	File_event_wallet_event_proto = out.File
	file_event_wallet_event_proto_rawDesc = nil
	file_event_wallet_event_proto_goTypes = nil
	file_event_wallet_event_proto_depIdxs = nil
}
