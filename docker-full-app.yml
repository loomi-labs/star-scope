version: '3.9'

services:
  db:
    image: postgres:14.5
    container_name: starscope_db
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=star-scope-db
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migration:
    build: server
    container_name: starscope_db_migration
    working_dir: /app
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/star-scope-db?sslmode=disable
    env_file:
      - server/.env.template
    command: "/starscope db migrate"
    depends_on:
      db:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: starscope_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    logging:
      driver: "none"
    volumes:
      - pgadmin:/root/.pgadmin
      - ./data/docker/pgadmin/local-db-servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"

  kafka:
    image: obsidiandynamics/kafka
    container_name: starscope_kafka
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: starscope_kafdrop
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
      JVM_OPTS: '-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify'
    depends_on:
      - 'kafka'

  grpc:
    build: server
    container_name: starscope_grpc
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service grpc"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  main-indexer:
    build: indexers/base
    container_name: starscope_main_indexer
    working_dir: /app
    env_file:
      - indexers/base/.env.template
    command: "/indexer"
    depends_on:
      kafka:
        condition: service_started
      grpc:
        condition: service_started

  osmosis-indexer:
    build: indexers/osmosis
    container_name: starscope_osmosis_indexer
    working_dir: /app
    env_file:
      - indexers/osmosis/.env.template
    command: "/indexer"
    depends_on:
      kafka:
        condition: service_started
      grpc:
        condition: service_started

  wallet-event-consumer:
    build: server
    container_name: starscope_wallet_event_consumer
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service wallet-event-consumer"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  chain-event-consumer:
    build: server
    container_name: starscope_chain_event_consumer
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service chain-event-consumer"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  contract-event-consumer:
    build: server
    container_name: starscope_contract_event_consumer
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service contract-event-consumer"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  chain-crawler:
    build: server
    container_name: starscope_chain_crawler
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service chain-crawler"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  validator-crawler:
    build: server
    container_name: starscope_validator_crawler
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service validator-crawler"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  gov-crawler:
    build: server
    container_name: starscope_gov_crawler
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service gov-crawler"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  client:
    build:
      context: .
      dockerfile: client/Dockerfile
      args:
        - DEBUG=true
        - GRPC_WEB_ENDPOINT_URL=http://127.0.0.1:8080
        - WEB_APP_URL=http://test.mydomain.com:8080
        - DISCORD_CLIENT_ID=953923165808107540
        - TELEGRAM_BOT_NAME=cosmos_gov_bot
    container_name: starscope_client
    ports:
      - "8080:80"
    depends_on:
      - envoy

  envoy:
    build: data/docker/envoy
    container_name: starscope_envoy
    volumes:
      - ./data/docker/envoy/envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - grpc

volumes:
  data:
    name: starscope_data
  pgadmin:
    name: starscope_pgadmin
