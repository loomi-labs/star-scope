// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shifty11/blocklog-backend/ent/chain"
	"github.com/shifty11/blocklog-backend/ent/channel"
	"github.com/shifty11/blocklog-backend/ent/eventlistener"
)

// EventListener is the model entity for the EventListener schema.
type EventListener struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// WalletAddress holds the value of the "wallet_address" field.
	WalletAddress string `json:"wallet_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventListenerQuery when eager-loading is set.
	Edges                   EventListenerEdges `json:"edges"`
	chain_event_listeners   *int
	channel_event_listeners *int
	selectValues            sql.SelectValues
}

// EventListenerEdges holds the relations/edges for other nodes in the graph.
type EventListenerEdges struct {
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// Chain holds the value of the chain edge.
	Chain *Chain `json:"chain,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventListenerEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[0] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventListenerEdges) ChainOrErr() (*Chain, error) {
	if e.loadedTypes[1] {
		if e.Chain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chain.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e EventListenerEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventListener) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventlistener.FieldID:
			values[i] = new(sql.NullInt64)
		case eventlistener.FieldWalletAddress:
			values[i] = new(sql.NullString)
		case eventlistener.FieldCreateTime, eventlistener.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case eventlistener.ForeignKeys[0]: // chain_event_listeners
			values[i] = new(sql.NullInt64)
		case eventlistener.ForeignKeys[1]: // channel_event_listeners
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventListener fields.
func (el *EventListener) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventlistener.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			el.ID = int(value.Int64)
		case eventlistener.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				el.CreateTime = value.Time
			}
		case eventlistener.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				el.UpdateTime = value.Time
			}
		case eventlistener.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				el.WalletAddress = value.String
			}
		case eventlistener.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chain_event_listeners", value)
			} else if value.Valid {
				el.chain_event_listeners = new(int)
				*el.chain_event_listeners = int(value.Int64)
			}
		case eventlistener.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field channel_event_listeners", value)
			} else if value.Valid {
				el.channel_event_listeners = new(int)
				*el.channel_event_listeners = int(value.Int64)
			}
		default:
			el.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventListener.
// This includes values selected through modifiers, order, etc.
func (el *EventListener) Value(name string) (ent.Value, error) {
	return el.selectValues.Get(name)
}

// QueryChannel queries the "channel" edge of the EventListener entity.
func (el *EventListener) QueryChannel() *ChannelQuery {
	return NewEventListenerClient(el.config).QueryChannel(el)
}

// QueryChain queries the "chain" edge of the EventListener entity.
func (el *EventListener) QueryChain() *ChainQuery {
	return NewEventListenerClient(el.config).QueryChain(el)
}

// QueryEvents queries the "events" edge of the EventListener entity.
func (el *EventListener) QueryEvents() *EventQuery {
	return NewEventListenerClient(el.config).QueryEvents(el)
}

// Update returns a builder for updating this EventListener.
// Note that you need to call EventListener.Unwrap() before calling this method if this EventListener
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *EventListener) Update() *EventListenerUpdateOne {
	return NewEventListenerClient(el.config).UpdateOne(el)
}

// Unwrap unwraps the EventListener entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (el *EventListener) Unwrap() *EventListener {
	_tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventListener is not a transactional entity")
	}
	el.config.driver = _tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *EventListener) String() string {
	var builder strings.Builder
	builder.WriteString("EventListener(")
	builder.WriteString(fmt.Sprintf("id=%v, ", el.ID))
	builder.WriteString("create_time=")
	builder.WriteString(el.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(el.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("wallet_address=")
	builder.WriteString(el.WalletAddress)
	builder.WriteByte(')')
	return builder.String()
}

// EventListeners is a parsable slice of EventListener.
type EventListeners []*EventListener
