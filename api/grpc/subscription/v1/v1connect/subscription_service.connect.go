// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/subscription/v1/subscription_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/shifty11/blocklog-backend/grpc/subscription/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "blocklog.grpc.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionServiceListSubscriptionsProcedure is the fully-qualified name of the
	// SubscriptionService's ListSubscriptions RPC.
	SubscriptionServiceListSubscriptionsProcedure = "/blocklog.grpc.SubscriptionService/ListSubscriptions"
	// SubscriptionServiceSubscribeProcedure is the fully-qualified name of the SubscriptionService's
	// Subscribe RPC.
	SubscriptionServiceSubscribeProcedure = "/blocklog.grpc.SubscriptionService/Subscribe"
)

// SubscriptionServiceClient is a client for the blocklog.grpc.SubscriptionService service.
type SubscriptionServiceClient interface {
	ListSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSubscriptionsResponse], error)
	Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest]) (*connect_go.Response[v1.SubscribeResponse], error)
}

// NewSubscriptionServiceClient constructs a client for the blocklog.grpc.SubscriptionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subscriptionServiceClient{
		listSubscriptions: connect_go.NewClient[emptypb.Empty, v1.ListSubscriptionsResponse](
			httpClient,
			baseURL+SubscriptionServiceListSubscriptionsProcedure,
			opts...,
		),
		subscribe: connect_go.NewClient[v1.SubscribeRequest, v1.SubscribeResponse](
			httpClient,
			baseURL+SubscriptionServiceSubscribeProcedure,
			opts...,
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	listSubscriptions *connect_go.Client[emptypb.Empty, v1.ListSubscriptionsResponse]
	subscribe         *connect_go.Client[v1.SubscribeRequest, v1.SubscribeResponse]
}

// ListSubscriptions calls blocklog.grpc.SubscriptionService.ListSubscriptions.
func (c *subscriptionServiceClient) ListSubscriptions(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// Subscribe calls blocklog.grpc.SubscriptionService.Subscribe.
func (c *subscriptionServiceClient) Subscribe(ctx context.Context, req *connect_go.Request[v1.SubscribeRequest]) (*connect_go.Response[v1.SubscribeResponse], error) {
	return c.subscribe.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the blocklog.grpc.SubscriptionService service.
type SubscriptionServiceHandler interface {
	ListSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSubscriptionsResponse], error)
	Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest]) (*connect_go.Response[v1.SubscribeResponse], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SubscriptionServiceListSubscriptionsProcedure, connect_go.NewUnaryHandler(
		SubscriptionServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		opts...,
	))
	mux.Handle(SubscriptionServiceSubscribeProcedure, connect_go.NewUnaryHandler(
		SubscriptionServiceSubscribeProcedure,
		svc.Subscribe,
		opts...,
	))
	return "/blocklog.grpc.SubscriptionService/", mux
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) ListSubscriptions(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocklog.grpc.SubscriptionService.ListSubscriptions is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest]) (*connect_go.Response[v1.SubscribeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocklog.grpc.SubscriptionService.Subscribe is not implemented"))
}
