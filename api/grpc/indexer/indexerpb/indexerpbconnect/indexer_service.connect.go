// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/indexer/indexerpb/indexer_service.proto

package indexerpbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	indexerpb "github.com/shifty11/blocklog-backend/grpc/indexer/indexerpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IndexerServiceName is the fully-qualified name of the IndexerService service.
	IndexerServiceName = "blocklog.grpc.IndexerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IndexerServiceGetHeightProcedure is the fully-qualified name of the IndexerService's GetHeight
	// RPC.
	IndexerServiceGetHeightProcedure = "/blocklog.grpc.IndexerService/GetHeight"
	// IndexerServiceUpdateHeightProcedure is the fully-qualified name of the IndexerService's
	// UpdateHeight RPC.
	IndexerServiceUpdateHeightProcedure = "/blocklog.grpc.IndexerService/UpdateHeight"
)

// IndexerServiceClient is a client for the blocklog.grpc.IndexerService service.
type IndexerServiceClient interface {
	GetHeight(context.Context, *connect_go.Request[indexerpb.GetHeightRequest]) (*connect_go.Response[indexerpb.Height], error)
	UpdateHeight(context.Context, *connect_go.Request[indexerpb.UpdateHeightRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewIndexerServiceClient constructs a client for the blocklog.grpc.IndexerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIndexerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IndexerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &indexerServiceClient{
		getHeight: connect_go.NewClient[indexerpb.GetHeightRequest, indexerpb.Height](
			httpClient,
			baseURL+IndexerServiceGetHeightProcedure,
			opts...,
		),
		updateHeight: connect_go.NewClient[indexerpb.UpdateHeightRequest, emptypb.Empty](
			httpClient,
			baseURL+IndexerServiceUpdateHeightProcedure,
			opts...,
		),
	}
}

// indexerServiceClient implements IndexerServiceClient.
type indexerServiceClient struct {
	getHeight    *connect_go.Client[indexerpb.GetHeightRequest, indexerpb.Height]
	updateHeight *connect_go.Client[indexerpb.UpdateHeightRequest, emptypb.Empty]
}

// GetHeight calls blocklog.grpc.IndexerService.GetHeight.
func (c *indexerServiceClient) GetHeight(ctx context.Context, req *connect_go.Request[indexerpb.GetHeightRequest]) (*connect_go.Response[indexerpb.Height], error) {
	return c.getHeight.CallUnary(ctx, req)
}

// UpdateHeight calls blocklog.grpc.IndexerService.UpdateHeight.
func (c *indexerServiceClient) UpdateHeight(ctx context.Context, req *connect_go.Request[indexerpb.UpdateHeightRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateHeight.CallUnary(ctx, req)
}

// IndexerServiceHandler is an implementation of the blocklog.grpc.IndexerService service.
type IndexerServiceHandler interface {
	GetHeight(context.Context, *connect_go.Request[indexerpb.GetHeightRequest]) (*connect_go.Response[indexerpb.Height], error)
	UpdateHeight(context.Context, *connect_go.Request[indexerpb.UpdateHeightRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewIndexerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIndexerServiceHandler(svc IndexerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(IndexerServiceGetHeightProcedure, connect_go.NewUnaryHandler(
		IndexerServiceGetHeightProcedure,
		svc.GetHeight,
		opts...,
	))
	mux.Handle(IndexerServiceUpdateHeightProcedure, connect_go.NewUnaryHandler(
		IndexerServiceUpdateHeightProcedure,
		svc.UpdateHeight,
		opts...,
	))
	return "/blocklog.grpc.IndexerService/", mux
}

// UnimplementedIndexerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIndexerServiceHandler struct{}

func (UnimplementedIndexerServiceHandler) GetHeight(context.Context, *connect_go.Request[indexerpb.GetHeightRequest]) (*connect_go.Response[indexerpb.Height], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocklog.grpc.IndexerService.GetHeight is not implemented"))
}

func (UnimplementedIndexerServiceHandler) UpdateHeight(context.Context, *connect_go.Request[indexerpb.UpdateHeightRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("blocklog.grpc.IndexerService.UpdateHeight is not implemented"))
}
