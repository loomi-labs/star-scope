version: '3.9'

services:
  db:
    image: postgres:14.5
    container_name: starscope_db
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=star-scope-db
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.role != manager

  db-migration:
    build: server
    container_name: starscope_db_migration
    working_dir: /app
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/star-scope-db?sslmode=disable
    env_file:
      - server/.env.template
    command: "/starscope db migrate"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      placement:
        constraints:
          - node.role != manager

  pgadmin:
    image: dpage/pgadmin4:7.0
    container_name: starscope_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    logging:
      driver: "none"
    volumes:
      - pgadmin:/root/.pgadmin
      - ./data/docker/pgadmin/local-db-servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    deploy:
      placement:
        constraints:
          - node.role != manager

  kafka:
    image: obsidiandynamics/kafka
    container_name: starscope_kafka
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'
    deploy:
      placement:
        constraints:
          - node.role != manager

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: starscope_kafdrop
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
      JVM_OPTS: '-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify'
    depends_on:
      - 'kafka'
    deploy:
      placement:
        constraints:
          - node.role != manager

  grpc:
    build: server
    container_name: starscope_grpc
    working_dir: /app
    ports:
      - "50001:50001"
    env_file:
      - server/.env.template
    command: "/starscope service grpc"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    deploy:
      placement:
        constraints:
          - node.role != manager

  indexer-osmosis:
    build: indexers/osmosis
    container_name: starscope_indexer_osmosis
    working_dir: /app
    env_file:
      - indexers/osmosis/.env.template
    command: "/indexer"
    restart: on-failure
    depends_on:
      kafka:
        condition: service_started
      grpc:
        condition: service_started
    deploy:
      placement:
        constraints:
          - node.role != manager

  event-consumer:
    build: server
    container_name: starscope_event_consumer
    working_dir: /app
    env_file:
      - server/.env.template
    command: "/starscope service event-consumer"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    deploy:
      placement:
        constraints:
          - node.role != manager

  client:
    build:
      context: .
      dockerfile: client.Dockerfile
    container_name: starscope_client
    ports:
      - "8080:8080"
    deploy:
      placement:
        constraints:
          - node.role != manager

  whoami-client:
    image: jwilder/whoami
    container_name: starscope_whoami_client
    networks:
      - caddy
    deploy:
      labels:
        caddy: star-scope.decrypto.online
        caddy.reverse_proxy: "client:8080"
      placement:
        constraints:
          - node.role != manager

  whoami-kafkadrop:
    image: jwilder/whoami
    container_name: starscope_whoami_kafkadrop
    networks:
      - caddy
    deploy:
      labels:
        caddy: kafkadrop.star-scope.decrypto.online
        caddy.reverse_proxy: "kafkadrop:9000"
      placement:
        constraints:
          - node.role != manager

volumes:
  data:
    name: starscope_data
  pgadmin:
    name: starscope_pgadmin

networks:
  caddy:
    external: true